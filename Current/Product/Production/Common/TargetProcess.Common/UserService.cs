//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

namespace CIFactory.TargetProcess.Common.UserWebService
{
    // 
    // This source code was auto-generated by wsdl, Version=2.0.50727.42.
    // 


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "UserServiceSoap", Namespace = "http://targetprocess.com")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DataTransferObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class UserService : Microsoft.Web.Services3.WebServicesClientProtocol
    {

        private System.Threading.SendOrPostCallback RetrieveAllForDefaultRoleOperationCompleted;

        private System.Threading.SendOrPostCallback GetByIDOperationCompleted;

        private System.Threading.SendOrPostCallback CreateOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteOperationCompleted;

        private System.Threading.SendOrPostCallback RetrieveAllOperationCompleted;

        private System.Threading.SendOrPostCallback RetrieveOperationCompleted;

        private System.Threading.SendOrPostCallback GetIDsOperationCompleted;

        private System.Threading.SendOrPostCallback RetrievePageOperationCompleted;

        private System.Threading.SendOrPostCallback RetrieveCountOperationCompleted;

        /// <remarks/>
        public UserService()
        {
            this.Url = "http://tp.agilexhealth.com/Services/UserService.asmx";
        }

        /// <remarks/>
        public event RetrieveAllForDefaultRoleCompletedEventHandler RetrieveAllForDefaultRoleCompleted;

        /// <remarks/>
        public event GetByIDCompletedEventHandler GetByIDCompleted;

        /// <remarks/>
        public event CreateCompletedEventHandler CreateCompleted;

        /// <remarks/>
        public event UpdateCompletedEventHandler UpdateCompleted;

        /// <remarks/>
        public event DeleteCompletedEventHandler DeleteCompleted;

        /// <remarks/>
        public event RetrieveAllCompletedEventHandler RetrieveAllCompleted;

        /// <remarks/>
        public event RetrieveCompletedEventHandler RetrieveCompleted;

        /// <remarks/>
        public event GetIDsCompletedEventHandler GetIDsCompleted;

        /// <remarks/>
        public event RetrievePageCompletedEventHandler RetrievePageCompleted;

        /// <remarks/>
        public event RetrieveCountCompletedEventHandler RetrieveCountCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveAllForDefaultRole", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserDTO[] RetrieveAllForDefaultRole(int roleID)
        {
            object[] results = this.Invoke("RetrieveAllForDefaultRole", new object[] {
                    roleID});
            return ((UserDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieveAllForDefaultRole(int roleID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrieveAllForDefaultRole", new object[] {
                    roleID}, callback, asyncState);
        }

        /// <remarks/>
        public UserDTO[] EndRetrieveAllForDefaultRole(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((UserDTO[])(results[0]));
        }

        /// <remarks/>
        public void RetrieveAllForDefaultRoleAsync(int roleID)
        {
            this.RetrieveAllForDefaultRoleAsync(roleID, null);
        }

        /// <remarks/>
        public void RetrieveAllForDefaultRoleAsync(int roleID, object userState)
        {
            if ((this.RetrieveAllForDefaultRoleOperationCompleted == null))
            {
                this.RetrieveAllForDefaultRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAllForDefaultRoleOperationCompleted);
            }
            this.InvokeAsync("RetrieveAllForDefaultRole", new object[] {
                    roleID}, this.RetrieveAllForDefaultRoleOperationCompleted, userState);
        }

        private void OnRetrieveAllForDefaultRoleOperationCompleted(object arg)
        {
            if ((this.RetrieveAllForDefaultRoleCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAllForDefaultRoleCompleted(this, new RetrieveAllForDefaultRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/GetByID", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserDTO GetByID(int id)
        {
            object[] results = this.Invoke("GetByID", new object[] {
                    id});
            return ((UserDTO)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetByID(int id, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetByID", new object[] {
                    id}, callback, asyncState);
        }

        /// <remarks/>
        public UserDTO EndGetByID(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((UserDTO)(results[0]));
        }

        /// <remarks/>
        public void GetByIDAsync(int id)
        {
            this.GetByIDAsync(id, null);
        }

        /// <remarks/>
        public void GetByIDAsync(int id, object userState)
        {
            if ((this.GetByIDOperationCompleted == null))
            {
                this.GetByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetByIDOperationCompleted);
            }
            this.InvokeAsync("GetByID", new object[] {
                    id}, this.GetByIDOperationCompleted, userState);
        }

        private void OnGetByIDOperationCompleted(object arg)
        {
            if ((this.GetByIDCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetByIDCompleted(this, new GetByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/Create", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int Create(UserDTO entity)
        {
            object[] results = this.Invoke("Create", new object[] {
                    entity});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreate(UserDTO entity, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Create", new object[] {
                    entity}, callback, asyncState);
        }

        /// <remarks/>
        public int EndCreate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void CreateAsync(UserDTO entity)
        {
            this.CreateAsync(entity, null);
        }

        /// <remarks/>
        public void CreateAsync(UserDTO entity, object userState)
        {
            if ((this.CreateOperationCompleted == null))
            {
                this.CreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOperationCompleted);
            }
            this.InvokeAsync("Create", new object[] {
                    entity}, this.CreateOperationCompleted, userState);
        }

        private void OnCreateOperationCompleted(object arg)
        {
            if ((this.CreateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateCompleted(this, new CreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/Update", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Update(UserDTO entity)
        {
            this.Invoke("Update", new object[] {
                    entity});
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdate(UserDTO entity, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Update", new object[] {
                    entity}, callback, asyncState);
        }

        /// <remarks/>
        public void EndUpdate(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void UpdateAsync(UserDTO entity)
        {
            this.UpdateAsync(entity, null);
        }

        /// <remarks/>
        public void UpdateAsync(UserDTO entity, object userState)
        {
            if ((this.UpdateOperationCompleted == null))
            {
                this.UpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateOperationCompleted);
            }
            this.InvokeAsync("Update", new object[] {
                    entity}, this.UpdateOperationCompleted, userState);
        }

        private void OnUpdateOperationCompleted(object arg)
        {
            if ((this.UpdateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/Delete", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Delete(int id)
        {
            this.Invoke("Delete", new object[] {
                    id});
        }

        /// <remarks/>
        public System.IAsyncResult BeginDelete(int id, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Delete", new object[] {
                    id}, callback, asyncState);
        }

        /// <remarks/>
        public void EndDelete(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void DeleteAsync(int id)
        {
            this.DeleteAsync(id, null);
        }

        /// <remarks/>
        public void DeleteAsync(int id, object userState)
        {
            if ((this.DeleteOperationCompleted == null))
            {
                this.DeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOperationCompleted);
            }
            this.InvokeAsync("Delete", new object[] {
                    id}, this.DeleteOperationCompleted, userState);
        }

        private void OnDeleteOperationCompleted(object arg)
        {
            if ((this.DeleteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveAll", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserDTO[] RetrieveAll()
        {
            object[] results = this.Invoke("RetrieveAll", new object[0]);
            return ((UserDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieveAll(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrieveAll", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public UserDTO[] EndRetrieveAll(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((UserDTO[])(results[0]));
        }

        /// <remarks/>
        public void RetrieveAllAsync()
        {
            this.RetrieveAllAsync(null);
        }

        /// <remarks/>
        public void RetrieveAllAsync(object userState)
        {
            if ((this.RetrieveAllOperationCompleted == null))
            {
                this.RetrieveAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAllOperationCompleted);
            }
            this.InvokeAsync("RetrieveAll", new object[0], this.RetrieveAllOperationCompleted, userState);
        }

        private void OnRetrieveAllOperationCompleted(object arg)
        {
            if ((this.RetrieveAllCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAllCompleted(this, new RetrieveAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/Retrieve", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserDTO[] Retrieve(string hql, object[] parameters)
        {
            object[] results = this.Invoke("Retrieve", new object[] {
                    hql,
                    parameters});
            return ((UserDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieve(string hql, object[] parameters, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Retrieve", new object[] {
                    hql,
                    parameters}, callback, asyncState);
        }

        /// <remarks/>
        public UserDTO[] EndRetrieve(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((UserDTO[])(results[0]));
        }

        /// <remarks/>
        public void RetrieveAsync(string hql, object[] parameters)
        {
            this.RetrieveAsync(hql, parameters, null);
        }

        /// <remarks/>
        public void RetrieveAsync(string hql, object[] parameters, object userState)
        {
            if ((this.RetrieveOperationCompleted == null))
            {
                this.RetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveOperationCompleted);
            }
            this.InvokeAsync("Retrieve", new object[] {
                    hql,
                    parameters}, this.RetrieveOperationCompleted, userState);
        }

        private void OnRetrieveOperationCompleted(object arg)
        {
            if ((this.RetrieveCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveCompleted(this, new RetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/GetIDs", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] GetIDs(string hql, object[] parameters)
        {
            object[] results = this.Invoke("GetIDs", new object[] {
                    hql,
                    parameters});
            return ((int[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetIDs(string hql, object[] parameters, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetIDs", new object[] {
                    hql,
                    parameters}, callback, asyncState);
        }

        /// <remarks/>
        public int[] EndGetIDs(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int[])(results[0]));
        }

        /// <remarks/>
        public void GetIDsAsync(string hql, object[] parameters)
        {
            this.GetIDsAsync(hql, parameters, null);
        }

        /// <remarks/>
        public void GetIDsAsync(string hql, object[] parameters, object userState)
        {
            if ((this.GetIDsOperationCompleted == null))
            {
                this.GetIDsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIDsOperationCompleted);
            }
            this.InvokeAsync("GetIDs", new object[] {
                    hql,
                    parameters}, this.GetIDsOperationCompleted, userState);
        }

        private void OnGetIDsOperationCompleted(object arg)
        {
            if ((this.GetIDsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIDsCompleted(this, new GetIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrievePage", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserDTO[] RetrievePage(string hql, int page, int pageSize, object[] parameters)
        {
            object[] results = this.Invoke("RetrievePage", new object[] {
                    hql,
                    page,
                    pageSize,
                    parameters});
            return ((UserDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrievePage(string hql, int page, int pageSize, object[] parameters, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrievePage", new object[] {
                    hql,
                    page,
                    pageSize,
                    parameters}, callback, asyncState);
        }

        /// <remarks/>
        public UserDTO[] EndRetrievePage(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((UserDTO[])(results[0]));
        }

        /// <remarks/>
        public void RetrievePageAsync(string hql, int page, int pageSize, object[] parameters)
        {
            this.RetrievePageAsync(hql, page, pageSize, parameters, null);
        }

        /// <remarks/>
        public void RetrievePageAsync(string hql, int page, int pageSize, object[] parameters, object userState)
        {
            if ((this.RetrievePageOperationCompleted == null))
            {
                this.RetrievePageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrievePageOperationCompleted);
            }
            this.InvokeAsync("RetrievePage", new object[] {
                    hql,
                    page,
                    pageSize,
                    parameters}, this.RetrievePageOperationCompleted, userState);
        }

        private void OnRetrievePageOperationCompleted(object arg)
        {
            if ((this.RetrievePageCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrievePageCompleted(this, new RetrievePageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveCount", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RetrieveCount(string hql, object[] parameters)
        {
            object[] results = this.Invoke("RetrieveCount", new object[] {
                    hql,
                    parameters});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieveCount(string hql, object[] parameters, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrieveCount", new object[] {
                    hql,
                    parameters}, callback, asyncState);
        }

        /// <remarks/>
        public int EndRetrieveCount(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void RetrieveCountAsync(string hql, object[] parameters)
        {
            this.RetrieveCountAsync(hql, parameters, null);
        }

        /// <remarks/>
        public void RetrieveCountAsync(string hql, object[] parameters, object userState)
        {
            if ((this.RetrieveCountOperationCompleted == null))
            {
                this.RetrieveCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveCountOperationCompleted);
            }
            this.InvokeAsync("RetrieveCount", new object[] {
                    hql,
                    parameters}, this.RetrieveCountOperationCompleted, userState);
        }

        private void OnRetrieveCountOperationCompleted(object arg)
        {
            if ((this.RetrieveCountCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveCountCompleted(this, new RetrieveCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://targetprocess.com")]
    public partial class UserDTO : DataTransferObject
    {

        private System.Nullable<int> userIDField;

        private string firstNameField;

        private string lastNameField;

        private string emailField;

        private string loginField;

        private string passwordField;

        private System.Nullable<System.DateTime> createDateField;

        private System.Nullable<System.DateTime> modifyDateField;

        private System.Nullable<System.DateTime> deleteDateField;

        private System.Nullable<bool> isActiveField;

        private System.Nullable<bool> isAdministratorField;

        private string activeDirectoryNameField;

        private System.Nullable<decimal> weeklyAvailableHoursField;

        private System.Nullable<int> currentAllocationField;

        private System.Nullable<decimal> currentAvailableHoursField;

        private System.Nullable<System.DateTime> availableFromField;

        private System.Nullable<int> availableFutureAllocationField;

        private System.Nullable<decimal> availableFutureHoursField;

        private System.Nullable<bool> isObserverField;

        private System.Nullable<int> roleIDField;

        private string defaultRoleNameField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> UserID
        {
            get
            {
                return this.userIDField;
            }
            set
            {
                this.userIDField = value;
            }
        }

        /// <remarks/>
        public string FirstName
        {
            get
            {
                return this.firstNameField;
            }
            set
            {
                this.firstNameField = value;
            }
        }

        /// <remarks/>
        public string LastName
        {
            get
            {
                return this.lastNameField;
            }
            set
            {
                this.lastNameField = value;
            }
        }

        /// <remarks/>
        public string Email
        {
            get
            {
                return this.emailField;
            }
            set
            {
                this.emailField = value;
            }
        }

        /// <remarks/>
        public string Login
        {
            get
            {
                return this.loginField;
            }
            set
            {
                this.loginField = value;
            }
        }

        /// <remarks/>
        public string Password
        {
            get
            {
                return this.passwordField;
            }
            set
            {
                this.passwordField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this.createDateField;
            }
            set
            {
                this.createDateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this.modifyDateField;
            }
            set
            {
                this.modifyDateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<System.DateTime> DeleteDate
        {
            get
            {
                return this.deleteDateField;
            }
            set
            {
                this.deleteDateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<bool> IsActive
        {
            get
            {
                return this.isActiveField;
            }
            set
            {
                this.isActiveField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<bool> IsAdministrator
        {
            get
            {
                return this.isAdministratorField;
            }
            set
            {
                this.isAdministratorField = value;
            }
        }

        /// <remarks/>
        public string ActiveDirectoryName
        {
            get
            {
                return this.activeDirectoryNameField;
            }
            set
            {
                this.activeDirectoryNameField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> WeeklyAvailableHours
        {
            get
            {
                return this.weeklyAvailableHoursField;
            }
            set
            {
                this.weeklyAvailableHoursField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> CurrentAllocation
        {
            get
            {
                return this.currentAllocationField;
            }
            set
            {
                this.currentAllocationField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> CurrentAvailableHours
        {
            get
            {
                return this.currentAvailableHoursField;
            }
            set
            {
                this.currentAvailableHoursField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<System.DateTime> AvailableFrom
        {
            get
            {
                return this.availableFromField;
            }
            set
            {
                this.availableFromField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> AvailableFutureAllocation
        {
            get
            {
                return this.availableFutureAllocationField;
            }
            set
            {
                this.availableFutureAllocationField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> AvailableFutureHours
        {
            get
            {
                return this.availableFutureHoursField;
            }
            set
            {
                this.availableFutureHoursField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<bool> IsObserver
        {
            get
            {
                return this.isObserverField;
            }
            set
            {
                this.isObserverField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> RoleID
        {
            get
            {
                return this.roleIDField;
            }
            set
            {
                this.roleIDField = value;
            }
        }

        /// <remarks/>
        public string DefaultRoleName
        {
            get
            {
                return this.defaultRoleNameField;
            }
            set
            {
                this.defaultRoleNameField = value;
            }
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UserDTO))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://targetprocess.com")]
    public abstract partial class DataTransferObject
    {

        private System.Nullable<int> idField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ID
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveAllForDefaultRoleCompletedEventHandler(object sender, RetrieveAllForDefaultRoleCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveAllForDefaultRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveAllForDefaultRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public UserDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((UserDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetByIDCompletedEventHandler(object sender, GetByIDCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public UserDTO Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((UserDTO)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateCompletedEventHandler(object sender, CreateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveAllCompletedEventHandler(object sender, RetrieveAllCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public UserDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((UserDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveCompletedEventHandler(object sender, RetrieveCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public UserDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((UserDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetIDsCompletedEventHandler(object sender, GetIDsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrievePageCompletedEventHandler(object sender, RetrievePageCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrievePageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrievePageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public UserDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((UserDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveCountCompletedEventHandler(object sender, RetrieveCountCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

}