//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 

namespace CIFactory.TargetProcess.Common.TaskWebService
{

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "TaskServiceSoap", Namespace = "http://targetprocess.com")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DataTransferObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class TaskService : Microsoft.Web.Services3.WebServicesClientProtocol
    {

        private System.Threading.SendOrPostCallback RetrieveAllForLastCommentUserOperationCompleted;

        private System.Threading.SendOrPostCallback RetrieveAllForProjectOperationCompleted;

        private System.Threading.SendOrPostCallback RetrieveAllForOwnerOperationCompleted;

        private System.Threading.SendOrPostCallback RetrieveAllForEntityStateOperationCompleted;

        private System.Threading.SendOrPostCallback ChangeStateOperationCompleted;

        private System.Threading.SendOrPostCallback RetrieveAllForPriorityOperationCompleted;

        private System.Threading.SendOrPostCallback GetPrioritiesOperationCompleted;

        private System.Threading.SendOrPostCallback RetrieveAllForIterationOperationCompleted;

        private System.Threading.SendOrPostCallback RetrieveAllForReleaseOperationCompleted;

        private System.Threading.SendOrPostCallback RetrieveAllForUserStoryOperationCompleted;

        private System.Threading.SendOrPostCallback RetrieveCommentsForTaskOperationCompleted;

        private System.Threading.SendOrPostCallback AddCommentToTaskOperationCompleted;

        private System.Threading.SendOrPostCallback RemoveCommentFromTaskOperationCompleted;

        private System.Threading.SendOrPostCallback RetrieveAttachmentsForTaskOperationCompleted;

        private System.Threading.SendOrPostCallback RemoveAttachmentFromTaskOperationCompleted;

        private System.Threading.SendOrPostCallback AddAttachmentToTaskOperationCompleted;

        private System.Threading.SendOrPostCallback RetrieveAttachedRequestsForTaskOperationCompleted;

        private System.Threading.SendOrPostCallback AddRequestGeneralToTaskOperationCompleted;

        private System.Threading.SendOrPostCallback RemoveRequestGeneralFromTaskOperationCompleted;

        private System.Threading.SendOrPostCallback RetrieveTeamsForTaskOperationCompleted;

        private System.Threading.SendOrPostCallback AddTeamToTaskOperationCompleted;

        private System.Threading.SendOrPostCallback AssignUserAsActorOperationCompleted;

        private System.Threading.SendOrPostCallback AssignUserOperationCompleted;

        private System.Threading.SendOrPostCallback AssignUserByEmailOrLoginAsActorOperationCompleted;

        private System.Threading.SendOrPostCallback AssignUserByEmailOrLoginOperationCompleted;

        private System.Threading.SendOrPostCallback RetrieveOpenForUserOperationCompleted;

        private System.Threading.SendOrPostCallback RetrieveOpenForMeOperationCompleted;

        private System.Threading.SendOrPostCallback RemoveTeamFromTaskOperationCompleted;

        private System.Threading.SendOrPostCallback RetrieveActorEffortsForTaskOperationCompleted;

        private System.Threading.SendOrPostCallback ChangeEffortOperationCompleted;

        private System.Threading.SendOrPostCallback RetrieveRevisionAssignablesForTaskOperationCompleted;

        private System.Threading.SendOrPostCallback AddRevisionAssignableToTaskOperationCompleted;

        private System.Threading.SendOrPostCallback RemoveRevisionAssignableFromTaskOperationCompleted;

        private System.Threading.SendOrPostCallback GetByIDOperationCompleted;

        private System.Threading.SendOrPostCallback CreateOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteOperationCompleted;

        private System.Threading.SendOrPostCallback RetrieveAllOperationCompleted;

        private System.Threading.SendOrPostCallback RetrieveOperationCompleted;

        private System.Threading.SendOrPostCallback GetIDsOperationCompleted;

        private System.Threading.SendOrPostCallback RetrievePageOperationCompleted;

        private System.Threading.SendOrPostCallback RetrieveCountOperationCompleted;

        /// <remarks/>
        public TaskService()
        {
            this.Url = "http://tp.agilexhealth.com/Services/TaskService.asmx";
        }

        /// <remarks/>
        public event RetrieveAllForLastCommentUserCompletedEventHandler RetrieveAllForLastCommentUserCompleted;

        /// <remarks/>
        public event RetrieveAllForProjectCompletedEventHandler RetrieveAllForProjectCompleted;

        /// <remarks/>
        public event RetrieveAllForOwnerCompletedEventHandler RetrieveAllForOwnerCompleted;

        /// <remarks/>
        public event RetrieveAllForEntityStateCompletedEventHandler RetrieveAllForEntityStateCompleted;

        /// <remarks/>
        public event ChangeStateCompletedEventHandler ChangeStateCompleted;

        /// <remarks/>
        public event RetrieveAllForPriorityCompletedEventHandler RetrieveAllForPriorityCompleted;

        /// <remarks/>
        public event GetPrioritiesCompletedEventHandler GetPrioritiesCompleted;

        /// <remarks/>
        public event RetrieveAllForIterationCompletedEventHandler RetrieveAllForIterationCompleted;

        /// <remarks/>
        public event RetrieveAllForReleaseCompletedEventHandler RetrieveAllForReleaseCompleted;

        /// <remarks/>
        public event RetrieveAllForUserStoryCompletedEventHandler RetrieveAllForUserStoryCompleted;

        /// <remarks/>
        public event RetrieveCommentsForTaskCompletedEventHandler RetrieveCommentsForTaskCompleted;

        /// <remarks/>
        public event AddCommentToTaskCompletedEventHandler AddCommentToTaskCompleted;

        /// <remarks/>
        public event RemoveCommentFromTaskCompletedEventHandler RemoveCommentFromTaskCompleted;

        /// <remarks/>
        public event RetrieveAttachmentsForTaskCompletedEventHandler RetrieveAttachmentsForTaskCompleted;

        /// <remarks/>
        public event RemoveAttachmentFromTaskCompletedEventHandler RemoveAttachmentFromTaskCompleted;

        /// <remarks/>
        public event AddAttachmentToTaskCompletedEventHandler AddAttachmentToTaskCompleted;

        /// <remarks/>
        public event RetrieveAttachedRequestsForTaskCompletedEventHandler RetrieveAttachedRequestsForTaskCompleted;

        /// <remarks/>
        public event AddRequestGeneralToTaskCompletedEventHandler AddRequestGeneralToTaskCompleted;

        /// <remarks/>
        public event RemoveRequestGeneralFromTaskCompletedEventHandler RemoveRequestGeneralFromTaskCompleted;

        /// <remarks/>
        public event RetrieveTeamsForTaskCompletedEventHandler RetrieveTeamsForTaskCompleted;

        /// <remarks/>
        public event AddTeamToTaskCompletedEventHandler AddTeamToTaskCompleted;

        /// <remarks/>
        public event AssignUserAsActorCompletedEventHandler AssignUserAsActorCompleted;

        /// <remarks/>
        public event AssignUserCompletedEventHandler AssignUserCompleted;

        /// <remarks/>
        public event AssignUserByEmailOrLoginAsActorCompletedEventHandler AssignUserByEmailOrLoginAsActorCompleted;

        /// <remarks/>
        public event AssignUserByEmailOrLoginCompletedEventHandler AssignUserByEmailOrLoginCompleted;

        /// <remarks/>
        public event RetrieveOpenForUserCompletedEventHandler RetrieveOpenForUserCompleted;

        /// <remarks/>
        public event RetrieveOpenForMeCompletedEventHandler RetrieveOpenForMeCompleted;

        /// <remarks/>
        public event RemoveTeamFromTaskCompletedEventHandler RemoveTeamFromTaskCompleted;

        /// <remarks/>
        public event RetrieveActorEffortsForTaskCompletedEventHandler RetrieveActorEffortsForTaskCompleted;

        /// <remarks/>
        public event ChangeEffortCompletedEventHandler ChangeEffortCompleted;

        /// <remarks/>
        public event RetrieveRevisionAssignablesForTaskCompletedEventHandler RetrieveRevisionAssignablesForTaskCompleted;

        /// <remarks/>
        public event AddRevisionAssignableToTaskCompletedEventHandler AddRevisionAssignableToTaskCompleted;

        /// <remarks/>
        public event RemoveRevisionAssignableFromTaskCompletedEventHandler RemoveRevisionAssignableFromTaskCompleted;

        /// <remarks/>
        public event GetByIDCompletedEventHandler GetByIDCompleted;

        /// <remarks/>
        public event CreateCompletedEventHandler CreateCompleted;

        /// <remarks/>
        public event UpdateCompletedEventHandler UpdateCompleted;

        /// <remarks/>
        public event DeleteCompletedEventHandler DeleteCompleted;

        /// <remarks/>
        public event RetrieveAllCompletedEventHandler RetrieveAllCompleted;

        /// <remarks/>
        public event RetrieveCompletedEventHandler RetrieveCompleted;

        /// <remarks/>
        public event GetIDsCompletedEventHandler GetIDsCompleted;

        /// <remarks/>
        public event RetrievePageCompletedEventHandler RetrievePageCompleted;

        /// <remarks/>
        public event RetrieveCountCompletedEventHandler RetrieveCountCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveAllForLastCommentUser", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskDTO[] RetrieveAllForLastCommentUser(int lastCommentUserID)
        {
            object[] results = this.Invoke("RetrieveAllForLastCommentUser", new object[] {
                    lastCommentUserID});
            return ((TaskDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieveAllForLastCommentUser(int lastCommentUserID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrieveAllForLastCommentUser", new object[] {
                    lastCommentUserID}, callback, asyncState);
        }

        /// <remarks/>
        public TaskDTO[] EndRetrieveAllForLastCommentUser(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((TaskDTO[])(results[0]));
        }

        /// <remarks/>
        public void RetrieveAllForLastCommentUserAsync(int lastCommentUserID)
        {
            this.RetrieveAllForLastCommentUserAsync(lastCommentUserID, null);
        }

        /// <remarks/>
        public void RetrieveAllForLastCommentUserAsync(int lastCommentUserID, object userState)
        {
            if ((this.RetrieveAllForLastCommentUserOperationCompleted == null))
            {
                this.RetrieveAllForLastCommentUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAllForLastCommentUserOperationCompleted);
            }
            this.InvokeAsync("RetrieveAllForLastCommentUser", new object[] {
                    lastCommentUserID}, this.RetrieveAllForLastCommentUserOperationCompleted, userState);
        }

        private void OnRetrieveAllForLastCommentUserOperationCompleted(object arg)
        {
            if ((this.RetrieveAllForLastCommentUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAllForLastCommentUserCompleted(this, new RetrieveAllForLastCommentUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveAllForProject", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskDTO[] RetrieveAllForProject(int projectID)
        {
            object[] results = this.Invoke("RetrieveAllForProject", new object[] {
                    projectID});
            return ((TaskDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieveAllForProject(int projectID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrieveAllForProject", new object[] {
                    projectID}, callback, asyncState);
        }

        /// <remarks/>
        public TaskDTO[] EndRetrieveAllForProject(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((TaskDTO[])(results[0]));
        }

        /// <remarks/>
        public void RetrieveAllForProjectAsync(int projectID)
        {
            this.RetrieveAllForProjectAsync(projectID, null);
        }

        /// <remarks/>
        public void RetrieveAllForProjectAsync(int projectID, object userState)
        {
            if ((this.RetrieveAllForProjectOperationCompleted == null))
            {
                this.RetrieveAllForProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAllForProjectOperationCompleted);
            }
            this.InvokeAsync("RetrieveAllForProject", new object[] {
                    projectID}, this.RetrieveAllForProjectOperationCompleted, userState);
        }

        private void OnRetrieveAllForProjectOperationCompleted(object arg)
        {
            if ((this.RetrieveAllForProjectCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAllForProjectCompleted(this, new RetrieveAllForProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveAllForOwner", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskDTO[] RetrieveAllForOwner(int ownerID)
        {
            object[] results = this.Invoke("RetrieveAllForOwner", new object[] {
                    ownerID});
            return ((TaskDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieveAllForOwner(int ownerID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrieveAllForOwner", new object[] {
                    ownerID}, callback, asyncState);
        }

        /// <remarks/>
        public TaskDTO[] EndRetrieveAllForOwner(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((TaskDTO[])(results[0]));
        }

        /// <remarks/>
        public void RetrieveAllForOwnerAsync(int ownerID)
        {
            this.RetrieveAllForOwnerAsync(ownerID, null);
        }

        /// <remarks/>
        public void RetrieveAllForOwnerAsync(int ownerID, object userState)
        {
            if ((this.RetrieveAllForOwnerOperationCompleted == null))
            {
                this.RetrieveAllForOwnerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAllForOwnerOperationCompleted);
            }
            this.InvokeAsync("RetrieveAllForOwner", new object[] {
                    ownerID}, this.RetrieveAllForOwnerOperationCompleted, userState);
        }

        private void OnRetrieveAllForOwnerOperationCompleted(object arg)
        {
            if ((this.RetrieveAllForOwnerCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAllForOwnerCompleted(this, new RetrieveAllForOwnerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveAllForEntityState", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskDTO[] RetrieveAllForEntityState(int entityStateID)
        {
            object[] results = this.Invoke("RetrieveAllForEntityState", new object[] {
                    entityStateID});
            return ((TaskDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieveAllForEntityState(int entityStateID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrieveAllForEntityState", new object[] {
                    entityStateID}, callback, asyncState);
        }

        /// <remarks/>
        public TaskDTO[] EndRetrieveAllForEntityState(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((TaskDTO[])(results[0]));
        }

        /// <remarks/>
        public void RetrieveAllForEntityStateAsync(int entityStateID)
        {
            this.RetrieveAllForEntityStateAsync(entityStateID, null);
        }

        /// <remarks/>
        public void RetrieveAllForEntityStateAsync(int entityStateID, object userState)
        {
            if ((this.RetrieveAllForEntityStateOperationCompleted == null))
            {
                this.RetrieveAllForEntityStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAllForEntityStateOperationCompleted);
            }
            this.InvokeAsync("RetrieveAllForEntityState", new object[] {
                    entityStateID}, this.RetrieveAllForEntityStateOperationCompleted, userState);
        }

        private void OnRetrieveAllForEntityStateOperationCompleted(object arg)
        {
            if ((this.RetrieveAllForEntityStateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAllForEntityStateCompleted(this, new RetrieveAllForEntityStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/ChangeState", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ChangeState(int taskID, int entityStateID)
        {
            this.Invoke("ChangeState", new object[] {
                    taskID,
                    entityStateID});
        }

        /// <remarks/>
        public System.IAsyncResult BeginChangeState(int taskID, int entityStateID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ChangeState", new object[] {
                    taskID,
                    entityStateID}, callback, asyncState);
        }

        /// <remarks/>
        public void EndChangeState(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void ChangeStateAsync(int taskID, int entityStateID)
        {
            this.ChangeStateAsync(taskID, entityStateID, null);
        }

        /// <remarks/>
        public void ChangeStateAsync(int taskID, int entityStateID, object userState)
        {
            if ((this.ChangeStateOperationCompleted == null))
            {
                this.ChangeStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeStateOperationCompleted);
            }
            this.InvokeAsync("ChangeState", new object[] {
                    taskID,
                    entityStateID}, this.ChangeStateOperationCompleted, userState);
        }

        private void OnChangeStateOperationCompleted(object arg)
        {
            if ((this.ChangeStateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeStateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveAllForPriority", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskDTO[] RetrieveAllForPriority(int priorityID)
        {
            object[] results = this.Invoke("RetrieveAllForPriority", new object[] {
                    priorityID});
            return ((TaskDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieveAllForPriority(int priorityID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrieveAllForPriority", new object[] {
                    priorityID}, callback, asyncState);
        }

        /// <remarks/>
        public TaskDTO[] EndRetrieveAllForPriority(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((TaskDTO[])(results[0]));
        }

        /// <remarks/>
        public void RetrieveAllForPriorityAsync(int priorityID)
        {
            this.RetrieveAllForPriorityAsync(priorityID, null);
        }

        /// <remarks/>
        public void RetrieveAllForPriorityAsync(int priorityID, object userState)
        {
            if ((this.RetrieveAllForPriorityOperationCompleted == null))
            {
                this.RetrieveAllForPriorityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAllForPriorityOperationCompleted);
            }
            this.InvokeAsync("RetrieveAllForPriority", new object[] {
                    priorityID}, this.RetrieveAllForPriorityOperationCompleted, userState);
        }

        private void OnRetrieveAllForPriorityOperationCompleted(object arg)
        {
            if ((this.RetrieveAllForPriorityCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAllForPriorityCompleted(this, new RetrieveAllForPriorityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/GetPriorities", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PriorityDTO[] GetPriorities()
        {
            object[] results = this.Invoke("GetPriorities", new object[0]);
            return ((PriorityDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetPriorities(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetPriorities", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public PriorityDTO[] EndGetPriorities(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((PriorityDTO[])(results[0]));
        }

        /// <remarks/>
        public void GetPrioritiesAsync()
        {
            this.GetPrioritiesAsync(null);
        }

        /// <remarks/>
        public void GetPrioritiesAsync(object userState)
        {
            if ((this.GetPrioritiesOperationCompleted == null))
            {
                this.GetPrioritiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPrioritiesOperationCompleted);
            }
            this.InvokeAsync("GetPriorities", new object[0], this.GetPrioritiesOperationCompleted, userState);
        }

        private void OnGetPrioritiesOperationCompleted(object arg)
        {
            if ((this.GetPrioritiesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPrioritiesCompleted(this, new GetPrioritiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveAllForIteration", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskDTO[] RetrieveAllForIteration(int iterationID)
        {
            object[] results = this.Invoke("RetrieveAllForIteration", new object[] {
                    iterationID});
            return ((TaskDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieveAllForIteration(int iterationID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrieveAllForIteration", new object[] {
                    iterationID}, callback, asyncState);
        }

        /// <remarks/>
        public TaskDTO[] EndRetrieveAllForIteration(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((TaskDTO[])(results[0]));
        }

        /// <remarks/>
        public void RetrieveAllForIterationAsync(int iterationID)
        {
            this.RetrieveAllForIterationAsync(iterationID, null);
        }

        /// <remarks/>
        public void RetrieveAllForIterationAsync(int iterationID, object userState)
        {
            if ((this.RetrieveAllForIterationOperationCompleted == null))
            {
                this.RetrieveAllForIterationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAllForIterationOperationCompleted);
            }
            this.InvokeAsync("RetrieveAllForIteration", new object[] {
                    iterationID}, this.RetrieveAllForIterationOperationCompleted, userState);
        }

        private void OnRetrieveAllForIterationOperationCompleted(object arg)
        {
            if ((this.RetrieveAllForIterationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAllForIterationCompleted(this, new RetrieveAllForIterationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveAllForRelease", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskDTO[] RetrieveAllForRelease(int releaseID)
        {
            object[] results = this.Invoke("RetrieveAllForRelease", new object[] {
                    releaseID});
            return ((TaskDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieveAllForRelease(int releaseID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrieveAllForRelease", new object[] {
                    releaseID}, callback, asyncState);
        }

        /// <remarks/>
        public TaskDTO[] EndRetrieveAllForRelease(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((TaskDTO[])(results[0]));
        }

        /// <remarks/>
        public void RetrieveAllForReleaseAsync(int releaseID)
        {
            this.RetrieveAllForReleaseAsync(releaseID, null);
        }

        /// <remarks/>
        public void RetrieveAllForReleaseAsync(int releaseID, object userState)
        {
            if ((this.RetrieveAllForReleaseOperationCompleted == null))
            {
                this.RetrieveAllForReleaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAllForReleaseOperationCompleted);
            }
            this.InvokeAsync("RetrieveAllForRelease", new object[] {
                    releaseID}, this.RetrieveAllForReleaseOperationCompleted, userState);
        }

        private void OnRetrieveAllForReleaseOperationCompleted(object arg)
        {
            if ((this.RetrieveAllForReleaseCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAllForReleaseCompleted(this, new RetrieveAllForReleaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveAllForUserStory", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskDTO[] RetrieveAllForUserStory(int userStoryID)
        {
            object[] results = this.Invoke("RetrieveAllForUserStory", new object[] {
                    userStoryID});
            return ((TaskDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieveAllForUserStory(int userStoryID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrieveAllForUserStory", new object[] {
                    userStoryID}, callback, asyncState);
        }

        /// <remarks/>
        public TaskDTO[] EndRetrieveAllForUserStory(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((TaskDTO[])(results[0]));
        }

        /// <remarks/>
        public void RetrieveAllForUserStoryAsync(int userStoryID)
        {
            this.RetrieveAllForUserStoryAsync(userStoryID, null);
        }

        /// <remarks/>
        public void RetrieveAllForUserStoryAsync(int userStoryID, object userState)
        {
            if ((this.RetrieveAllForUserStoryOperationCompleted == null))
            {
                this.RetrieveAllForUserStoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAllForUserStoryOperationCompleted);
            }
            this.InvokeAsync("RetrieveAllForUserStory", new object[] {
                    userStoryID}, this.RetrieveAllForUserStoryOperationCompleted, userState);
        }

        private void OnRetrieveAllForUserStoryOperationCompleted(object arg)
        {
            if ((this.RetrieveAllForUserStoryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAllForUserStoryCompleted(this, new RetrieveAllForUserStoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveCommentsForTask", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CommentDTO[] RetrieveCommentsForTask(int taskID)
        {
            object[] results = this.Invoke("RetrieveCommentsForTask", new object[] {
                    taskID});
            return ((CommentDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieveCommentsForTask(int taskID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrieveCommentsForTask", new object[] {
                    taskID}, callback, asyncState);
        }

        /// <remarks/>
        public CommentDTO[] EndRetrieveCommentsForTask(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((CommentDTO[])(results[0]));
        }

        /// <remarks/>
        public void RetrieveCommentsForTaskAsync(int taskID)
        {
            this.RetrieveCommentsForTaskAsync(taskID, null);
        }

        /// <remarks/>
        public void RetrieveCommentsForTaskAsync(int taskID, object userState)
        {
            if ((this.RetrieveCommentsForTaskOperationCompleted == null))
            {
                this.RetrieveCommentsForTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveCommentsForTaskOperationCompleted);
            }
            this.InvokeAsync("RetrieveCommentsForTask", new object[] {
                    taskID}, this.RetrieveCommentsForTaskOperationCompleted, userState);
        }

        private void OnRetrieveCommentsForTaskOperationCompleted(object arg)
        {
            if ((this.RetrieveCommentsForTaskCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveCommentsForTaskCompleted(this, new RetrieveCommentsForTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/AddCommentToTask", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddCommentToTask(int taskID, CommentDTO comment)
        {
            object[] results = this.Invoke("AddCommentToTask", new object[] {
                    taskID,
                    comment});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddCommentToTask(int taskID, CommentDTO comment, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddCommentToTask", new object[] {
                    taskID,
                    comment}, callback, asyncState);
        }

        /// <remarks/>
        public int EndAddCommentToTask(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void AddCommentToTaskAsync(int taskID, CommentDTO comment)
        {
            this.AddCommentToTaskAsync(taskID, comment, null);
        }

        /// <remarks/>
        public void AddCommentToTaskAsync(int taskID, CommentDTO comment, object userState)
        {
            if ((this.AddCommentToTaskOperationCompleted == null))
            {
                this.AddCommentToTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCommentToTaskOperationCompleted);
            }
            this.InvokeAsync("AddCommentToTask", new object[] {
                    taskID,
                    comment}, this.AddCommentToTaskOperationCompleted, userState);
        }

        private void OnAddCommentToTaskOperationCompleted(object arg)
        {
            if ((this.AddCommentToTaskCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCommentToTaskCompleted(this, new AddCommentToTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RemoveCommentFromTask", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveCommentFromTask(int taskID, int commentID)
        {
            this.Invoke("RemoveCommentFromTask", new object[] {
                    taskID,
                    commentID});
        }

        /// <remarks/>
        public System.IAsyncResult BeginRemoveCommentFromTask(int taskID, int commentID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RemoveCommentFromTask", new object[] {
                    taskID,
                    commentID}, callback, asyncState);
        }

        /// <remarks/>
        public void EndRemoveCommentFromTask(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void RemoveCommentFromTaskAsync(int taskID, int commentID)
        {
            this.RemoveCommentFromTaskAsync(taskID, commentID, null);
        }

        /// <remarks/>
        public void RemoveCommentFromTaskAsync(int taskID, int commentID, object userState)
        {
            if ((this.RemoveCommentFromTaskOperationCompleted == null))
            {
                this.RemoveCommentFromTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveCommentFromTaskOperationCompleted);
            }
            this.InvokeAsync("RemoveCommentFromTask", new object[] {
                    taskID,
                    commentID}, this.RemoveCommentFromTaskOperationCompleted, userState);
        }

        private void OnRemoveCommentFromTaskOperationCompleted(object arg)
        {
            if ((this.RemoveCommentFromTaskCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveCommentFromTaskCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveAttachmentsForTask", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AttachmentDTO[] RetrieveAttachmentsForTask(int taskID)
        {
            object[] results = this.Invoke("RetrieveAttachmentsForTask", new object[] {
                    taskID});
            return ((AttachmentDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieveAttachmentsForTask(int taskID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrieveAttachmentsForTask", new object[] {
                    taskID}, callback, asyncState);
        }

        /// <remarks/>
        public AttachmentDTO[] EndRetrieveAttachmentsForTask(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((AttachmentDTO[])(results[0]));
        }

        /// <remarks/>
        public void RetrieveAttachmentsForTaskAsync(int taskID)
        {
            this.RetrieveAttachmentsForTaskAsync(taskID, null);
        }

        /// <remarks/>
        public void RetrieveAttachmentsForTaskAsync(int taskID, object userState)
        {
            if ((this.RetrieveAttachmentsForTaskOperationCompleted == null))
            {
                this.RetrieveAttachmentsForTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAttachmentsForTaskOperationCompleted);
            }
            this.InvokeAsync("RetrieveAttachmentsForTask", new object[] {
                    taskID}, this.RetrieveAttachmentsForTaskOperationCompleted, userState);
        }

        private void OnRetrieveAttachmentsForTaskOperationCompleted(object arg)
        {
            if ((this.RetrieveAttachmentsForTaskCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAttachmentsForTaskCompleted(this, new RetrieveAttachmentsForTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RemoveAttachmentFromTask", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveAttachmentFromTask(int taskID, int attachmentID)
        {
            this.Invoke("RemoveAttachmentFromTask", new object[] {
                    taskID,
                    attachmentID});
        }

        /// <remarks/>
        public System.IAsyncResult BeginRemoveAttachmentFromTask(int taskID, int attachmentID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RemoveAttachmentFromTask", new object[] {
                    taskID,
                    attachmentID}, callback, asyncState);
        }

        /// <remarks/>
        public void EndRemoveAttachmentFromTask(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void RemoveAttachmentFromTaskAsync(int taskID, int attachmentID)
        {
            this.RemoveAttachmentFromTaskAsync(taskID, attachmentID, null);
        }

        /// <remarks/>
        public void RemoveAttachmentFromTaskAsync(int taskID, int attachmentID, object userState)
        {
            if ((this.RemoveAttachmentFromTaskOperationCompleted == null))
            {
                this.RemoveAttachmentFromTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveAttachmentFromTaskOperationCompleted);
            }
            this.InvokeAsync("RemoveAttachmentFromTask", new object[] {
                    taskID,
                    attachmentID}, this.RemoveAttachmentFromTaskOperationCompleted, userState);
        }

        private void OnRemoveAttachmentFromTaskOperationCompleted(object arg)
        {
            if ((this.RemoveAttachmentFromTaskCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveAttachmentFromTaskCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/AddAttachmentToTask", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddAttachmentToTask(int taskID, string fileName, string description)
        {
            object[] results = this.Invoke("AddAttachmentToTask", new object[] {
                    taskID,
                    fileName,
                    description});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddAttachmentToTask(int taskID, string fileName, string description, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddAttachmentToTask", new object[] {
                    taskID,
                    fileName,
                    description}, callback, asyncState);
        }

        /// <remarks/>
        public int EndAddAttachmentToTask(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void AddAttachmentToTaskAsync(int taskID, string fileName, string description)
        {
            this.AddAttachmentToTaskAsync(taskID, fileName, description, null);
        }

        /// <remarks/>
        public void AddAttachmentToTaskAsync(int taskID, string fileName, string description, object userState)
        {
            if ((this.AddAttachmentToTaskOperationCompleted == null))
            {
                this.AddAttachmentToTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAttachmentToTaskOperationCompleted);
            }
            this.InvokeAsync("AddAttachmentToTask", new object[] {
                    taskID,
                    fileName,
                    description}, this.AddAttachmentToTaskOperationCompleted, userState);
        }

        private void OnAddAttachmentToTaskOperationCompleted(object arg)
        {
            if ((this.AddAttachmentToTaskCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAttachmentToTaskCompleted(this, new AddAttachmentToTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveAttachedRequestsForTask", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RequestGeneralDTO[] RetrieveAttachedRequestsForTask(int taskID)
        {
            object[] results = this.Invoke("RetrieveAttachedRequestsForTask", new object[] {
                    taskID});
            return ((RequestGeneralDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieveAttachedRequestsForTask(int taskID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrieveAttachedRequestsForTask", new object[] {
                    taskID}, callback, asyncState);
        }

        /// <remarks/>
        public RequestGeneralDTO[] EndRetrieveAttachedRequestsForTask(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((RequestGeneralDTO[])(results[0]));
        }

        /// <remarks/>
        public void RetrieveAttachedRequestsForTaskAsync(int taskID)
        {
            this.RetrieveAttachedRequestsForTaskAsync(taskID, null);
        }

        /// <remarks/>
        public void RetrieveAttachedRequestsForTaskAsync(int taskID, object userState)
        {
            if ((this.RetrieveAttachedRequestsForTaskOperationCompleted == null))
            {
                this.RetrieveAttachedRequestsForTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAttachedRequestsForTaskOperationCompleted);
            }
            this.InvokeAsync("RetrieveAttachedRequestsForTask", new object[] {
                    taskID}, this.RetrieveAttachedRequestsForTaskOperationCompleted, userState);
        }

        private void OnRetrieveAttachedRequestsForTaskOperationCompleted(object arg)
        {
            if ((this.RetrieveAttachedRequestsForTaskCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAttachedRequestsForTaskCompleted(this, new RetrieveAttachedRequestsForTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/AddRequestGeneralToTask", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddRequestGeneralToTask(int taskID, RequestGeneralDTO requestGeneral)
        {
            object[] results = this.Invoke("AddRequestGeneralToTask", new object[] {
                    taskID,
                    requestGeneral});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddRequestGeneralToTask(int taskID, RequestGeneralDTO requestGeneral, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddRequestGeneralToTask", new object[] {
                    taskID,
                    requestGeneral}, callback, asyncState);
        }

        /// <remarks/>
        public int EndAddRequestGeneralToTask(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void AddRequestGeneralToTaskAsync(int taskID, RequestGeneralDTO requestGeneral)
        {
            this.AddRequestGeneralToTaskAsync(taskID, requestGeneral, null);
        }

        /// <remarks/>
        public void AddRequestGeneralToTaskAsync(int taskID, RequestGeneralDTO requestGeneral, object userState)
        {
            if ((this.AddRequestGeneralToTaskOperationCompleted == null))
            {
                this.AddRequestGeneralToTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRequestGeneralToTaskOperationCompleted);
            }
            this.InvokeAsync("AddRequestGeneralToTask", new object[] {
                    taskID,
                    requestGeneral}, this.AddRequestGeneralToTaskOperationCompleted, userState);
        }

        private void OnAddRequestGeneralToTaskOperationCompleted(object arg)
        {
            if ((this.AddRequestGeneralToTaskCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRequestGeneralToTaskCompleted(this, new AddRequestGeneralToTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RemoveRequestGeneralFromTask", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveRequestGeneralFromTask(int taskID, int requestGeneralID)
        {
            this.Invoke("RemoveRequestGeneralFromTask", new object[] {
                    taskID,
                    requestGeneralID});
        }

        /// <remarks/>
        public System.IAsyncResult BeginRemoveRequestGeneralFromTask(int taskID, int requestGeneralID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RemoveRequestGeneralFromTask", new object[] {
                    taskID,
                    requestGeneralID}, callback, asyncState);
        }

        /// <remarks/>
        public void EndRemoveRequestGeneralFromTask(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void RemoveRequestGeneralFromTaskAsync(int taskID, int requestGeneralID)
        {
            this.RemoveRequestGeneralFromTaskAsync(taskID, requestGeneralID, null);
        }

        /// <remarks/>
        public void RemoveRequestGeneralFromTaskAsync(int taskID, int requestGeneralID, object userState)
        {
            if ((this.RemoveRequestGeneralFromTaskOperationCompleted == null))
            {
                this.RemoveRequestGeneralFromTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveRequestGeneralFromTaskOperationCompleted);
            }
            this.InvokeAsync("RemoveRequestGeneralFromTask", new object[] {
                    taskID,
                    requestGeneralID}, this.RemoveRequestGeneralFromTaskOperationCompleted, userState);
        }

        private void OnRemoveRequestGeneralFromTaskOperationCompleted(object arg)
        {
            if ((this.RemoveRequestGeneralFromTaskCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveRequestGeneralFromTaskCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveTeamsForTask", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TeamDTO[] RetrieveTeamsForTask(int taskID)
        {
            object[] results = this.Invoke("RetrieveTeamsForTask", new object[] {
                    taskID});
            return ((TeamDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieveTeamsForTask(int taskID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrieveTeamsForTask", new object[] {
                    taskID}, callback, asyncState);
        }

        /// <remarks/>
        public TeamDTO[] EndRetrieveTeamsForTask(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((TeamDTO[])(results[0]));
        }

        /// <remarks/>
        public void RetrieveTeamsForTaskAsync(int taskID)
        {
            this.RetrieveTeamsForTaskAsync(taskID, null);
        }

        /// <remarks/>
        public void RetrieveTeamsForTaskAsync(int taskID, object userState)
        {
            if ((this.RetrieveTeamsForTaskOperationCompleted == null))
            {
                this.RetrieveTeamsForTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveTeamsForTaskOperationCompleted);
            }
            this.InvokeAsync("RetrieveTeamsForTask", new object[] {
                    taskID}, this.RetrieveTeamsForTaskOperationCompleted, userState);
        }

        private void OnRetrieveTeamsForTaskOperationCompleted(object arg)
        {
            if ((this.RetrieveTeamsForTaskCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveTeamsForTaskCompleted(this, new RetrieveTeamsForTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/AddTeamToTask", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddTeamToTask(int taskID, TeamDTO team)
        {
            object[] results = this.Invoke("AddTeamToTask", new object[] {
                    taskID,
                    team});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddTeamToTask(int taskID, TeamDTO team, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddTeamToTask", new object[] {
                    taskID,
                    team}, callback, asyncState);
        }

        /// <remarks/>
        public int EndAddTeamToTask(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void AddTeamToTaskAsync(int taskID, TeamDTO team)
        {
            this.AddTeamToTaskAsync(taskID, team, null);
        }

        /// <remarks/>
        public void AddTeamToTaskAsync(int taskID, TeamDTO team, object userState)
        {
            if ((this.AddTeamToTaskOperationCompleted == null))
            {
                this.AddTeamToTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddTeamToTaskOperationCompleted);
            }
            this.InvokeAsync("AddTeamToTask", new object[] {
                    taskID,
                    team}, this.AddTeamToTaskOperationCompleted, userState);
        }

        private void OnAddTeamToTaskOperationCompleted(object arg)
        {
            if ((this.AddTeamToTaskCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddTeamToTaskCompleted(this, new AddTeamToTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/AssignUserAsActor", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AssignUserAsActor(int taskID, int actorID, int userID)
        {
            this.Invoke("AssignUserAsActor", new object[] {
                    taskID,
                    actorID,
                    userID});
        }

        /// <remarks/>
        public System.IAsyncResult BeginAssignUserAsActor(int taskID, int actorID, int userID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AssignUserAsActor", new object[] {
                    taskID,
                    actorID,
                    userID}, callback, asyncState);
        }

        /// <remarks/>
        public void EndAssignUserAsActor(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void AssignUserAsActorAsync(int taskID, int actorID, int userID)
        {
            this.AssignUserAsActorAsync(taskID, actorID, userID, null);
        }

        /// <remarks/>
        public void AssignUserAsActorAsync(int taskID, int actorID, int userID, object userState)
        {
            if ((this.AssignUserAsActorOperationCompleted == null))
            {
                this.AssignUserAsActorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAssignUserAsActorOperationCompleted);
            }
            this.InvokeAsync("AssignUserAsActor", new object[] {
                    taskID,
                    actorID,
                    userID}, this.AssignUserAsActorOperationCompleted, userState);
        }

        private void OnAssignUserAsActorOperationCompleted(object arg)
        {
            if ((this.AssignUserAsActorCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AssignUserAsActorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/AssignUser", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AssignUser(int taskID, int userID)
        {
            this.Invoke("AssignUser", new object[] {
                    taskID,
                    userID});
        }

        /// <remarks/>
        public System.IAsyncResult BeginAssignUser(int taskID, int userID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AssignUser", new object[] {
                    taskID,
                    userID}, callback, asyncState);
        }

        /// <remarks/>
        public void EndAssignUser(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void AssignUserAsync(int taskID, int userID)
        {
            this.AssignUserAsync(taskID, userID, null);
        }

        /// <remarks/>
        public void AssignUserAsync(int taskID, int userID, object userState)
        {
            if ((this.AssignUserOperationCompleted == null))
            {
                this.AssignUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAssignUserOperationCompleted);
            }
            this.InvokeAsync("AssignUser", new object[] {
                    taskID,
                    userID}, this.AssignUserOperationCompleted, userState);
        }

        private void OnAssignUserOperationCompleted(object arg)
        {
            if ((this.AssignUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AssignUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/AssignUserByEmailOrLoginAsActor", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AssignUserByEmailOrLoginAsActor(int taskID, string userEmailOrLogin, string actorName)
        {
            this.Invoke("AssignUserByEmailOrLoginAsActor", new object[] {
                    taskID,
                    userEmailOrLogin,
                    actorName});
        }

        /// <remarks/>
        public System.IAsyncResult BeginAssignUserByEmailOrLoginAsActor(int taskID, string userEmailOrLogin, string actorName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AssignUserByEmailOrLoginAsActor", new object[] {
                    taskID,
                    userEmailOrLogin,
                    actorName}, callback, asyncState);
        }

        /// <remarks/>
        public void EndAssignUserByEmailOrLoginAsActor(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void AssignUserByEmailOrLoginAsActorAsync(int taskID, string userEmailOrLogin, string actorName)
        {
            this.AssignUserByEmailOrLoginAsActorAsync(taskID, userEmailOrLogin, actorName, null);
        }

        /// <remarks/>
        public void AssignUserByEmailOrLoginAsActorAsync(int taskID, string userEmailOrLogin, string actorName, object userState)
        {
            if ((this.AssignUserByEmailOrLoginAsActorOperationCompleted == null))
            {
                this.AssignUserByEmailOrLoginAsActorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAssignUserByEmailOrLoginAsActorOperationCompleted);
            }
            this.InvokeAsync("AssignUserByEmailOrLoginAsActor", new object[] {
                    taskID,
                    userEmailOrLogin,
                    actorName}, this.AssignUserByEmailOrLoginAsActorOperationCompleted, userState);
        }

        private void OnAssignUserByEmailOrLoginAsActorOperationCompleted(object arg)
        {
            if ((this.AssignUserByEmailOrLoginAsActorCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AssignUserByEmailOrLoginAsActorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/AssignUserByEmailOrLogin", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AssignUserByEmailOrLogin(int taskID, string userEmailOrLogin)
        {
            this.Invoke("AssignUserByEmailOrLogin", new object[] {
                    taskID,
                    userEmailOrLogin});
        }

        /// <remarks/>
        public System.IAsyncResult BeginAssignUserByEmailOrLogin(int taskID, string userEmailOrLogin, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AssignUserByEmailOrLogin", new object[] {
                    taskID,
                    userEmailOrLogin}, callback, asyncState);
        }

        /// <remarks/>
        public void EndAssignUserByEmailOrLogin(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void AssignUserByEmailOrLoginAsync(int taskID, string userEmailOrLogin)
        {
            this.AssignUserByEmailOrLoginAsync(taskID, userEmailOrLogin, null);
        }

        /// <remarks/>
        public void AssignUserByEmailOrLoginAsync(int taskID, string userEmailOrLogin, object userState)
        {
            if ((this.AssignUserByEmailOrLoginOperationCompleted == null))
            {
                this.AssignUserByEmailOrLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAssignUserByEmailOrLoginOperationCompleted);
            }
            this.InvokeAsync("AssignUserByEmailOrLogin", new object[] {
                    taskID,
                    userEmailOrLogin}, this.AssignUserByEmailOrLoginOperationCompleted, userState);
        }

        private void OnAssignUserByEmailOrLoginOperationCompleted(object arg)
        {
            if ((this.AssignUserByEmailOrLoginCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AssignUserByEmailOrLoginCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveOpenForUser", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskDTO[] RetrieveOpenForUser(int userID)
        {
            object[] results = this.Invoke("RetrieveOpenForUser", new object[] {
                    userID});
            return ((TaskDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieveOpenForUser(int userID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrieveOpenForUser", new object[] {
                    userID}, callback, asyncState);
        }

        /// <remarks/>
        public TaskDTO[] EndRetrieveOpenForUser(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((TaskDTO[])(results[0]));
        }

        /// <remarks/>
        public void RetrieveOpenForUserAsync(int userID)
        {
            this.RetrieveOpenForUserAsync(userID, null);
        }

        /// <remarks/>
        public void RetrieveOpenForUserAsync(int userID, object userState)
        {
            if ((this.RetrieveOpenForUserOperationCompleted == null))
            {
                this.RetrieveOpenForUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveOpenForUserOperationCompleted);
            }
            this.InvokeAsync("RetrieveOpenForUser", new object[] {
                    userID}, this.RetrieveOpenForUserOperationCompleted, userState);
        }

        private void OnRetrieveOpenForUserOperationCompleted(object arg)
        {
            if ((this.RetrieveOpenForUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveOpenForUserCompleted(this, new RetrieveOpenForUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveOpenForMe", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskDTO[] RetrieveOpenForMe()
        {
            object[] results = this.Invoke("RetrieveOpenForMe", new object[0]);
            return ((TaskDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieveOpenForMe(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrieveOpenForMe", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public TaskDTO[] EndRetrieveOpenForMe(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((TaskDTO[])(results[0]));
        }

        /// <remarks/>
        public void RetrieveOpenForMeAsync()
        {
            this.RetrieveOpenForMeAsync(null);
        }

        /// <remarks/>
        public void RetrieveOpenForMeAsync(object userState)
        {
            if ((this.RetrieveOpenForMeOperationCompleted == null))
            {
                this.RetrieveOpenForMeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveOpenForMeOperationCompleted);
            }
            this.InvokeAsync("RetrieveOpenForMe", new object[0], this.RetrieveOpenForMeOperationCompleted, userState);
        }

        private void OnRetrieveOpenForMeOperationCompleted(object arg)
        {
            if ((this.RetrieveOpenForMeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveOpenForMeCompleted(this, new RetrieveOpenForMeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RemoveTeamFromTask", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveTeamFromTask(int taskID, int teamID)
        {
            this.Invoke("RemoveTeamFromTask", new object[] {
                    taskID,
                    teamID});
        }

        /// <remarks/>
        public System.IAsyncResult BeginRemoveTeamFromTask(int taskID, int teamID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RemoveTeamFromTask", new object[] {
                    taskID,
                    teamID}, callback, asyncState);
        }

        /// <remarks/>
        public void EndRemoveTeamFromTask(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void RemoveTeamFromTaskAsync(int taskID, int teamID)
        {
            this.RemoveTeamFromTaskAsync(taskID, teamID, null);
        }

        /// <remarks/>
        public void RemoveTeamFromTaskAsync(int taskID, int teamID, object userState)
        {
            if ((this.RemoveTeamFromTaskOperationCompleted == null))
            {
                this.RemoveTeamFromTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveTeamFromTaskOperationCompleted);
            }
            this.InvokeAsync("RemoveTeamFromTask", new object[] {
                    taskID,
                    teamID}, this.RemoveTeamFromTaskOperationCompleted, userState);
        }

        private void OnRemoveTeamFromTaskOperationCompleted(object arg)
        {
            if ((this.RemoveTeamFromTaskCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveTeamFromTaskCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveActorEffortsForTask", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ActorEffortDTO[] RetrieveActorEffortsForTask(int taskID)
        {
            object[] results = this.Invoke("RetrieveActorEffortsForTask", new object[] {
                    taskID});
            return ((ActorEffortDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieveActorEffortsForTask(int taskID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrieveActorEffortsForTask", new object[] {
                    taskID}, callback, asyncState);
        }

        /// <remarks/>
        public ActorEffortDTO[] EndRetrieveActorEffortsForTask(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ActorEffortDTO[])(results[0]));
        }

        /// <remarks/>
        public void RetrieveActorEffortsForTaskAsync(int taskID)
        {
            this.RetrieveActorEffortsForTaskAsync(taskID, null);
        }

        /// <remarks/>
        public void RetrieveActorEffortsForTaskAsync(int taskID, object userState)
        {
            if ((this.RetrieveActorEffortsForTaskOperationCompleted == null))
            {
                this.RetrieveActorEffortsForTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveActorEffortsForTaskOperationCompleted);
            }
            this.InvokeAsync("RetrieveActorEffortsForTask", new object[] {
                    taskID}, this.RetrieveActorEffortsForTaskOperationCompleted, userState);
        }

        private void OnRetrieveActorEffortsForTaskOperationCompleted(object arg)
        {
            if ((this.RetrieveActorEffortsForTaskCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveActorEffortsForTaskCompleted(this, new RetrieveActorEffortsForTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/ChangeEffort", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ChangeEffort(int taskID, int actorID, decimal effort)
        {
            this.Invoke("ChangeEffort", new object[] {
                    taskID,
                    actorID,
                    effort});
        }

        /// <remarks/>
        public System.IAsyncResult BeginChangeEffort(int taskID, int actorID, decimal effort, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ChangeEffort", new object[] {
                    taskID,
                    actorID,
                    effort}, callback, asyncState);
        }

        /// <remarks/>
        public void EndChangeEffort(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void ChangeEffortAsync(int taskID, int actorID, decimal effort)
        {
            this.ChangeEffortAsync(taskID, actorID, effort, null);
        }

        /// <remarks/>
        public void ChangeEffortAsync(int taskID, int actorID, decimal effort, object userState)
        {
            if ((this.ChangeEffortOperationCompleted == null))
            {
                this.ChangeEffortOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeEffortOperationCompleted);
            }
            this.InvokeAsync("ChangeEffort", new object[] {
                    taskID,
                    actorID,
                    effort}, this.ChangeEffortOperationCompleted, userState);
        }

        private void OnChangeEffortOperationCompleted(object arg)
        {
            if ((this.ChangeEffortCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeEffortCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveRevisionAssignablesForTask", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RevisionAssignableDTO[] RetrieveRevisionAssignablesForTask(int taskID)
        {
            object[] results = this.Invoke("RetrieveRevisionAssignablesForTask", new object[] {
                    taskID});
            return ((RevisionAssignableDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieveRevisionAssignablesForTask(int taskID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrieveRevisionAssignablesForTask", new object[] {
                    taskID}, callback, asyncState);
        }

        /// <remarks/>
        public RevisionAssignableDTO[] EndRetrieveRevisionAssignablesForTask(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((RevisionAssignableDTO[])(results[0]));
        }

        /// <remarks/>
        public void RetrieveRevisionAssignablesForTaskAsync(int taskID)
        {
            this.RetrieveRevisionAssignablesForTaskAsync(taskID, null);
        }

        /// <remarks/>
        public void RetrieveRevisionAssignablesForTaskAsync(int taskID, object userState)
        {
            if ((this.RetrieveRevisionAssignablesForTaskOperationCompleted == null))
            {
                this.RetrieveRevisionAssignablesForTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveRevisionAssignablesForTaskOperationCompleted);
            }
            this.InvokeAsync("RetrieveRevisionAssignablesForTask", new object[] {
                    taskID}, this.RetrieveRevisionAssignablesForTaskOperationCompleted, userState);
        }

        private void OnRetrieveRevisionAssignablesForTaskOperationCompleted(object arg)
        {
            if ((this.RetrieveRevisionAssignablesForTaskCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveRevisionAssignablesForTaskCompleted(this, new RetrieveRevisionAssignablesForTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/AddRevisionAssignableToTask", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddRevisionAssignableToTask(int taskID, RevisionAssignableDTO revisionAssignable)
        {
            object[] results = this.Invoke("AddRevisionAssignableToTask", new object[] {
                    taskID,
                    revisionAssignable});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddRevisionAssignableToTask(int taskID, RevisionAssignableDTO revisionAssignable, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddRevisionAssignableToTask", new object[] {
                    taskID,
                    revisionAssignable}, callback, asyncState);
        }

        /// <remarks/>
        public int EndAddRevisionAssignableToTask(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void AddRevisionAssignableToTaskAsync(int taskID, RevisionAssignableDTO revisionAssignable)
        {
            this.AddRevisionAssignableToTaskAsync(taskID, revisionAssignable, null);
        }

        /// <remarks/>
        public void AddRevisionAssignableToTaskAsync(int taskID, RevisionAssignableDTO revisionAssignable, object userState)
        {
            if ((this.AddRevisionAssignableToTaskOperationCompleted == null))
            {
                this.AddRevisionAssignableToTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRevisionAssignableToTaskOperationCompleted);
            }
            this.InvokeAsync("AddRevisionAssignableToTask", new object[] {
                    taskID,
                    revisionAssignable}, this.AddRevisionAssignableToTaskOperationCompleted, userState);
        }

        private void OnAddRevisionAssignableToTaskOperationCompleted(object arg)
        {
            if ((this.AddRevisionAssignableToTaskCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRevisionAssignableToTaskCompleted(this, new AddRevisionAssignableToTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RemoveRevisionAssignableFromTask", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveRevisionAssignableFromTask(int taskID, int revisionAssignableID)
        {
            this.Invoke("RemoveRevisionAssignableFromTask", new object[] {
                    taskID,
                    revisionAssignableID});
        }

        /// <remarks/>
        public System.IAsyncResult BeginRemoveRevisionAssignableFromTask(int taskID, int revisionAssignableID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RemoveRevisionAssignableFromTask", new object[] {
                    taskID,
                    revisionAssignableID}, callback, asyncState);
        }

        /// <remarks/>
        public void EndRemoveRevisionAssignableFromTask(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void RemoveRevisionAssignableFromTaskAsync(int taskID, int revisionAssignableID)
        {
            this.RemoveRevisionAssignableFromTaskAsync(taskID, revisionAssignableID, null);
        }

        /// <remarks/>
        public void RemoveRevisionAssignableFromTaskAsync(int taskID, int revisionAssignableID, object userState)
        {
            if ((this.RemoveRevisionAssignableFromTaskOperationCompleted == null))
            {
                this.RemoveRevisionAssignableFromTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveRevisionAssignableFromTaskOperationCompleted);
            }
            this.InvokeAsync("RemoveRevisionAssignableFromTask", new object[] {
                    taskID,
                    revisionAssignableID}, this.RemoveRevisionAssignableFromTaskOperationCompleted, userState);
        }

        private void OnRemoveRevisionAssignableFromTaskOperationCompleted(object arg)
        {
            if ((this.RemoveRevisionAssignableFromTaskCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveRevisionAssignableFromTaskCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/GetByID", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskDTO GetByID(int id)
        {
            object[] results = this.Invoke("GetByID", new object[] {
                    id});
            return ((TaskDTO)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetByID(int id, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetByID", new object[] {
                    id}, callback, asyncState);
        }

        /// <remarks/>
        public TaskDTO EndGetByID(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((TaskDTO)(results[0]));
        }

        /// <remarks/>
        public void GetByIDAsync(int id)
        {
            this.GetByIDAsync(id, null);
        }

        /// <remarks/>
        public void GetByIDAsync(int id, object userState)
        {
            if ((this.GetByIDOperationCompleted == null))
            {
                this.GetByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetByIDOperationCompleted);
            }
            this.InvokeAsync("GetByID", new object[] {
                    id}, this.GetByIDOperationCompleted, userState);
        }

        private void OnGetByIDOperationCompleted(object arg)
        {
            if ((this.GetByIDCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetByIDCompleted(this, new GetByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/Create", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int Create(TaskDTO entity)
        {
            object[] results = this.Invoke("Create", new object[] {
                    entity});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreate(TaskDTO entity, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Create", new object[] {
                    entity}, callback, asyncState);
        }

        /// <remarks/>
        public int EndCreate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void CreateAsync(TaskDTO entity)
        {
            this.CreateAsync(entity, null);
        }

        /// <remarks/>
        public void CreateAsync(TaskDTO entity, object userState)
        {
            if ((this.CreateOperationCompleted == null))
            {
                this.CreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOperationCompleted);
            }
            this.InvokeAsync("Create", new object[] {
                    entity}, this.CreateOperationCompleted, userState);
        }

        private void OnCreateOperationCompleted(object arg)
        {
            if ((this.CreateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateCompleted(this, new CreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/Update", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Update(TaskDTO entity)
        {
            this.Invoke("Update", new object[] {
                    entity});
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdate(TaskDTO entity, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Update", new object[] {
                    entity}, callback, asyncState);
        }

        /// <remarks/>
        public void EndUpdate(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void UpdateAsync(TaskDTO entity)
        {
            this.UpdateAsync(entity, null);
        }

        /// <remarks/>
        public void UpdateAsync(TaskDTO entity, object userState)
        {
            if ((this.UpdateOperationCompleted == null))
            {
                this.UpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateOperationCompleted);
            }
            this.InvokeAsync("Update", new object[] {
                    entity}, this.UpdateOperationCompleted, userState);
        }

        private void OnUpdateOperationCompleted(object arg)
        {
            if ((this.UpdateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/Delete", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Delete(int id)
        {
            this.Invoke("Delete", new object[] {
                    id});
        }

        /// <remarks/>
        public System.IAsyncResult BeginDelete(int id, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Delete", new object[] {
                    id}, callback, asyncState);
        }

        /// <remarks/>
        public void EndDelete(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void DeleteAsync(int id)
        {
            this.DeleteAsync(id, null);
        }

        /// <remarks/>
        public void DeleteAsync(int id, object userState)
        {
            if ((this.DeleteOperationCompleted == null))
            {
                this.DeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOperationCompleted);
            }
            this.InvokeAsync("Delete", new object[] {
                    id}, this.DeleteOperationCompleted, userState);
        }

        private void OnDeleteOperationCompleted(object arg)
        {
            if ((this.DeleteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveAll", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskDTO[] RetrieveAll()
        {
            object[] results = this.Invoke("RetrieveAll", new object[0]);
            return ((TaskDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieveAll(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrieveAll", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public TaskDTO[] EndRetrieveAll(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((TaskDTO[])(results[0]));
        }

        /// <remarks/>
        public void RetrieveAllAsync()
        {
            this.RetrieveAllAsync(null);
        }

        /// <remarks/>
        public void RetrieveAllAsync(object userState)
        {
            if ((this.RetrieveAllOperationCompleted == null))
            {
                this.RetrieveAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAllOperationCompleted);
            }
            this.InvokeAsync("RetrieveAll", new object[0], this.RetrieveAllOperationCompleted, userState);
        }

        private void OnRetrieveAllOperationCompleted(object arg)
        {
            if ((this.RetrieveAllCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAllCompleted(this, new RetrieveAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/Retrieve", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskDTO[] Retrieve(string hql, object[] parameters)
        {
            object[] results = this.Invoke("Retrieve", new object[] {
                    hql,
                    parameters});
            return ((TaskDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieve(string hql, object[] parameters, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Retrieve", new object[] {
                    hql,
                    parameters}, callback, asyncState);
        }

        /// <remarks/>
        public TaskDTO[] EndRetrieve(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((TaskDTO[])(results[0]));
        }

        /// <remarks/>
        public void RetrieveAsync(string hql, object[] parameters)
        {
            this.RetrieveAsync(hql, parameters, null);
        }

        /// <remarks/>
        public void RetrieveAsync(string hql, object[] parameters, object userState)
        {
            if ((this.RetrieveOperationCompleted == null))
            {
                this.RetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveOperationCompleted);
            }
            this.InvokeAsync("Retrieve", new object[] {
                    hql,
                    parameters}, this.RetrieveOperationCompleted, userState);
        }

        private void OnRetrieveOperationCompleted(object arg)
        {
            if ((this.RetrieveCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveCompleted(this, new RetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/GetIDs", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] GetIDs(string hql, object[] parameters)
        {
            object[] results = this.Invoke("GetIDs", new object[] {
                    hql,
                    parameters});
            return ((int[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetIDs(string hql, object[] parameters, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetIDs", new object[] {
                    hql,
                    parameters}, callback, asyncState);
        }

        /// <remarks/>
        public int[] EndGetIDs(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int[])(results[0]));
        }

        /// <remarks/>
        public void GetIDsAsync(string hql, object[] parameters)
        {
            this.GetIDsAsync(hql, parameters, null);
        }

        /// <remarks/>
        public void GetIDsAsync(string hql, object[] parameters, object userState)
        {
            if ((this.GetIDsOperationCompleted == null))
            {
                this.GetIDsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIDsOperationCompleted);
            }
            this.InvokeAsync("GetIDs", new object[] {
                    hql,
                    parameters}, this.GetIDsOperationCompleted, userState);
        }

        private void OnGetIDsOperationCompleted(object arg)
        {
            if ((this.GetIDsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIDsCompleted(this, new GetIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrievePage", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskDTO[] RetrievePage(string hql, int page, int pageSize, object[] parameters)
        {
            object[] results = this.Invoke("RetrievePage", new object[] {
                    hql,
                    page,
                    pageSize,
                    parameters});
            return ((TaskDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrievePage(string hql, int page, int pageSize, object[] parameters, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrievePage", new object[] {
                    hql,
                    page,
                    pageSize,
                    parameters}, callback, asyncState);
        }

        /// <remarks/>
        public TaskDTO[] EndRetrievePage(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((TaskDTO[])(results[0]));
        }

        /// <remarks/>
        public void RetrievePageAsync(string hql, int page, int pageSize, object[] parameters)
        {
            this.RetrievePageAsync(hql, page, pageSize, parameters, null);
        }

        /// <remarks/>
        public void RetrievePageAsync(string hql, int page, int pageSize, object[] parameters, object userState)
        {
            if ((this.RetrievePageOperationCompleted == null))
            {
                this.RetrievePageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrievePageOperationCompleted);
            }
            this.InvokeAsync("RetrievePage", new object[] {
                    hql,
                    page,
                    pageSize,
                    parameters}, this.RetrievePageOperationCompleted, userState);
        }

        private void OnRetrievePageOperationCompleted(object arg)
        {
            if ((this.RetrievePageCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrievePageCompleted(this, new RetrievePageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveCount", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RetrieveCount(string hql, object[] parameters)
        {
            object[] results = this.Invoke("RetrieveCount", new object[] {
                    hql,
                    parameters});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieveCount(string hql, object[] parameters, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrieveCount", new object[] {
                    hql,
                    parameters}, callback, asyncState);
        }

        /// <remarks/>
        public int EndRetrieveCount(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void RetrieveCountAsync(string hql, object[] parameters)
        {
            this.RetrieveCountAsync(hql, parameters, null);
        }

        /// <remarks/>
        public void RetrieveCountAsync(string hql, object[] parameters, object userState)
        {
            if ((this.RetrieveCountOperationCompleted == null))
            {
                this.RetrieveCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveCountOperationCompleted);
            }
            this.InvokeAsync("RetrieveCount", new object[] {
                    hql,
                    parameters}, this.RetrieveCountOperationCompleted, userState);
        }

        private void OnRetrieveCountOperationCompleted(object arg)
        {
            if ((this.RetrieveCountCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveCountCompleted(this, new RetrieveCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://targetprocess.com")]
    public partial class TaskDTO : DataTransferObject
    {

        private System.Nullable<int> taskIDField;

        private string nameField;

        private string descriptionField;

        private System.Nullable<System.DateTime> startDateField;

        private System.Nullable<System.DateTime> endDateField;

        private System.Nullable<System.DateTime> createDateField;

        private System.Nullable<System.DateTime> modifyDateField;

        private System.Nullable<System.DateTime> lastCommentDateField;

        private System.Nullable<double> numericPriorityField;

        private string customField1Field;

        private string customField2Field;

        private string customField3Field;

        private string customField4Field;

        private string customField5Field;

        private string customField6Field;

        private string customField7Field;

        private string customField8Field;

        private string customField9Field;

        private string customField10Field;

        private string customField11Field;

        private string customField12Field;

        private string customField13Field;

        private string customField14Field;

        private string customField15Field;

        private decimal effortField;

        private decimal effortCompletedField;

        private decimal effortToDoField;

        private System.Nullable<decimal> timeSpentField;

        private System.Nullable<decimal> timeRemainField;

        private System.Nullable<int> lastCommentUserIDField;

        private System.Nullable<int> ownerIDField;

        private System.Nullable<int> lastEditorIDField;

        private System.Nullable<int> entityStateIDField;

        private System.Nullable<int> priorityIDField;

        private System.Nullable<int> projectIDField;

        private System.Nullable<int> iterationIDField;

        private System.Nullable<int> parentIDField;

        private System.Nullable<int> releaseIDField;

        private System.Nullable<int> userStoryIDField;

        private string entityTypeNameField;

        private string entityStateNameField;

        private string priorityNameField;

        private string projectNameField;

        private string iterationNameField;

        private string parentNameField;

        private string releaseNameField;

        private string userStoryNameField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> TaskID
        {
            get
            {
                return this.taskIDField;
            }
            set
            {
                this.taskIDField = value;
            }
        }

        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<System.DateTime> StartDate
        {
            get
            {
                return this.startDateField;
            }
            set
            {
                this.startDateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<System.DateTime> EndDate
        {
            get
            {
                return this.endDateField;
            }
            set
            {
                this.endDateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this.createDateField;
            }
            set
            {
                this.createDateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this.modifyDateField;
            }
            set
            {
                this.modifyDateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<System.DateTime> LastCommentDate
        {
            get
            {
                return this.lastCommentDateField;
            }
            set
            {
                this.lastCommentDateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<double> NumericPriority
        {
            get
            {
                return this.numericPriorityField;
            }
            set
            {
                this.numericPriorityField = value;
            }
        }

        /// <remarks/>
        public string CustomField1
        {
            get
            {
                return this.customField1Field;
            }
            set
            {
                this.customField1Field = value;
            }
        }

        /// <remarks/>
        public string CustomField2
        {
            get
            {
                return this.customField2Field;
            }
            set
            {
                this.customField2Field = value;
            }
        }

        /// <remarks/>
        public string CustomField3
        {
            get
            {
                return this.customField3Field;
            }
            set
            {
                this.customField3Field = value;
            }
        }

        /// <remarks/>
        public string CustomField4
        {
            get
            {
                return this.customField4Field;
            }
            set
            {
                this.customField4Field = value;
            }
        }

        /// <remarks/>
        public string CustomField5
        {
            get
            {
                return this.customField5Field;
            }
            set
            {
                this.customField5Field = value;
            }
        }

        /// <remarks/>
        public string CustomField6
        {
            get
            {
                return this.customField6Field;
            }
            set
            {
                this.customField6Field = value;
            }
        }

        /// <remarks/>
        public string CustomField7
        {
            get
            {
                return this.customField7Field;
            }
            set
            {
                this.customField7Field = value;
            }
        }

        /// <remarks/>
        public string CustomField8
        {
            get
            {
                return this.customField8Field;
            }
            set
            {
                this.customField8Field = value;
            }
        }

        /// <remarks/>
        public string CustomField9
        {
            get
            {
                return this.customField9Field;
            }
            set
            {
                this.customField9Field = value;
            }
        }

        /// <remarks/>
        public string CustomField10
        {
            get
            {
                return this.customField10Field;
            }
            set
            {
                this.customField10Field = value;
            }
        }

        /// <remarks/>
        public string CustomField11
        {
            get
            {
                return this.customField11Field;
            }
            set
            {
                this.customField11Field = value;
            }
        }

        /// <remarks/>
        public string CustomField12
        {
            get
            {
                return this.customField12Field;
            }
            set
            {
                this.customField12Field = value;
            }
        }

        /// <remarks/>
        public string CustomField13
        {
            get
            {
                return this.customField13Field;
            }
            set
            {
                this.customField13Field = value;
            }
        }

        /// <remarks/>
        public string CustomField14
        {
            get
            {
                return this.customField14Field;
            }
            set
            {
                this.customField14Field = value;
            }
        }

        /// <remarks/>
        public string CustomField15
        {
            get
            {
                return this.customField15Field;
            }
            set
            {
                this.customField15Field = value;
            }
        }

        /// <remarks/>
        public decimal Effort
        {
            get
            {
                return this.effortField;
            }
            set
            {
                this.effortField = value;
            }
        }

        /// <remarks/>
        public decimal EffortCompleted
        {
            get
            {
                return this.effortCompletedField;
            }
            set
            {
                this.effortCompletedField = value;
            }
        }

        /// <remarks/>
        public decimal EffortToDo
        {
            get
            {
                return this.effortToDoField;
            }
            set
            {
                this.effortToDoField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> TimeSpent
        {
            get
            {
                return this.timeSpentField;
            }
            set
            {
                this.timeSpentField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> TimeRemain
        {
            get
            {
                return this.timeRemainField;
            }
            set
            {
                this.timeRemainField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> LastCommentUserID
        {
            get
            {
                return this.lastCommentUserIDField;
            }
            set
            {
                this.lastCommentUserIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> OwnerID
        {
            get
            {
                return this.ownerIDField;
            }
            set
            {
                this.ownerIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> LastEditorID
        {
            get
            {
                return this.lastEditorIDField;
            }
            set
            {
                this.lastEditorIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> EntityStateID
        {
            get
            {
                return this.entityStateIDField;
            }
            set
            {
                this.entityStateIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> PriorityID
        {
            get
            {
                return this.priorityIDField;
            }
            set
            {
                this.priorityIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ProjectID
        {
            get
            {
                return this.projectIDField;
            }
            set
            {
                this.projectIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> IterationID
        {
            get
            {
                return this.iterationIDField;
            }
            set
            {
                this.iterationIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ParentID
        {
            get
            {
                return this.parentIDField;
            }
            set
            {
                this.parentIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ReleaseID
        {
            get
            {
                return this.releaseIDField;
            }
            set
            {
                this.releaseIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> UserStoryID
        {
            get
            {
                return this.userStoryIDField;
            }
            set
            {
                this.userStoryIDField = value;
            }
        }

        /// <remarks/>
        public string EntityTypeName
        {
            get
            {
                return this.entityTypeNameField;
            }
            set
            {
                this.entityTypeNameField = value;
            }
        }

        /// <remarks/>
        public string EntityStateName
        {
            get
            {
                return this.entityStateNameField;
            }
            set
            {
                this.entityStateNameField = value;
            }
        }

        /// <remarks/>
        public string PriorityName
        {
            get
            {
                return this.priorityNameField;
            }
            set
            {
                this.priorityNameField = value;
            }
        }

        /// <remarks/>
        public string ProjectName
        {
            get
            {
                return this.projectNameField;
            }
            set
            {
                this.projectNameField = value;
            }
        }

        /// <remarks/>
        public string IterationName
        {
            get
            {
                return this.iterationNameField;
            }
            set
            {
                this.iterationNameField = value;
            }
        }

        /// <remarks/>
        public string ParentName
        {
            get
            {
                return this.parentNameField;
            }
            set
            {
                this.parentNameField = value;
            }
        }

        /// <remarks/>
        public string ReleaseName
        {
            get
            {
                return this.releaseNameField;
            }
            set
            {
                this.releaseNameField = value;
            }
        }

        /// <remarks/>
        public string UserStoryName
        {
            get
            {
                return this.userStoryNameField;
            }
            set
            {
                this.userStoryNameField = value;
            }
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RevisionAssignableDTO))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ActorEffortDTO))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TeamDTO))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RequestGeneralDTO))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AttachmentDTO))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CommentDTO))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PriorityDTO))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TaskDTO))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://targetprocess.com")]
    public abstract partial class DataTransferObject
    {

        private System.Nullable<int> idField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ID
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://targetprocess.com")]
    public partial class RevisionAssignableDTO : DataTransferObject
    {

        private System.Nullable<int> revisionAssignableIDField;

        private System.Nullable<int> assignableIDField;

        private System.Nullable<int> revisionIDField;

        private string assignableNameField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> RevisionAssignableID
        {
            get
            {
                return this.revisionAssignableIDField;
            }
            set
            {
                this.revisionAssignableIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> AssignableID
        {
            get
            {
                return this.assignableIDField;
            }
            set
            {
                this.assignableIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> RevisionID
        {
            get
            {
                return this.revisionIDField;
            }
            set
            {
                this.revisionIDField = value;
            }
        }

        /// <remarks/>
        public string AssignableName
        {
            get
            {
                return this.assignableNameField;
            }
            set
            {
                this.assignableNameField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://targetprocess.com")]
    public partial class ActorEffortDTO : DataTransferObject
    {

        private System.Nullable<int> actorEffortIDField;

        private decimal initialEstimateField;

        private decimal effortField;

        private decimal effortCompletedField;

        private decimal effortToDoField;

        private System.Nullable<decimal> timeSpentField;

        private System.Nullable<decimal> timeRemainField;

        private System.Nullable<bool> substractionFromParentEffortField;

        private System.Nullable<int> assignableIDField;

        private System.Nullable<int> actorIDField;

        private string assignableNameField;

        private string actorNameField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ActorEffortID
        {
            get
            {
                return this.actorEffortIDField;
            }
            set
            {
                this.actorEffortIDField = value;
            }
        }

        /// <remarks/>
        public decimal InitialEstimate
        {
            get
            {
                return this.initialEstimateField;
            }
            set
            {
                this.initialEstimateField = value;
            }
        }

        /// <remarks/>
        public decimal Effort
        {
            get
            {
                return this.effortField;
            }
            set
            {
                this.effortField = value;
            }
        }

        /// <remarks/>
        public decimal EffortCompleted
        {
            get
            {
                return this.effortCompletedField;
            }
            set
            {
                this.effortCompletedField = value;
            }
        }

        /// <remarks/>
        public decimal EffortToDo
        {
            get
            {
                return this.effortToDoField;
            }
            set
            {
                this.effortToDoField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> TimeSpent
        {
            get
            {
                return this.timeSpentField;
            }
            set
            {
                this.timeSpentField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<decimal> TimeRemain
        {
            get
            {
                return this.timeRemainField;
            }
            set
            {
                this.timeRemainField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<bool> SubstractionFromParentEffort
        {
            get
            {
                return this.substractionFromParentEffortField;
            }
            set
            {
                this.substractionFromParentEffortField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> AssignableID
        {
            get
            {
                return this.assignableIDField;
            }
            set
            {
                this.assignableIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ActorID
        {
            get
            {
                return this.actorIDField;
            }
            set
            {
                this.actorIDField = value;
            }
        }

        /// <remarks/>
        public string AssignableName
        {
            get
            {
                return this.assignableNameField;
            }
            set
            {
                this.assignableNameField = value;
            }
        }

        /// <remarks/>
        public string ActorName
        {
            get
            {
                return this.actorNameField;
            }
            set
            {
                this.actorNameField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://targetprocess.com")]
    public partial class TeamDTO : DataTransferObject
    {

        private System.Nullable<int> teamIDField;

        private System.Nullable<int> assignableIDField;

        private System.Nullable<int> userIDField;

        private System.Nullable<int> actorIDField;

        private string assignableNameField;

        private string actorNameField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> TeamID
        {
            get
            {
                return this.teamIDField;
            }
            set
            {
                this.teamIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> AssignableID
        {
            get
            {
                return this.assignableIDField;
            }
            set
            {
                this.assignableIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> UserID
        {
            get
            {
                return this.userIDField;
            }
            set
            {
                this.userIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ActorID
        {
            get
            {
                return this.actorIDField;
            }
            set
            {
                this.actorIDField = value;
            }
        }

        /// <remarks/>
        public string AssignableName
        {
            get
            {
                return this.assignableNameField;
            }
            set
            {
                this.assignableNameField = value;
            }
        }

        /// <remarks/>
        public string ActorName
        {
            get
            {
                return this.actorNameField;
            }
            set
            {
                this.actorNameField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://targetprocess.com")]
    public partial class RequestGeneralDTO : DataTransferObject
    {

        private System.Nullable<int> requestGeneralIDField;

        private System.Nullable<System.DateTime> createDateField;

        private System.Nullable<bool> isAttachedField;

        private System.Nullable<int> generalIDField;

        private System.Nullable<int> requestIDField;

        private string generalNameField;

        private string requestNameField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> RequestGeneralID
        {
            get
            {
                return this.requestGeneralIDField;
            }
            set
            {
                this.requestGeneralIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this.createDateField;
            }
            set
            {
                this.createDateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<bool> IsAttached
        {
            get
            {
                return this.isAttachedField;
            }
            set
            {
                this.isAttachedField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> GeneralID
        {
            get
            {
                return this.generalIDField;
            }
            set
            {
                this.generalIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> RequestID
        {
            get
            {
                return this.requestIDField;
            }
            set
            {
                this.requestIDField = value;
            }
        }

        /// <remarks/>
        public string GeneralName
        {
            get
            {
                return this.generalNameField;
            }
            set
            {
                this.generalNameField = value;
            }
        }

        /// <remarks/>
        public string RequestName
        {
            get
            {
                return this.requestNameField;
            }
            set
            {
                this.requestNameField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://targetprocess.com")]
    public partial class AttachmentDTO : DataTransferObject
    {

        private System.Nullable<int> attachmentIDField;

        private string originalFileNameField;

        private string uniqueFileNameField;

        private System.Nullable<System.DateTime> createDateField;

        private string descriptionField;

        private System.Nullable<int> generalIDField;

        private System.Nullable<int> messageIDField;

        private System.Nullable<int> ownerIDField;

        private System.Nullable<int> attachmentFileIDField;

        private string generalNameField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> AttachmentID
        {
            get
            {
                return this.attachmentIDField;
            }
            set
            {
                this.attachmentIDField = value;
            }
        }

        /// <remarks/>
        public string OriginalFileName
        {
            get
            {
                return this.originalFileNameField;
            }
            set
            {
                this.originalFileNameField = value;
            }
        }

        /// <remarks/>
        public string UniqueFileName
        {
            get
            {
                return this.uniqueFileNameField;
            }
            set
            {
                this.uniqueFileNameField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this.createDateField;
            }
            set
            {
                this.createDateField = value;
            }
        }

        /// <remarks/>
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> GeneralID
        {
            get
            {
                return this.generalIDField;
            }
            set
            {
                this.generalIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> MessageID
        {
            get
            {
                return this.messageIDField;
            }
            set
            {
                this.messageIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> OwnerID
        {
            get
            {
                return this.ownerIDField;
            }
            set
            {
                this.ownerIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> AttachmentFileID
        {
            get
            {
                return this.attachmentFileIDField;
            }
            set
            {
                this.attachmentFileIDField = value;
            }
        }

        /// <remarks/>
        public string GeneralName
        {
            get
            {
                return this.generalNameField;
            }
            set
            {
                this.generalNameField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://targetprocess.com")]
    public partial class CommentDTO : DataTransferObject
    {

        private System.Nullable<int> commentIDField;

        private string descriptionField;

        private System.Nullable<System.DateTime> createDateField;

        private System.Nullable<int> generalIDField;

        private System.Nullable<int> ownerIDField;

        private System.Nullable<int> parentIDField;

        private string generalNameField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> CommentID
        {
            get
            {
                return this.commentIDField;
            }
            set
            {
                this.commentIDField = value;
            }
        }

        /// <remarks/>
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<System.DateTime> CreateDate
        {
            get
            {
                return this.createDateField;
            }
            set
            {
                this.createDateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> GeneralID
        {
            get
            {
                return this.generalIDField;
            }
            set
            {
                this.generalIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> OwnerID
        {
            get
            {
                return this.ownerIDField;
            }
            set
            {
                this.ownerIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ParentID
        {
            get
            {
                return this.parentIDField;
            }
            set
            {
                this.parentIDField = value;
            }
        }

        /// <remarks/>
        public string GeneralName
        {
            get
            {
                return this.generalNameField;
            }
            set
            {
                this.generalNameField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://targetprocess.com")]
    public partial class PriorityDTO : DataTransferObject
    {

        private System.Nullable<int> priorityIDField;

        private string nameField;

        private int importanceField;

        private System.Nullable<bool> isDefaultField;

        private string entityTypeNameField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> PriorityID
        {
            get
            {
                return this.priorityIDField;
            }
            set
            {
                this.priorityIDField = value;
            }
        }

        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        public int Importance
        {
            get
            {
                return this.importanceField;
            }
            set
            {
                this.importanceField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<bool> IsDefault
        {
            get
            {
                return this.isDefaultField;
            }
            set
            {
                this.isDefaultField = value;
            }
        }

        /// <remarks/>
        public string EntityTypeName
        {
            get
            {
                return this.entityTypeNameField;
            }
            set
            {
                this.entityTypeNameField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveAllForLastCommentUserCompletedEventHandler(object sender, RetrieveAllForLastCommentUserCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveAllForLastCommentUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveAllForLastCommentUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public TaskDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((TaskDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveAllForProjectCompletedEventHandler(object sender, RetrieveAllForProjectCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveAllForProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveAllForProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public TaskDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((TaskDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveAllForOwnerCompletedEventHandler(object sender, RetrieveAllForOwnerCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveAllForOwnerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveAllForOwnerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public TaskDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((TaskDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveAllForEntityStateCompletedEventHandler(object sender, RetrieveAllForEntityStateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveAllForEntityStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveAllForEntityStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public TaskDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((TaskDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ChangeStateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveAllForPriorityCompletedEventHandler(object sender, RetrieveAllForPriorityCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveAllForPriorityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveAllForPriorityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public TaskDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((TaskDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPrioritiesCompletedEventHandler(object sender, GetPrioritiesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPrioritiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetPrioritiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public PriorityDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((PriorityDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveAllForIterationCompletedEventHandler(object sender, RetrieveAllForIterationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveAllForIterationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveAllForIterationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public TaskDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((TaskDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveAllForReleaseCompletedEventHandler(object sender, RetrieveAllForReleaseCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveAllForReleaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveAllForReleaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public TaskDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((TaskDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveAllForUserStoryCompletedEventHandler(object sender, RetrieveAllForUserStoryCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveAllForUserStoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveAllForUserStoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public TaskDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((TaskDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveCommentsForTaskCompletedEventHandler(object sender, RetrieveCommentsForTaskCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveCommentsForTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveCommentsForTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public CommentDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((CommentDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddCommentToTaskCompletedEventHandler(object sender, AddCommentToTaskCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCommentToTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddCommentToTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RemoveCommentFromTaskCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveAttachmentsForTaskCompletedEventHandler(object sender, RetrieveAttachmentsForTaskCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveAttachmentsForTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveAttachmentsForTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public AttachmentDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((AttachmentDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RemoveAttachmentFromTaskCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddAttachmentToTaskCompletedEventHandler(object sender, AddAttachmentToTaskCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddAttachmentToTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddAttachmentToTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveAttachedRequestsForTaskCompletedEventHandler(object sender, RetrieveAttachedRequestsForTaskCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveAttachedRequestsForTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveAttachedRequestsForTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public RequestGeneralDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((RequestGeneralDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddRequestGeneralToTaskCompletedEventHandler(object sender, AddRequestGeneralToTaskCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddRequestGeneralToTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddRequestGeneralToTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RemoveRequestGeneralFromTaskCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveTeamsForTaskCompletedEventHandler(object sender, RetrieveTeamsForTaskCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveTeamsForTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveTeamsForTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public TeamDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((TeamDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddTeamToTaskCompletedEventHandler(object sender, AddTeamToTaskCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddTeamToTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddTeamToTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AssignUserAsActorCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AssignUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AssignUserByEmailOrLoginAsActorCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AssignUserByEmailOrLoginCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveOpenForUserCompletedEventHandler(object sender, RetrieveOpenForUserCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveOpenForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveOpenForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public TaskDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((TaskDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveOpenForMeCompletedEventHandler(object sender, RetrieveOpenForMeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveOpenForMeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveOpenForMeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public TaskDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((TaskDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RemoveTeamFromTaskCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveActorEffortsForTaskCompletedEventHandler(object sender, RetrieveActorEffortsForTaskCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveActorEffortsForTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveActorEffortsForTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ActorEffortDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ActorEffortDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ChangeEffortCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveRevisionAssignablesForTaskCompletedEventHandler(object sender, RetrieveRevisionAssignablesForTaskCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveRevisionAssignablesForTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveRevisionAssignablesForTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public RevisionAssignableDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((RevisionAssignableDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddRevisionAssignableToTaskCompletedEventHandler(object sender, AddRevisionAssignableToTaskCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddRevisionAssignableToTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddRevisionAssignableToTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RemoveRevisionAssignableFromTaskCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetByIDCompletedEventHandler(object sender, GetByIDCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public TaskDTO Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((TaskDTO)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateCompletedEventHandler(object sender, CreateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveAllCompletedEventHandler(object sender, RetrieveAllCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public TaskDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((TaskDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveCompletedEventHandler(object sender, RetrieveCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public TaskDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((TaskDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetIDsCompletedEventHandler(object sender, GetIDsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrievePageCompletedEventHandler(object sender, RetrievePageCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrievePageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrievePageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public TaskDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((TaskDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveCountCompletedEventHandler(object sender, RetrieveCountCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

}