//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;



namespace CIFactory.TargetProcess.Common.ProcessWebService
{
    // 
    // This source code was auto-generated by wsdl, Version=2.0.50727.42.
    // 


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "ProcessServiceSoap", Namespace = "http://targetprocess.com")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DataTransferObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class ProcessService : Microsoft.Web.Services3.WebServicesClientProtocol
    {

        private System.Threading.SendOrPostCallback RetrieveProcessPracticesForProcessOperationCompleted;

        private System.Threading.SendOrPostCallback AddProcessPracticeToProcessOperationCompleted;

        private System.Threading.SendOrPostCallback RemoveProcessPracticeFromProcessOperationCompleted;

        private System.Threading.SendOrPostCallback RetrieveEntityStatesForProcessOperationCompleted;

        private System.Threading.SendOrPostCallback AddEntityStateToProcessOperationCompleted;

        private System.Threading.SendOrPostCallback RemoveEntityStateFromProcessOperationCompleted;

        private System.Threading.SendOrPostCallback RetrieveCustomFieldsForProcessOperationCompleted;

        private System.Threading.SendOrPostCallback AddCustomFieldToProcessOperationCompleted;

        private System.Threading.SendOrPostCallback RemoveCustomFieldFromProcessOperationCompleted;

        private System.Threading.SendOrPostCallback RetrieveTermsForProcessOperationCompleted;

        private System.Threading.SendOrPostCallback AddTermToProcessOperationCompleted;

        private System.Threading.SendOrPostCallback RemoveTermFromProcessOperationCompleted;

        private System.Threading.SendOrPostCallback GetByIDOperationCompleted;

        private System.Threading.SendOrPostCallback CreateOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteOperationCompleted;

        private System.Threading.SendOrPostCallback RetrieveAllOperationCompleted;

        private System.Threading.SendOrPostCallback RetrieveOperationCompleted;

        private System.Threading.SendOrPostCallback GetIDsOperationCompleted;

        private System.Threading.SendOrPostCallback RetrievePageOperationCompleted;

        private System.Threading.SendOrPostCallback RetrieveCountOperationCompleted;

        /// <remarks/>
        public ProcessService()
        {
            this.Url = "http://tp.agilexhealth.com/Services/ProcessService.asmx";
        }

        /// <remarks/>
        public event RetrieveProcessPracticesForProcessCompletedEventHandler RetrieveProcessPracticesForProcessCompleted;

        /// <remarks/>
        public event AddProcessPracticeToProcessCompletedEventHandler AddProcessPracticeToProcessCompleted;

        /// <remarks/>
        public event RemoveProcessPracticeFromProcessCompletedEventHandler RemoveProcessPracticeFromProcessCompleted;

        /// <remarks/>
        public event RetrieveEntityStatesForProcessCompletedEventHandler RetrieveEntityStatesForProcessCompleted;

        /// <remarks/>
        public event AddEntityStateToProcessCompletedEventHandler AddEntityStateToProcessCompleted;

        /// <remarks/>
        public event RemoveEntityStateFromProcessCompletedEventHandler RemoveEntityStateFromProcessCompleted;

        /// <remarks/>
        public event RetrieveCustomFieldsForProcessCompletedEventHandler RetrieveCustomFieldsForProcessCompleted;

        /// <remarks/>
        public event AddCustomFieldToProcessCompletedEventHandler AddCustomFieldToProcessCompleted;

        /// <remarks/>
        public event RemoveCustomFieldFromProcessCompletedEventHandler RemoveCustomFieldFromProcessCompleted;

        /// <remarks/>
        public event RetrieveTermsForProcessCompletedEventHandler RetrieveTermsForProcessCompleted;

        /// <remarks/>
        public event AddTermToProcessCompletedEventHandler AddTermToProcessCompleted;

        /// <remarks/>
        public event RemoveTermFromProcessCompletedEventHandler RemoveTermFromProcessCompleted;

        /// <remarks/>
        public event GetByIDCompletedEventHandler GetByIDCompleted;

        /// <remarks/>
        public event CreateCompletedEventHandler CreateCompleted;

        /// <remarks/>
        public event UpdateCompletedEventHandler UpdateCompleted;

        /// <remarks/>
        public event DeleteCompletedEventHandler DeleteCompleted;

        /// <remarks/>
        public event RetrieveAllCompletedEventHandler RetrieveAllCompleted;

        /// <remarks/>
        public event RetrieveCompletedEventHandler RetrieveCompleted;

        /// <remarks/>
        public event GetIDsCompletedEventHandler GetIDsCompleted;

        /// <remarks/>
        public event RetrievePageCompletedEventHandler RetrievePageCompleted;

        /// <remarks/>
        public event RetrieveCountCompletedEventHandler RetrieveCountCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveProcessPracticesForProcess", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProcessPracticeDTO[] RetrieveProcessPracticesForProcess(int processID)
        {
            object[] results = this.Invoke("RetrieveProcessPracticesForProcess", new object[] {
                    processID});
            return ((ProcessPracticeDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieveProcessPracticesForProcess(int processID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrieveProcessPracticesForProcess", new object[] {
                    processID}, callback, asyncState);
        }

        /// <remarks/>
        public ProcessPracticeDTO[] EndRetrieveProcessPracticesForProcess(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ProcessPracticeDTO[])(results[0]));
        }

        /// <remarks/>
        public void RetrieveProcessPracticesForProcessAsync(int processID)
        {
            this.RetrieveProcessPracticesForProcessAsync(processID, null);
        }

        /// <remarks/>
        public void RetrieveProcessPracticesForProcessAsync(int processID, object userState)
        {
            if ((this.RetrieveProcessPracticesForProcessOperationCompleted == null))
            {
                this.RetrieveProcessPracticesForProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveProcessPracticesForProcessOperationCompleted);
            }
            this.InvokeAsync("RetrieveProcessPracticesForProcess", new object[] {
                    processID}, this.RetrieveProcessPracticesForProcessOperationCompleted, userState);
        }

        private void OnRetrieveProcessPracticesForProcessOperationCompleted(object arg)
        {
            if ((this.RetrieveProcessPracticesForProcessCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveProcessPracticesForProcessCompleted(this, new RetrieveProcessPracticesForProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/AddProcessPracticeToProcess", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddProcessPracticeToProcess(int processID, ProcessPracticeDTO processPractice)
        {
            object[] results = this.Invoke("AddProcessPracticeToProcess", new object[] {
                    processID,
                    processPractice});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddProcessPracticeToProcess(int processID, ProcessPracticeDTO processPractice, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddProcessPracticeToProcess", new object[] {
                    processID,
                    processPractice}, callback, asyncState);
        }

        /// <remarks/>
        public int EndAddProcessPracticeToProcess(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void AddProcessPracticeToProcessAsync(int processID, ProcessPracticeDTO processPractice)
        {
            this.AddProcessPracticeToProcessAsync(processID, processPractice, null);
        }

        /// <remarks/>
        public void AddProcessPracticeToProcessAsync(int processID, ProcessPracticeDTO processPractice, object userState)
        {
            if ((this.AddProcessPracticeToProcessOperationCompleted == null))
            {
                this.AddProcessPracticeToProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddProcessPracticeToProcessOperationCompleted);
            }
            this.InvokeAsync("AddProcessPracticeToProcess", new object[] {
                    processID,
                    processPractice}, this.AddProcessPracticeToProcessOperationCompleted, userState);
        }

        private void OnAddProcessPracticeToProcessOperationCompleted(object arg)
        {
            if ((this.AddProcessPracticeToProcessCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddProcessPracticeToProcessCompleted(this, new AddProcessPracticeToProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RemoveProcessPracticeFromProcess", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveProcessPracticeFromProcess(int processID, int processPracticeID)
        {
            this.Invoke("RemoveProcessPracticeFromProcess", new object[] {
                    processID,
                    processPracticeID});
        }

        /// <remarks/>
        public System.IAsyncResult BeginRemoveProcessPracticeFromProcess(int processID, int processPracticeID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RemoveProcessPracticeFromProcess", new object[] {
                    processID,
                    processPracticeID}, callback, asyncState);
        }

        /// <remarks/>
        public void EndRemoveProcessPracticeFromProcess(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void RemoveProcessPracticeFromProcessAsync(int processID, int processPracticeID)
        {
            this.RemoveProcessPracticeFromProcessAsync(processID, processPracticeID, null);
        }

        /// <remarks/>
        public void RemoveProcessPracticeFromProcessAsync(int processID, int processPracticeID, object userState)
        {
            if ((this.RemoveProcessPracticeFromProcessOperationCompleted == null))
            {
                this.RemoveProcessPracticeFromProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveProcessPracticeFromProcessOperationCompleted);
            }
            this.InvokeAsync("RemoveProcessPracticeFromProcess", new object[] {
                    processID,
                    processPracticeID}, this.RemoveProcessPracticeFromProcessOperationCompleted, userState);
        }

        private void OnRemoveProcessPracticeFromProcessOperationCompleted(object arg)
        {
            if ((this.RemoveProcessPracticeFromProcessCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveProcessPracticeFromProcessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveEntityStatesForProcess", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EntityStateDTO[] RetrieveEntityStatesForProcess(int processID)
        {
            object[] results = this.Invoke("RetrieveEntityStatesForProcess", new object[] {
                    processID});
            return ((EntityStateDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieveEntityStatesForProcess(int processID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrieveEntityStatesForProcess", new object[] {
                    processID}, callback, asyncState);
        }

        /// <remarks/>
        public EntityStateDTO[] EndRetrieveEntityStatesForProcess(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((EntityStateDTO[])(results[0]));
        }

        /// <remarks/>
        public void RetrieveEntityStatesForProcessAsync(int processID)
        {
            this.RetrieveEntityStatesForProcessAsync(processID, null);
        }

        /// <remarks/>
        public void RetrieveEntityStatesForProcessAsync(int processID, object userState)
        {
            if ((this.RetrieveEntityStatesForProcessOperationCompleted == null))
            {
                this.RetrieveEntityStatesForProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveEntityStatesForProcessOperationCompleted);
            }
            this.InvokeAsync("RetrieveEntityStatesForProcess", new object[] {
                    processID}, this.RetrieveEntityStatesForProcessOperationCompleted, userState);
        }

        private void OnRetrieveEntityStatesForProcessOperationCompleted(object arg)
        {
            if ((this.RetrieveEntityStatesForProcessCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveEntityStatesForProcessCompleted(this, new RetrieveEntityStatesForProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/AddEntityStateToProcess", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddEntityStateToProcess(int processID, EntityStateDTO entityState)
        {
            object[] results = this.Invoke("AddEntityStateToProcess", new object[] {
                    processID,
                    entityState});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddEntityStateToProcess(int processID, EntityStateDTO entityState, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddEntityStateToProcess", new object[] {
                    processID,
                    entityState}, callback, asyncState);
        }

        /// <remarks/>
        public int EndAddEntityStateToProcess(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void AddEntityStateToProcessAsync(int processID, EntityStateDTO entityState)
        {
            this.AddEntityStateToProcessAsync(processID, entityState, null);
        }

        /// <remarks/>
        public void AddEntityStateToProcessAsync(int processID, EntityStateDTO entityState, object userState)
        {
            if ((this.AddEntityStateToProcessOperationCompleted == null))
            {
                this.AddEntityStateToProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddEntityStateToProcessOperationCompleted);
            }
            this.InvokeAsync("AddEntityStateToProcess", new object[] {
                    processID,
                    entityState}, this.AddEntityStateToProcessOperationCompleted, userState);
        }

        private void OnAddEntityStateToProcessOperationCompleted(object arg)
        {
            if ((this.AddEntityStateToProcessCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddEntityStateToProcessCompleted(this, new AddEntityStateToProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RemoveEntityStateFromProcess", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveEntityStateFromProcess(int processID, int entityStateID)
        {
            this.Invoke("RemoveEntityStateFromProcess", new object[] {
                    processID,
                    entityStateID});
        }

        /// <remarks/>
        public System.IAsyncResult BeginRemoveEntityStateFromProcess(int processID, int entityStateID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RemoveEntityStateFromProcess", new object[] {
                    processID,
                    entityStateID}, callback, asyncState);
        }

        /// <remarks/>
        public void EndRemoveEntityStateFromProcess(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void RemoveEntityStateFromProcessAsync(int processID, int entityStateID)
        {
            this.RemoveEntityStateFromProcessAsync(processID, entityStateID, null);
        }

        /// <remarks/>
        public void RemoveEntityStateFromProcessAsync(int processID, int entityStateID, object userState)
        {
            if ((this.RemoveEntityStateFromProcessOperationCompleted == null))
            {
                this.RemoveEntityStateFromProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveEntityStateFromProcessOperationCompleted);
            }
            this.InvokeAsync("RemoveEntityStateFromProcess", new object[] {
                    processID,
                    entityStateID}, this.RemoveEntityStateFromProcessOperationCompleted, userState);
        }

        private void OnRemoveEntityStateFromProcessOperationCompleted(object arg)
        {
            if ((this.RemoveEntityStateFromProcessCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveEntityStateFromProcessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveCustomFieldsForProcess", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CustomFieldDTO[] RetrieveCustomFieldsForProcess(int processID)
        {
            object[] results = this.Invoke("RetrieveCustomFieldsForProcess", new object[] {
                    processID});
            return ((CustomFieldDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieveCustomFieldsForProcess(int processID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrieveCustomFieldsForProcess", new object[] {
                    processID}, callback, asyncState);
        }

        /// <remarks/>
        public CustomFieldDTO[] EndRetrieveCustomFieldsForProcess(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((CustomFieldDTO[])(results[0]));
        }

        /// <remarks/>
        public void RetrieveCustomFieldsForProcessAsync(int processID)
        {
            this.RetrieveCustomFieldsForProcessAsync(processID, null);
        }

        /// <remarks/>
        public void RetrieveCustomFieldsForProcessAsync(int processID, object userState)
        {
            if ((this.RetrieveCustomFieldsForProcessOperationCompleted == null))
            {
                this.RetrieveCustomFieldsForProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveCustomFieldsForProcessOperationCompleted);
            }
            this.InvokeAsync("RetrieveCustomFieldsForProcess", new object[] {
                    processID}, this.RetrieveCustomFieldsForProcessOperationCompleted, userState);
        }

        private void OnRetrieveCustomFieldsForProcessOperationCompleted(object arg)
        {
            if ((this.RetrieveCustomFieldsForProcessCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveCustomFieldsForProcessCompleted(this, new RetrieveCustomFieldsForProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/AddCustomFieldToProcess", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddCustomFieldToProcess(int processID, CustomFieldDTO customField)
        {
            object[] results = this.Invoke("AddCustomFieldToProcess", new object[] {
                    processID,
                    customField});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddCustomFieldToProcess(int processID, CustomFieldDTO customField, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddCustomFieldToProcess", new object[] {
                    processID,
                    customField}, callback, asyncState);
        }

        /// <remarks/>
        public int EndAddCustomFieldToProcess(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void AddCustomFieldToProcessAsync(int processID, CustomFieldDTO customField)
        {
            this.AddCustomFieldToProcessAsync(processID, customField, null);
        }

        /// <remarks/>
        public void AddCustomFieldToProcessAsync(int processID, CustomFieldDTO customField, object userState)
        {
            if ((this.AddCustomFieldToProcessOperationCompleted == null))
            {
                this.AddCustomFieldToProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCustomFieldToProcessOperationCompleted);
            }
            this.InvokeAsync("AddCustomFieldToProcess", new object[] {
                    processID,
                    customField}, this.AddCustomFieldToProcessOperationCompleted, userState);
        }

        private void OnAddCustomFieldToProcessOperationCompleted(object arg)
        {
            if ((this.AddCustomFieldToProcessCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCustomFieldToProcessCompleted(this, new AddCustomFieldToProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RemoveCustomFieldFromProcess", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveCustomFieldFromProcess(int processID, int customFieldID)
        {
            this.Invoke("RemoveCustomFieldFromProcess", new object[] {
                    processID,
                    customFieldID});
        }

        /// <remarks/>
        public System.IAsyncResult BeginRemoveCustomFieldFromProcess(int processID, int customFieldID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RemoveCustomFieldFromProcess", new object[] {
                    processID,
                    customFieldID}, callback, asyncState);
        }

        /// <remarks/>
        public void EndRemoveCustomFieldFromProcess(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void RemoveCustomFieldFromProcessAsync(int processID, int customFieldID)
        {
            this.RemoveCustomFieldFromProcessAsync(processID, customFieldID, null);
        }

        /// <remarks/>
        public void RemoveCustomFieldFromProcessAsync(int processID, int customFieldID, object userState)
        {
            if ((this.RemoveCustomFieldFromProcessOperationCompleted == null))
            {
                this.RemoveCustomFieldFromProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveCustomFieldFromProcessOperationCompleted);
            }
            this.InvokeAsync("RemoveCustomFieldFromProcess", new object[] {
                    processID,
                    customFieldID}, this.RemoveCustomFieldFromProcessOperationCompleted, userState);
        }

        private void OnRemoveCustomFieldFromProcessOperationCompleted(object arg)
        {
            if ((this.RemoveCustomFieldFromProcessCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveCustomFieldFromProcessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveTermsForProcess", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TermDTO[] RetrieveTermsForProcess(int processID)
        {
            object[] results = this.Invoke("RetrieveTermsForProcess", new object[] {
                    processID});
            return ((TermDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieveTermsForProcess(int processID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrieveTermsForProcess", new object[] {
                    processID}, callback, asyncState);
        }

        /// <remarks/>
        public TermDTO[] EndRetrieveTermsForProcess(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((TermDTO[])(results[0]));
        }

        /// <remarks/>
        public void RetrieveTermsForProcessAsync(int processID)
        {
            this.RetrieveTermsForProcessAsync(processID, null);
        }

        /// <remarks/>
        public void RetrieveTermsForProcessAsync(int processID, object userState)
        {
            if ((this.RetrieveTermsForProcessOperationCompleted == null))
            {
                this.RetrieveTermsForProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveTermsForProcessOperationCompleted);
            }
            this.InvokeAsync("RetrieveTermsForProcess", new object[] {
                    processID}, this.RetrieveTermsForProcessOperationCompleted, userState);
        }

        private void OnRetrieveTermsForProcessOperationCompleted(object arg)
        {
            if ((this.RetrieveTermsForProcessCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveTermsForProcessCompleted(this, new RetrieveTermsForProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/AddTermToProcess", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddTermToProcess(int processID, TermDTO term)
        {
            object[] results = this.Invoke("AddTermToProcess", new object[] {
                    processID,
                    term});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddTermToProcess(int processID, TermDTO term, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddTermToProcess", new object[] {
                    processID,
                    term}, callback, asyncState);
        }

        /// <remarks/>
        public int EndAddTermToProcess(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void AddTermToProcessAsync(int processID, TermDTO term)
        {
            this.AddTermToProcessAsync(processID, term, null);
        }

        /// <remarks/>
        public void AddTermToProcessAsync(int processID, TermDTO term, object userState)
        {
            if ((this.AddTermToProcessOperationCompleted == null))
            {
                this.AddTermToProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddTermToProcessOperationCompleted);
            }
            this.InvokeAsync("AddTermToProcess", new object[] {
                    processID,
                    term}, this.AddTermToProcessOperationCompleted, userState);
        }

        private void OnAddTermToProcessOperationCompleted(object arg)
        {
            if ((this.AddTermToProcessCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddTermToProcessCompleted(this, new AddTermToProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RemoveTermFromProcess", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveTermFromProcess(int processID, int termID)
        {
            this.Invoke("RemoveTermFromProcess", new object[] {
                    processID,
                    termID});
        }

        /// <remarks/>
        public System.IAsyncResult BeginRemoveTermFromProcess(int processID, int termID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RemoveTermFromProcess", new object[] {
                    processID,
                    termID}, callback, asyncState);
        }

        /// <remarks/>
        public void EndRemoveTermFromProcess(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void RemoveTermFromProcessAsync(int processID, int termID)
        {
            this.RemoveTermFromProcessAsync(processID, termID, null);
        }

        /// <remarks/>
        public void RemoveTermFromProcessAsync(int processID, int termID, object userState)
        {
            if ((this.RemoveTermFromProcessOperationCompleted == null))
            {
                this.RemoveTermFromProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveTermFromProcessOperationCompleted);
            }
            this.InvokeAsync("RemoveTermFromProcess", new object[] {
                    processID,
                    termID}, this.RemoveTermFromProcessOperationCompleted, userState);
        }

        private void OnRemoveTermFromProcessOperationCompleted(object arg)
        {
            if ((this.RemoveTermFromProcessCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveTermFromProcessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/GetByID", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProcessDTO GetByID(int id)
        {
            object[] results = this.Invoke("GetByID", new object[] {
                    id});
            return ((ProcessDTO)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetByID(int id, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetByID", new object[] {
                    id}, callback, asyncState);
        }

        /// <remarks/>
        public ProcessDTO EndGetByID(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ProcessDTO)(results[0]));
        }

        /// <remarks/>
        public void GetByIDAsync(int id)
        {
            this.GetByIDAsync(id, null);
        }

        /// <remarks/>
        public void GetByIDAsync(int id, object userState)
        {
            if ((this.GetByIDOperationCompleted == null))
            {
                this.GetByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetByIDOperationCompleted);
            }
            this.InvokeAsync("GetByID", new object[] {
                    id}, this.GetByIDOperationCompleted, userState);
        }

        private void OnGetByIDOperationCompleted(object arg)
        {
            if ((this.GetByIDCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetByIDCompleted(this, new GetByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/Create", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int Create(ProcessDTO entity)
        {
            object[] results = this.Invoke("Create", new object[] {
                    entity});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCreate(ProcessDTO entity, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Create", new object[] {
                    entity}, callback, asyncState);
        }

        /// <remarks/>
        public int EndCreate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void CreateAsync(ProcessDTO entity)
        {
            this.CreateAsync(entity, null);
        }

        /// <remarks/>
        public void CreateAsync(ProcessDTO entity, object userState)
        {
            if ((this.CreateOperationCompleted == null))
            {
                this.CreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOperationCompleted);
            }
            this.InvokeAsync("Create", new object[] {
                    entity}, this.CreateOperationCompleted, userState);
        }

        private void OnCreateOperationCompleted(object arg)
        {
            if ((this.CreateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateCompleted(this, new CreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/Update", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Update(ProcessDTO entity)
        {
            this.Invoke("Update", new object[] {
                    entity});
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdate(ProcessDTO entity, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Update", new object[] {
                    entity}, callback, asyncState);
        }

        /// <remarks/>
        public void EndUpdate(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void UpdateAsync(ProcessDTO entity)
        {
            this.UpdateAsync(entity, null);
        }

        /// <remarks/>
        public void UpdateAsync(ProcessDTO entity, object userState)
        {
            if ((this.UpdateOperationCompleted == null))
            {
                this.UpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateOperationCompleted);
            }
            this.InvokeAsync("Update", new object[] {
                    entity}, this.UpdateOperationCompleted, userState);
        }

        private void OnUpdateOperationCompleted(object arg)
        {
            if ((this.UpdateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/Delete", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Delete(int id)
        {
            this.Invoke("Delete", new object[] {
                    id});
        }

        /// <remarks/>
        public System.IAsyncResult BeginDelete(int id, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Delete", new object[] {
                    id}, callback, asyncState);
        }

        /// <remarks/>
        public void EndDelete(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void DeleteAsync(int id)
        {
            this.DeleteAsync(id, null);
        }

        /// <remarks/>
        public void DeleteAsync(int id, object userState)
        {
            if ((this.DeleteOperationCompleted == null))
            {
                this.DeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOperationCompleted);
            }
            this.InvokeAsync("Delete", new object[] {
                    id}, this.DeleteOperationCompleted, userState);
        }

        private void OnDeleteOperationCompleted(object arg)
        {
            if ((this.DeleteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveAll", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProcessDTO[] RetrieveAll()
        {
            object[] results = this.Invoke("RetrieveAll", new object[0]);
            return ((ProcessDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieveAll(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrieveAll", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public ProcessDTO[] EndRetrieveAll(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ProcessDTO[])(results[0]));
        }

        /// <remarks/>
        public void RetrieveAllAsync()
        {
            this.RetrieveAllAsync(null);
        }

        /// <remarks/>
        public void RetrieveAllAsync(object userState)
        {
            if ((this.RetrieveAllOperationCompleted == null))
            {
                this.RetrieveAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAllOperationCompleted);
            }
            this.InvokeAsync("RetrieveAll", new object[0], this.RetrieveAllOperationCompleted, userState);
        }

        private void OnRetrieveAllOperationCompleted(object arg)
        {
            if ((this.RetrieveAllCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAllCompleted(this, new RetrieveAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/Retrieve", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProcessDTO[] Retrieve(string hql, object[] parameters)
        {
            object[] results = this.Invoke("Retrieve", new object[] {
                    hql,
                    parameters});
            return ((ProcessDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieve(string hql, object[] parameters, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Retrieve", new object[] {
                    hql,
                    parameters}, callback, asyncState);
        }

        /// <remarks/>
        public ProcessDTO[] EndRetrieve(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ProcessDTO[])(results[0]));
        }

        /// <remarks/>
        public void RetrieveAsync(string hql, object[] parameters)
        {
            this.RetrieveAsync(hql, parameters, null);
        }

        /// <remarks/>
        public void RetrieveAsync(string hql, object[] parameters, object userState)
        {
            if ((this.RetrieveOperationCompleted == null))
            {
                this.RetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveOperationCompleted);
            }
            this.InvokeAsync("Retrieve", new object[] {
                    hql,
                    parameters}, this.RetrieveOperationCompleted, userState);
        }

        private void OnRetrieveOperationCompleted(object arg)
        {
            if ((this.RetrieveCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveCompleted(this, new RetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/GetIDs", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] GetIDs(string hql, object[] parameters)
        {
            object[] results = this.Invoke("GetIDs", new object[] {
                    hql,
                    parameters});
            return ((int[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetIDs(string hql, object[] parameters, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetIDs", new object[] {
                    hql,
                    parameters}, callback, asyncState);
        }

        /// <remarks/>
        public int[] EndGetIDs(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int[])(results[0]));
        }

        /// <remarks/>
        public void GetIDsAsync(string hql, object[] parameters)
        {
            this.GetIDsAsync(hql, parameters, null);
        }

        /// <remarks/>
        public void GetIDsAsync(string hql, object[] parameters, object userState)
        {
            if ((this.GetIDsOperationCompleted == null))
            {
                this.GetIDsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIDsOperationCompleted);
            }
            this.InvokeAsync("GetIDs", new object[] {
                    hql,
                    parameters}, this.GetIDsOperationCompleted, userState);
        }

        private void OnGetIDsOperationCompleted(object arg)
        {
            if ((this.GetIDsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIDsCompleted(this, new GetIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrievePage", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProcessDTO[] RetrievePage(string hql, int page, int pageSize, object[] parameters)
        {
            object[] results = this.Invoke("RetrievePage", new object[] {
                    hql,
                    page,
                    pageSize,
                    parameters});
            return ((ProcessDTO[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrievePage(string hql, int page, int pageSize, object[] parameters, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrievePage", new object[] {
                    hql,
                    page,
                    pageSize,
                    parameters}, callback, asyncState);
        }

        /// <remarks/>
        public ProcessDTO[] EndRetrievePage(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ProcessDTO[])(results[0]));
        }

        /// <remarks/>
        public void RetrievePageAsync(string hql, int page, int pageSize, object[] parameters)
        {
            this.RetrievePageAsync(hql, page, pageSize, parameters, null);
        }

        /// <remarks/>
        public void RetrievePageAsync(string hql, int page, int pageSize, object[] parameters, object userState)
        {
            if ((this.RetrievePageOperationCompleted == null))
            {
                this.RetrievePageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrievePageOperationCompleted);
            }
            this.InvokeAsync("RetrievePage", new object[] {
                    hql,
                    page,
                    pageSize,
                    parameters}, this.RetrievePageOperationCompleted, userState);
        }

        private void OnRetrievePageOperationCompleted(object arg)
        {
            if ((this.RetrievePageCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrievePageCompleted(this, new RetrievePageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://targetprocess.com/RetrieveCount", RequestNamespace = "http://targetprocess.com", ResponseNamespace = "http://targetprocess.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RetrieveCount(string hql, object[] parameters)
        {
            object[] results = this.Invoke("RetrieveCount", new object[] {
                    hql,
                    parameters});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRetrieveCount(string hql, object[] parameters, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RetrieveCount", new object[] {
                    hql,
                    parameters}, callback, asyncState);
        }

        /// <remarks/>
        public int EndRetrieveCount(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void RetrieveCountAsync(string hql, object[] parameters)
        {
            this.RetrieveCountAsync(hql, parameters, null);
        }

        /// <remarks/>
        public void RetrieveCountAsync(string hql, object[] parameters, object userState)
        {
            if ((this.RetrieveCountOperationCompleted == null))
            {
                this.RetrieveCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveCountOperationCompleted);
            }
            this.InvokeAsync("RetrieveCount", new object[] {
                    hql,
                    parameters}, this.RetrieveCountOperationCompleted, userState);
        }

        private void OnRetrieveCountOperationCompleted(object arg)
        {
            if ((this.RetrieveCountCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveCountCompleted(this, new RetrieveCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://targetprocess.com")]
    public partial class ProcessPracticeDTO : DataTransferObject
    {

        private System.Nullable<int> processPracticeIDField;

        private string settingsField;

        private System.Nullable<int> processIDField;

        private System.Nullable<int> practiceIDField;

        private string processNameField;

        private string practiceNameField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ProcessPracticeID
        {
            get
            {
                return this.processPracticeIDField;
            }
            set
            {
                this.processPracticeIDField = value;
            }
        }

        /// <remarks/>
        public string Settings
        {
            get
            {
                return this.settingsField;
            }
            set
            {
                this.settingsField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ProcessID
        {
            get
            {
                return this.processIDField;
            }
            set
            {
                this.processIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> PracticeID
        {
            get
            {
                return this.practiceIDField;
            }
            set
            {
                this.practiceIDField = value;
            }
        }

        /// <remarks/>
        public string ProcessName
        {
            get
            {
                return this.processNameField;
            }
            set
            {
                this.processNameField = value;
            }
        }

        /// <remarks/>
        public string PracticeName
        {
            get
            {
                return this.practiceNameField;
            }
            set
            {
                this.practiceNameField = value;
            }
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProcessDTO))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TermDTO))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CustomFieldDTO))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EntityStateDTO))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProcessPracticeDTO))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://targetprocess.com")]
    public abstract partial class DataTransferObject
    {

        private System.Nullable<int> idField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ID
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://targetprocess.com")]
    public partial class ProcessDTO : DataTransferObject
    {

        private System.Nullable<int> processIDField;

        private string nameField;

        private System.Nullable<bool> isDefaultField;

        private string descriptionField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ProcessID
        {
            get
            {
                return this.processIDField;
            }
            set
            {
                this.processIDField = value;
            }
        }

        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<bool> IsDefault
        {
            get
            {
                return this.isDefaultField;
            }
            set
            {
                this.isDefaultField = value;
            }
        }

        /// <remarks/>
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://targetprocess.com")]
    public partial class TermDTO : DataTransferObject
    {

        private System.Nullable<int> termIDField;

        private string wordKeyField;

        private string valueField;

        private System.Nullable<int> entityTypeIDField;

        private System.Nullable<int> processIDField;

        private string processNameField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> TermID
        {
            get
            {
                return this.termIDField;
            }
            set
            {
                this.termIDField = value;
            }
        }

        /// <remarks/>
        public string WordKey
        {
            get
            {
                return this.wordKeyField;
            }
            set
            {
                this.wordKeyField = value;
            }
        }

        /// <remarks/>
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> EntityTypeID
        {
            get
            {
                return this.entityTypeIDField;
            }
            set
            {
                this.entityTypeIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ProcessID
        {
            get
            {
                return this.processIDField;
            }
            set
            {
                this.processIDField = value;
            }
        }

        /// <remarks/>
        public string ProcessName
        {
            get
            {
                return this.processNameField;
            }
            set
            {
                this.processNameField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://targetprocess.com")]
    public partial class CustomFieldDTO : DataTransferObject
    {

        private System.Nullable<int> customFieldIDField;

        private string nameField;

        private string valueField;

        private string entityFieldNameField;

        private System.Nullable<bool> requiredField;

        private FieldTypeEnum fieldTypeField;

        private System.Nullable<bool> enabledForFilterField;

        private System.Nullable<int> processIDField;

        private string entityTypeNameField;

        private string processNameField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> CustomFieldID
        {
            get
            {
                return this.customFieldIDField;
            }
            set
            {
                this.customFieldIDField = value;
            }
        }

        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }

        /// <remarks/>
        public string EntityFieldName
        {
            get
            {
                return this.entityFieldNameField;
            }
            set
            {
                this.entityFieldNameField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<bool> Required
        {
            get
            {
                return this.requiredField;
            }
            set
            {
                this.requiredField = value;
            }
        }

        /// <remarks/>
        public FieldTypeEnum FieldType
        {
            get
            {
                return this.fieldTypeField;
            }
            set
            {
                this.fieldTypeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<bool> EnabledForFilter
        {
            get
            {
                return this.enabledForFilterField;
            }
            set
            {
                this.enabledForFilterField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ProcessID
        {
            get
            {
                return this.processIDField;
            }
            set
            {
                this.processIDField = value;
            }
        }

        /// <remarks/>
        public string EntityTypeName
        {
            get
            {
                return this.entityTypeNameField;
            }
            set
            {
                this.entityTypeNameField = value;
            }
        }

        /// <remarks/>
        public string ProcessName
        {
            get
            {
                return this.processNameField;
            }
            set
            {
                this.processNameField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://targetprocess.com")]
    public enum FieldTypeEnum
    {

        /// <remarks/>
        None,

        /// <remarks/>
        Text,

        /// <remarks/>
        DropDown,

        /// <remarks/>
        CheckBox,

        /// <remarks/>
        URL,

        /// <remarks/>
        Date,

        /// <remarks/>
        RichText,

        /// <remarks/>
        Number,

        /// <remarks/>
        Entity,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://targetprocess.com")]
    public partial class EntityStateDTO : DataTransferObject
    {

        private System.Nullable<int> entityStateIDField;

        private string nameField;

        private string nextStatesField;

        private System.Nullable<bool> initialField;

        private System.Nullable<bool> finalField;

        private System.Nullable<bool> requiredCommentField;

        private System.Nullable<int> processIDField;

        private System.Nullable<int> actorIDField;

        private string processNameField;

        private string entityTypeNameField;

        private string actorNameField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> EntityStateID
        {
            get
            {
                return this.entityStateIDField;
            }
            set
            {
                this.entityStateIDField = value;
            }
        }

        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        public string NextStates
        {
            get
            {
                return this.nextStatesField;
            }
            set
            {
                this.nextStatesField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<bool> Initial
        {
            get
            {
                return this.initialField;
            }
            set
            {
                this.initialField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<bool> Final
        {
            get
            {
                return this.finalField;
            }
            set
            {
                this.finalField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<bool> RequiredComment
        {
            get
            {
                return this.requiredCommentField;
            }
            set
            {
                this.requiredCommentField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ProcessID
        {
            get
            {
                return this.processIDField;
            }
            set
            {
                this.processIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public System.Nullable<int> ActorID
        {
            get
            {
                return this.actorIDField;
            }
            set
            {
                this.actorIDField = value;
            }
        }

        /// <remarks/>
        public string ProcessName
        {
            get
            {
                return this.processNameField;
            }
            set
            {
                this.processNameField = value;
            }
        }

        /// <remarks/>
        public string EntityTypeName
        {
            get
            {
                return this.entityTypeNameField;
            }
            set
            {
                this.entityTypeNameField = value;
            }
        }

        /// <remarks/>
        public string ActorName
        {
            get
            {
                return this.actorNameField;
            }
            set
            {
                this.actorNameField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveProcessPracticesForProcessCompletedEventHandler(object sender, RetrieveProcessPracticesForProcessCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveProcessPracticesForProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveProcessPracticesForProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ProcessPracticeDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ProcessPracticeDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddProcessPracticeToProcessCompletedEventHandler(object sender, AddProcessPracticeToProcessCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddProcessPracticeToProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddProcessPracticeToProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RemoveProcessPracticeFromProcessCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveEntityStatesForProcessCompletedEventHandler(object sender, RetrieveEntityStatesForProcessCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveEntityStatesForProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveEntityStatesForProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public EntityStateDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((EntityStateDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddEntityStateToProcessCompletedEventHandler(object sender, AddEntityStateToProcessCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddEntityStateToProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddEntityStateToProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RemoveEntityStateFromProcessCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveCustomFieldsForProcessCompletedEventHandler(object sender, RetrieveCustomFieldsForProcessCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveCustomFieldsForProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveCustomFieldsForProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public CustomFieldDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((CustomFieldDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddCustomFieldToProcessCompletedEventHandler(object sender, AddCustomFieldToProcessCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCustomFieldToProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddCustomFieldToProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RemoveCustomFieldFromProcessCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveTermsForProcessCompletedEventHandler(object sender, RetrieveTermsForProcessCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveTermsForProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveTermsForProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public TermDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((TermDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddTermToProcessCompletedEventHandler(object sender, AddTermToProcessCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddTermToProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddTermToProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RemoveTermFromProcessCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetByIDCompletedEventHandler(object sender, GetByIDCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ProcessDTO Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ProcessDTO)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateCompletedEventHandler(object sender, CreateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveAllCompletedEventHandler(object sender, RetrieveAllCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ProcessDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ProcessDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveCompletedEventHandler(object sender, RetrieveCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ProcessDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ProcessDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetIDsCompletedEventHandler(object sender, GetIDsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrievePageCompletedEventHandler(object sender, RetrievePageCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrievePageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrievePageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ProcessDTO[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ProcessDTO[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RetrieveCountCompletedEventHandler(object sender, RetrieveCountCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RetrieveCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}