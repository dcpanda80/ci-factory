<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://nant.sf.net/schemas/nant.xsd" name="Common">

  <foreach item="File" property="Tools.Canidate">
    <in>
      <items>
        <include name="${Common.Directory.Tools.Path}\**\*.exe"/>
        <include name="${Common.Directory.Tools.Path}\**\*.bat"/>
      </items>
    </in>
    <do>
      <property name="Tools.${path::get-file-name-without-extension(Tools.Canidate)}.Bin" value="${path::get-directory-name(Tools.Canidate)}"/>
      <property name="Tools.${path::get-file-name-without-extension(Tools.Canidate)}.Exe" value="${Tools.Canidate}"/>
    </do>
  </foreach>

  <function execute="${property::destroy('Tools.Canidate')}"/>

  <property name="Today" value="${datetime::get-month(datetime::now())}-${datetime::get-day(datetime::now())}-${datetime::get-year(datetime::now())}"/>
  <property name="Time" value="${datetime::get-hour(datetime::now())}.${datetime::get-minute(datetime::now())}.${datetime::get-second(datetime::now())}"/>
  <property name="Now" value="${Today} ${Time}"/>

  <property name="CCNet.Directory.Logs.Path" value="${CCNet.Server.Directory.Path}\${CCNetProject}\Artifacts\buildlogs" />
  <property name="CCNet.Directory.Logs.MessageFile.Path" value="${CCNet.Directory.Logs.Path}\LogMessages.txt"/>

  <property name="Common.Directory.Artifact.Name" value="${string::replace(CCNetBuildDate, '-', '')}${string::replace(CCNetBuildTime, ':', '')}"/>
  <echo message="The ArtifactFolderName is ${Common.Directory.Artifact.Name}"/>
  <property name="Common.Directory.Artifact.Path" value="${Common.Directory.ArtifactRoot.Path}\${Common.Directory.Artifact.Name}"/>

  <property name="Project.Directory.Transient.Path" value="${Common.Directory.Transient.Path}\${CCNetProject}"/>
  <property name="Project.Directory.Report.Path" value="${Project.Directory.Transient.Path}\Reports"/>
  <property name="Project.Directory.Temp.Path" value="${Project.Directory.Transient.Path}\Temp"/>

  <largeproperty name="NewLine">
    <value>
      <![CDATA[
]]>
    </value>
  </largeproperty>

  <property name="Common.EnvironmentVariables.RefId" value="Common.EnvironmentVariables" />

  <include buildfile="${Common.File.EnvironmentVariables.Path}" />

  <property name="Common.PropertiesFile" value="${Project.Directory.Temp.Path}\Properties.txt"/>
  <target name="Common.CreatePropertiesFile">
    <delete file="${Common.PropertiesFile}" if ="${file::exists(Common.PropertiesFile)}" />
    <property name="Compile.ConfigName" value="Debug" overwrite="false"/>
    <saveproperties file="${Common.PropertiesFile}" format="CommandLine" >
      <property name="CCNetBuildCondition"/>
      <property name="CCNetIntegrationStatus"/>
      <property name="CCNetLabel"/>
      <property name="CCNetLastIntegrationStatus"/>
      <property name="CCNetProject"/>
      <property name="CCNetBuildDate"/>
      <property name="CCNetBuildTime"/>
      <property name="CCNetArtifactDirectory"/>
      <property name="CCNetWorkingDirectory"/>
      <property name="BuildServerHostName"/>
      <property name="EmailHost"/>
      <property name="ProjectName"/>
      <property name="ProjectCodeLineName"/>
      <property name="Common.Directory.ProjectsRoot.Path"/>
      <property name="Common.Directory.ProjectRoot.Path"/>
      <property name="Common.Directory.CodeLine.Path"/>
      <property name="Common.Directory.Product.Path"/>
      <property name="Common.Directory.ThirdParty.Path"/>
      <property name="Common.Directory.Production.Path"/>
      <property name="Common.Directory.Build.Path"/>
      <property name="Common.Directory.Transient.Name"/>
      <property name="Common.Directory.Tools.Name" />

      <property name="Common.Directory.Product.Name"       />
      <property name="Common.Directory.ThirdParty.Name"    />
      <property name="Common.Directory.Production.Name"    />
      <property name="Common.Directory.Build.Name"         />
      <property name="Common.Directory.ArtifactRoot.Name"  />
      <property name="Common.Directory.Packages.Name"      />
      <property name="Common.Directory.UnitTest.Name"      />
      <property name="Common.Directory.Install.Name"       />
      <property name="Common.Directory.Transient.Path"/>
      <property name="Common.Directory.Tools.Path" />

      <property name="CCNet.Server.Directory.Path"/>
      <property name="CCNet.Dashboard.Directory.Path"/>
      <property name="CCNet.Server.Remoting.Port"/>
      <property name="CCNet.LabelPrefix"/>

      <property name="Compile.ConfigName"/>
      <property name="Common.Directory.ArtifactRoot.Path" value="${Common.Directory.ArtifactRoot.Path}"/>
      <property name="Tools.NAnt.Exe" value="${Tools.NAnt.Exe}"/>
      <property name="Common.Directory.Packages.Path" value="${Common.Directory.Packages.Path}"/>
      <property name="Common.Directory.Artifact.Path"/>
      <property name="Common.Directory.Artifact.Name"/>
      <property name="Project.Directory.Report.Path"/>
      <property name="Project.Directory.Temp.Path"/>
      <property name="Project.Directory.Transient.Path"/>
      <property name="Common.Directory.UnitTest.Path"/>
      <property name="Common.Directory.Install.Path"/>

      <property name="Today" />
      <property name="Time" />
      <property name="Now" />
    </saveproperties>
  </target>

  <target name="Common.SetUp">
    <mkdir dir="${path::get-directory-name(CCNetListenerFile)}" unless="${directory::exists(path::get-directory-name(CCNetListenerFile))}"/>
    <mkdir dir="${Common.Directory.Artifact.Path}" unless="${directory::exists(Common.Directory.Artifact.Path)}" verbose="true"/>

    <delete dir="${Project.Directory.Transient.Path}" if="${directory::exists(Project.Directory.Transient.Path)}"/>
    <mkdir dir="${Project.Directory.Transient.Path}"/>

    <delete dir="${Project.Directory.Report.Path}" if="${directory::exists(Project.Directory.Report.Path)}"/>
    <mkdir dir="${Project.Directory.Report.Path}"/>

    <delete dir="${Project.Directory.Temp.Path}" if="${directory::exists(Project.Directory.Temp.Path)}"/>
    <mkdir dir="${Project.Directory.Temp.Path}"/>

    <call target="Common.CreatePropertiesFile"/>
  </target>

  <target name="Common.WriteSetEnvBatchFile">
    <setenv>
      <environment refid="${Common.EnvironmentVariables.RefId}" />
    </setenv>

    <write file="${Common.Directory.Build.Path}\SetEnv.bat">
      <text expand="true" xml="false">
        <![CDATA[
SET ProjectName=${ProjectName}
SET ProjectCodeLineName=${ProjectCodeLineName}
SET Common.Directory.ProjectsRoot.Path=${Common.Directory.ProjectsRoot.Path}

SET Common.Directory.Product.Name=${Common.Directory.Product.Name}
SET Common.Directory.ThirdParty.Name=${Common.Directory.ThirdParty.Name}
SET Common.Directory.Production.Name=${Common.Directory.Production.Name}
SET Common.Directory.Build.Name=${Common.Directory.Build.Name}
SET Common.Directory.ArtifactRoot.Name=${Common.Directory.ArtifactRoot.Name}
SET Common.Directory.Packages.Name=${Common.Directory.Packages.Name}
SET Common.Directory.UnitTest.Name=${Common.Directory.UnitTest.Name}
SET Common.Directory.Install.Name=${Common.Directory.Install.Name}
SET Common.Directory.Transient.Name=${Common.Directory.Transient.Name}
SET Common.Directory.Tools.Name=${Common.Directory.Tools.Name}

SET Common.Directory.ProjectRoot.Path=${Common.Directory.ProjectRoot.Path}
SET Common.Directory.CodeLine.Path=${Common.Directory.CodeLine.Path}
SET Common.Directory.Product.Path=${Common.Directory.Product.Path}
SET Common.Directory.ThirdParty.Path=${Common.Directory.ThirdParty.Path}
SET Common.Directory.Production.Path=${Common.Directory.Production.Path}
SET Common.Directory.Build.Path=${Common.Directory.Build.Path}
SET Common.Directory.ArtifactRoot.Path=${Common.Directory.ArtifactRoot.Path}
SET Common.Directory.Packages.Path=${Common.Directory.Packages.Path}
SET Common.Directory.UnitTest.Path=${Common.Directory.UnitTest.Path}
SET Common.Directory.Install.Path=${Common.Directory.Install.Path}
SET Common.Directory.Transient.Path=${Common.Directory.Transient.Path}
SET Common.Directory.Tools.Path=${Common.Directory.Tools.Path}

SET PATH=${environment::get-variable('PATH')}
]]>
      </text>
    </write>
  </target>

  <!--
      Parameters
  <property name="Common.ShowReport.XmlFile" value=""/>
  <property name="Common.ShowReport.HtmlFile" value=""/>
  <property name="Common.ShowReport.XslFile" value=""/>
  <property name="Common.ShowReport.DetailsFilePath" value=""/>
  -->
  <target name="Common.ShowReport">
    <delete file="${Common.ShowReport.HtmlFile}" if="${file::exists(Common.ShowReport.HtmlFile)}" />
    <style in="${Common.ShowReport.XmlFile}" out="${Common.ShowReport.HtmlFile}" style="${Common.ShowReport.XslFile}"/>
    <loadfile property="Common.ShowReport.Body" file="${Common.ShowReport.HtmlFile}" />
    <largeproperty name="Common.ShowReport.Header">
      <value expand="true" xml="false">
        <![CDATA[<?xml version="1.0" encoding="utf-8"?>
<HTML>
  <HEAD>
              <title>Build Report</title>
              <link type="text/css" rel="stylesheet" href="file://${CCNet.Dashboard.Directory.Path}\cruisecontrol.css"/>
  </HEAD>
  <body>]]>
      </value>
    </largeproperty>
    <property name="Common.ShowReport.Footer" value="&lt;/body&gt;&lt;/HTML&gt;"/>
    <echo message="${Common.ShowReport.Header}${Common.ShowReport.Body}${Common.ShowReport.Footer}" file="${Common.ShowReport.HtmlFile}"/>

    <loopthrough property="Image">
      <items>
        <xmlquery
          file="${Common.ShowReport.HtmlFile}"
          query="//img/@src"
          />
      </items>
      <do>
        <xmlpoke
          file="${Common.ShowReport.HtmlFile}"
          xpath="//img[@src = '${Image}']/@src"
          value="file://${Common.Directory.Build.Path}/${Image}"
          />
      </do>
    </loopthrough>

    <if test="${file::exists(Common.ShowReport.DetailsFilePath)}">
      <loopthrough property="Image">
        <items>
          <xmlquery
            file="${Common.ShowReport.DetailsFilePath}"
            query="//img/@src"
            />
        </items>
        <do>
          <xmlpoke
            file="${Common.ShowReport.DetailsFilePath}"
            xpath="//img[@src = '${Image}']/@src"
            value="file://${Common.Directory.Build.Path}/${string::replace(string::replace(string::trim(Image), '&#xD;', ''), '&#xA;', '')}"
            />
        </do>
      </loopthrough>

      <xmlpoke
        file="${Common.ShowReport.HtmlFile}"
        xpath="//a[contains(@href, '/default.aspx?_action_')]/@href"
        value="file://${Common.ShowReport.DetailsFilePath}"
      />
    </if>

    <asyncexec program="cmd" commandline='/C "${Common.ShowReport.HtmlFile}"' createnowindow="false" redirectoutput="false" useshellexecute="true" waitforexit="false" />
  </target>

  <target name="Common.CreateCCTraySfx">
    <largeproperty name="SfxConfig.Content">
      <value expand="true" xml="false">
        <![CDATA[;The comment below contains SFX script commands

Path=cctray
SavePath
Setup=cmd /C copy "%ProgramFiles%\cctray\cctray.exe.lnk" "%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup\cctray.exe.lnk" /y
]]>
      </value>
    </largeproperty>

    <xmlquery query='/cruisecontrol/project/@name' file='${Common.Directory.Build.Path}\ccnetproject.xml' id='CCNetProjects' />
    <property name='CCTrayProjects' value=''/>

    <loopthrough property='CCNetProjectName'>
      <items>
        <xmlquery refid='CCNetProjects'/>
      </items>
      <do>
        <largeproperty name="CCTrayProjects">
          <value expand="true" xml="false">
            <![CDATA[${CCTrayProjects}
    <Project serverUrl="tcp://${BuildServerHostName}:${CCNet.Server.Remoting.Port}/CruiseManager.rem" projectName="${CCNetProjectName}" />]]>
          </value>
        </largeproperty>
      </do>
    </loopthrough>

    <property name="SfxConfig.FilePath" value="${Common.Directory.Build.Path}\SfxConfig.txt"/>
    <echo message="${SfxConfig.Content}" file="${SfxConfig.FilePath}"/>

    <largeproperty name="CCTraySettings.Content">
      <value expand="true" xml="false">
        <![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Projects>
    ${CCTrayProjects}
  </Projects>
  <PollPeriodSeconds>5</PollPeriodSeconds>
  <BuildTransitionNotification showBalloon="true">
    <Sound>
      <BrokenBuildSound>${environment::get-variable('ProgramFiles')}\cctray\broken.wav</BrokenBuildSound>
      <FixedBuildSound>${environment::get-variable('ProgramFiles')}\cctray\fixed.wav</FixedBuildSound>
      <StillFailingBuildSound>${environment::get-variable('ProgramFiles')}\cctray\still-failing.wav</StillFailingBuildSound>
      <StillSuccessfulBuildSound>${environment::get-variable('ProgramFiles')}\cctray\still-successful.wav</StillSuccessfulBuildSound>
    </Sound>
    <BalloonMessages>
      <BrokenBuildMessage>
        <Caption>Broken build</Caption>
        <Message>Recent checkins have broken the build</Message>
      </BrokenBuildMessage>
      <FixedBuildMessage>
        <Caption>Fixed build</Caption>
        <Message>Recent checkins have fixed the build</Message>
      </FixedBuildMessage>
      <StillFailingBuildMessage>
        <Caption>Build still failing</Caption>
        <Message>The build is still broken...</Message>
      </StillFailingBuildMessage>
      <StillSuccessfulBuildMessage>
        <Caption>Build successful</Caption>
        <Message>Yet another successful build!</Message>
      </StillSuccessfulBuildMessage>
    </BalloonMessages>
  </BuildTransitionNotification>
  <TrayIconDoubleClickAction>ShowStatusWindow</TrayIconDoubleClickAction>
  <Icons>
    <BrokenIcon />
    <BuildingIcon />
    <SuccessIcon />
    <NotConnectedIcon />
  </Icons>
</Configuration>]]>
      </value>
    </largeproperty>

    <property name="CCTraySettings.FileName" value="Settings.xml"/>
    <property name="CCTraySettings.FilePath" value="${Common.Directory.Build.Path}\${CCTraySettings.FileName}"/>
    <echo message="${CCTraySettings.Content}" file="${CCTraySettings.FilePath}"/>

    <property name="WinRarProgramPath" value="${environment::get-variable('ProgramFiles')}\winrar\winrar.exe" overwrite="false"/>
    <property name="CCTraySetupExe.FilePath" value="${CCNet.Dashboard.Directory.Path}\cctray\CCTraySetup.exe"/>

    <property name="CCTrayZip.FilePath" value="${CCNet.Dashboard.Directory.Path}\cctray\cctray.zip"/>
    <if test="${file::exists(CCTrayZip.FilePath)}">
      <delete file="${CCTraySetupExe.FilePath}" if="${file::exists(CCTraySetupExe.FilePath)}" />
      <exec program="${WinRarProgramPath}"
            commandline='s -ibck "${CCTrayZip.FilePath}" c -z"${SfxConfig.FilePath}"'
            workingdir='${Common.Directory.Build.Path}'
            verbose='true'/>
      <delete file='${CCTrayZip.FilePath}' if='${file::exists(CCTrayZip.FilePath)}' />
      <move file='${CCNet.Dashboard.Directory.Path}\cctray\cctray.exe' tofile='${CCTraySetupExe.FilePath}' />
    </if>

    <exec program="${WinRarProgramPath}"
				  commandline='u -ibck -r "${CCTraySetupExe.FilePath}" ${CCTraySettings.FileName} c -z"${SfxConfig.FilePath}" -sfx'
				  workingdir='${Common.Directory.Build.Path}'/>

    <delete file="${SfxConfig.FilePath}" />
    <delete file="${CCTraySettings.FilePath}" />
  </target>
</project>
