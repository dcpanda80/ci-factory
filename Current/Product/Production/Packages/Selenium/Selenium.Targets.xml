<?xml version="1.0" encoding="utf-8" ?>
<project xmlns="http://nant.sf.net/schemas/nant.xsd" name="Selenium">

  <stringadd refid="Personal.UpdateSource.Before.Target.List">
    <string value="Selenium.StopServer"/>
  </stringadd>

  <stringadd refid="Personal.UpdateSource.After.Target.List">
    <string value="Selenium.RestartServer"/>
  </stringadd>
  
  <target name="Selenium.RunTests">
    <trycatch>
      <try>
        <call target="Selenium.StartServer"/>
        <ant
          target="webtest.run"
          buildfile="${Ant.Build.File.Path}"
          logfile="${Ant.Log.Directory.Path}\webtest_log.xml"
        >
          <environment refid="${Common.EnvironmentVariables.RefId}"/>
          <args>
            <arg line="-Dcompile.debug=${Compile.Debug}"/>
          </args>
        </ant>
        <property name="Selenium.Failed" value="false"/>
      </try>
      <catch property="exception">
        <property name="Selenium.Failed" value="true"/>
      </catch>
      <finally>
        <call target="Selenium.StopServer"/>
      </finally>
    </trycatch>

    <copy
      file="${Common.Directory.Product.Path}\web-test-reports\WebTests.xml"
      todir="${Selenium.Reports.DirectoryPath}"
      if="${file::exists(Common.Directory.Product.Path + '\web-test-reports\WebTests.xml')}"
      verbose="true"
    />

    <copy
			file='${Selenium.Reports.DirectoryPath}\WebTests.xml'
			todir='${Common.Directory.Artifact.Path}'
			if="${Selenium.PublishXmlReport and file::exists(Selenium.Reports.DirectoryPath + '\WebTests.xml')}"
		/>

    <if test="${Selenium.Failed}">
      <fail message="Atleast one web test has failed!  Please see the web test section for more details..."/>
    </if>
  </target>

  <target name="Selenium.RestartServer">
    <call target="Selenium.StartServer" if="${Selenium.Status=='Started'}"/>
  </target>
  
  <target name="Selenium.StartServer">
    <call target="Selenium.GetServerStatus"/>
    <if test="${Selenium.Status == 'Stopped'}">
      <setenv>
        <environment refid="${Common.EnvironmentVariables.RefId}" />
      </setenv>
      <asyncexec
        createnowindow="true"
        redirectoutput="false"
        useshellexecute="true"
        waitforexit="false"
        program="cmd"
        workingdir="${Common.Directory.Packages.Path}\Selenium\Selenium RC"
    >
        <arg line="/C StartSeleniumServer.bat" />
        <arg line="-browserSessionReuse" if="${Selenium.BrowserSessionReuse}"/>
        <arg line="-port ${Selenium.Port}" />
        <arg line="-timeout ${Selenium.Timeout}"/>
      </asyncexec>
    </if>
  </target>
  
  <target name="Selenium.StopServer">
    <call target="Selenium.GetServerStatus"/>
    <if test="${Selenium.Status == 'Started'}">
      <trycatch>
        <try>
          <get
           src="http://localhost:${Selenium.Port}/selenium-server/driver/?cmd=shutDown"
           dest="${environment::get-variable('TEMP')}\selenium-shutdown.txt"
          />
          <loadfile file="${environment::get-variable('TEMP')}\selenium-shutdown.txt" property="Selenium.ShutdownResult" />
          <fail unless="${Selenium.ShutdownResult == 'OK'}" message="Failed to stop Selenium server, server returned: ${Selenium.ShutdownResult}."/>
        </try>
        <catch property="exception">
          <regex input="${exception}" pattern="(?'seleniumstatus'No connection could be made because the target machine actively refused it)" failonerror="false"/>
          <fail unless="${property::exists('seleniumstatus')}" message="${exception}"/>
        </catch>
      </trycatch>
    </if>
  </target>

  <target name="Selenium.GetServerStatus">
    <trycatch>
      <try>
        <get
         src="http://localhost:${Selenium.Port}/selenium-server/driver/?cmd=getLogMessages"
         dest="${environment::get-variable('TEMP')}\selenium-status.txt"
        />
        <loadfile file="${environment::get-variable('TEMP')}\selenium-status.txt" property="Selenium.Status" />
        <ifthenelse test="${string::starts-with(Selenium.Status,'OK')}">
          <then>
            <property name="Selenium.Status" value="Started"/>
          </then>
          <else>
            <property name="Selenium.Status" value="Stopped"/>
          </else>
        </ifthenelse>
      </try>
      <catch>
        <property name="Selenium.Status" value="Stopped"/>
      </catch>
    </trycatch>
  </target>

  <target name="Selenium.ShowReport">
    <property name="Common.ShowReport.XmlFile" value="${Selenium.Reports.DirectoryPath}\webtests.xml"/>
    <property name="Common.ShowReport.HtmlFile" value="${Selenium.Reports.DirectoryPath}\WebTestReport.html"/>
    <property name="Common.ShowReport.XslFile" value="${Common.Directory.Packages.Path}\Selenium\SeleniumDetails.xsl"/>
    <property name="Common.ShowReport.DetailsFilePath" value=""/>

    <call target="Common.ShowReport"/>
  </target>

  <target name="Selenium.SetUp">
    <delete dir="${Selenium.Reports.DirectoryPath}" if="${directory::exists(Selenium.Reports.DirectoryPath)}" verbose="true"/>
    <mkdir dir="${Selenium.Reports.DirectoryPath}" verbose="true"/>
  </target>

  <target name="Selenium.TearDown">

  </target>
  
</project>
