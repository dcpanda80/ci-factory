<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://nant.sf.net/schemas/nant.xsd" name="UnitTest">

  <fileset id="UnitTest.TestAssemblies" />

  <target name="Private.UnitTest.FindTestAssemblies">
    <foreach item="File" property="UnitTest.ProjectFile.Path">
      <in>
        <items refid="UnitTest.ProjectFiles" />
      </in>
      <do>
        <property name="UniTestAssemblyName" value="${vsproject::get-assemblyname(UnitTest.ProjectFile.Path)}"/>
        <property name="UniTestAssemblyPath" value="${vsproject::get-output-directory(UnitTest.ProjectFile.Path, Compile.ConfigName)}\${UniTestAssemblyName}.dll"/>
        <function execute="${fileset::include-add('UnitTest.TestAssemblies', UniTestAssemblyPath)}" />>
      </do>
    </foreach>

    <if test="${fileset::file-count('UnitTest.TestAssemblies') == 0}">
      <call target="UnitTest.FindTestAssemblies"/>
    </if>
  </target>

  <target name="Private.UnitTest.WriteConfigFile">
    <write append="false" file="${NUnit.ProjectFilePath}">
      <text expand="true" xml="false">
        <![CDATA[<NUnitProject>
          <Settings activeconfig="Debug" />
          <Config name="Debug" configfile="${ProjectName}UnitTest.config" binpathtype="Auto">
]]>
      </text>
    </write>

    <foreach item="File" property="UnitTestAssemblyPath">
      <in>
        <items refid="UnitTest.TestAssemblies" />
      </in>
      <do>
        <property name="UniTestAssemblyPath" value="${string::replace(UnitTestAssemblyPath, Common.Directory.Product.Path + '\', '')}" />
        <write append="true" file="${NUnit.ProjectFilePath}">
          <text expand="true" xml="true">
            <assembly path="${UniTestAssemblyPath}" />

          </text>
        </write>
      </do>
    </foreach>

    <write append="true" file="${NUnit.ProjectFilePath}">
      <text expand="true" xml="false">
        <![CDATA[
</Config>
      </NUnitProject>]]>
      </text>
    </write>
  </target>

  <target name="Private.UnitTest.EnsureConfigFileExists">
    <ifnot test="${file::exists(NUnit.ProjectConfigFilePath)}">
      <write append="false" file="${NUnit.ProjectConfigFilePath}">
        <text expand="false" xml="false">
          <![CDATA[<?xml version="1.0" encoding="utf-8"?>
<configuration>
</configuration>]]>
        </text>
      </write>
    </ifnot>
  </target>

  <target name="UnitTest.RunTests">
    <call target="Private.UnitTest.FindTestAssemblies"/>
    <call target="Private.UnitTest.WriteConfigFile"/>
    <call target="Private.UnitTest.EnsureConfigFileExists" />

    <property name="UnitTest.ReportFilePath" value="${UnitTest.ReportFolder}\${UnitTest.BaseReportFileName}"/>
    <exec program="${NUnit.ConsolePath}"
					resultproperty="NUnit.ExitErrorLevel"
					verbose="true">
      <arg line='/xml:"${UnitTest.ReportFilePath}"' />
      <arg line='"${NUnit.ProjectFilePath}"' />
      <arg line='/noshadow' />
    </exec>
  </target>

  <target name="UnitTest.FindTestAssemblies">
    <fileset id="UnitTest.TestAssemblies" >
      <include name="${Common.Directory.UnitTest.Path}\**\bin\${UnitTest.TestAssemblyFormat}" />
      <include name="${Common.Directory.UnitTest.Path}\**\bin\${Compile.ConfigName}\${UnitTest.TestAssemblyFormat}" />
    </fileset>
  </target>

  <target name="UnitTest.ShowReport">
    <property name="Common.ShowReport.XmlFile" value="${UnitTest.ReportFolder}\${UnitTest.BaseReportFileName}"/>
    <property name="Common.ShowReport.HtmlFile" value="${UnitTest.ReportFolder}\TestReport.html"/>
    <property name="Common.ShowReport.XslFile" value="${Common.Directory.Build.Path}\Packages\DotNetUnitTest\NUnitSummary.xsl"/>
    <property name="Common.ShowReport.DetailsFilePath" value=""/>
    <call target="Common.ShowReport"/>
  </target>

  <target name="UnitTest.SetUp">
    <delete dir="${UnitTest.ReportFolder}" if="${directory::exists(UnitTest.ReportFolder)}" />
    <mkdir dir="${UnitTest.ReportFolder}"/>
  </target>

  <target name="UnitTest.TearDown">

  </target>

</project>
