<?xml version="1.0" encoding="utf-8" ?>
<project xmlns="http://nant.sf.net/schemas/nant.xsd" name="VSTSVersionControl.Target" >

  <ifthenelse test="${file::exists('Packages\VSTSVersionControl\bin\TF.Tasks.dll')}">
    <then>
      <property name="TFS.Task" value="Packages\VSTSVersionControl\bin\TF.Tasks.dll"/>
    </then>
    <elseif if="${file::exists(Common.Directory.Packages.Path + '\VSTSVersionControl\bin\TF.Tasks.dll')}">
      <property name="TFS.Task" value="${Common.Directory.Packages.Path}\VSTSVersionControl\bin\TF.Tasks.dll"/>
    </elseif>
    <else>
      <fail message="Can not find ...Packages\VSTSVersionControl\bin\TF.Tasks.dll!"/>
    </else>
  </ifthenelse>

  <loadtasks assembly="${TFS.Task}" />

  <target name="SourceControl.CleanGetFromChangeSetThirdPartyDirectory" >
		<if test="${not property::exists('SourceControl.GetFromChangeSet') or SourceControl.GetFromChangeSet == ''}">
			<property name="SourceControl.GetFromChangeSet" value="${CCNetVSTSChangeSetId}"/>
		</if>

		<echo message="Getting ${Common.Directory.ThirdParty.Path} from changeset ${SourceControl.GetFromChangeSet}" />

		<property name="Private.SourceControl.Update.LocalPath" value="${Common.Directory.ThirdParty.Path}"/>
		<property name="SourceControl.Update.All" value="true"/>

		<property name="SourceControl.Update.versionspec" value="SourceControl.GetFromChangeSet"/>
		<versionspec id="${SourceControl.Update.versionspec}" type="Changeset" versionspec="${SourceControl.GetFromChangeSet}"/>

		<call target="Private.SourceControl.CleanUpdate"/>
	</target>

	<target name="SourceControl.GetFromChangeSetThirdPartyDirectory" >
		<if test="${not property::exists('SourceControl.GetFromChangeSet') or SourceControl.GetFromChangeSet == ''}">
			<property name="SourceControl.GetFromChangeSet" value="${CCNetVSTSChangeSetId}"/>
		</if>

		<echo message="Getting ${Common.Directory.ThirdParty.Path} from changeset ${SourceControl.GetFromChangeSet}" />

		<property name="Private.SourceControl.Update.LocalPath" value="${Common.Directory.ThirdParty.Path}"/>
		<property name="SourceControl.Update.All" value="false"/>

		<property name="SourceControl.Update.versionspec" value="SourceControl.GetFromChangeSet"/>
		<versionspec id="${SourceControl.Update.versionspec}" type="Changeset" versionspec="${SourceControl.GetFromChangeSet}"/>

		<call target="Private.SourceControl.Update"/>
	</target>

	<target name="SourceControl.CleanGetFromLabelOfThirdPartyDirectory" >
		<property name="Private.SourceControl.Update.LocalPath" value="${Common.Directory.ThirdParty.Path}"/>
		<property name="SourceControl.Update.All" value="true"/>

		<property name="SourceControl.Update.versionspec" value="SourceControl.CleanGetFromLabel"/>
		<versionspec id="${SourceControl.Update.versionspec}" type="Label" versionspec="${SourceControl.GetFromLabel}"/>

		<call target="Private.SourceControl.CleanUpdate"/>
	</target>

	<target name="SourceControl.CleanGetOf.Common.Directory.ThirdParty.Path" >
		<property name="Private.SourceControl.Update.LocalPath" value="${Common.Directory.ThirdParty.Path}"/>
		<property name="SourceControl.Update.versionspec" value=""/>
		<property name="SourceControl.Update.All" value="true"/>
		<call target="Private.SourceControl.CleanUpdate"/>
	</target>

	<target name="SourceControl.GetOf.Common.Directory.ThirdParty.Path" >
		<property name="Private.SourceControl.Update.LocalPath" value="${Common.Directory.ThirdParty.Path}"/>
		<property name="SourceControl.Update.versionspec" value=""/>
		<property name="SourceControl.Update.All" value="false"/>
		<call target="Private.SourceControl.Update"/>
	</target>

	<!--<property name="SourceControl.ShowChanges.FromLabel" value=""/>
  <property name="SourceControl.ShowChanges.ToLabel" value=""/>-->
	<target name="SourceControl.ShowChangesBetweenLabelsBuild">
		<property name="Private.SourceControl.ConvertLocalPathToPath.LocalPath" value="${Common.Directory.ThirdParty.Path}"/>
    <call target="Private.SourceControl.ConvertLocalPathToPath"/>

    <property name="SourceControl.ShowChangesLabelBased.Path" value="${Private.SourceControl.ConvertLocalPathToPath.Path}"/>
    <property name="SourceControl.ShowChangesLabelBased.FromLabel" value="${SourceControl.ShowChanges.FromLabel}"/>
    <property name="SourceControl.ShowChangesLabelBased.ToLabel" value="${SourceControl.ShowChanges.ToLabel}"/>
    <property name="SourceControl.ShowChangesLabelBased.Output" value="${Private.TFS.ReportDirectory}\ThirdPartyChanges.xml"/>

    <call target="SourceControl.ShowChangesLabelBased"/>

    <property name="Private.SourceControl.ConvertLocalPathToPath.LocalPath" value="${Common.Directory.Product.Path}"/>
    <call target="Private.SourceControl.ConvertLocalPathToPath"/>

    <property name="SourceControl.ShowChangesLabelBased.Path" value="${Private.SourceControl.ConvertLocalPathToPath.Path}"/>
    <property name="SourceControl.ShowChangesLabelBased.Output" value="${Private.TFS.ReportDirectory}\ProductChanges.xml"/>

    <call target="SourceControl.ShowChangesLabelBased"/>
  </target>

  <!--
  <property name="SourceControl.ShowChangesLabelBased.Path" value=""/>
  <property name="SourceControl.ShowChangesLabelBased.FromLabel" value=""/>
  <property name="SourceControl.ShowChangesLabelBased.ToLabel" value=""/>
  <property name="SourceControl.ShowChangesLabelBased.Output" value=""/>
  -->
  <target name="SourceControl.ShowChangesLabelBased">
    <tfshistory itemspec="${SourceControl.ShowChangesLabelBased.Path}" recursive="true" reportfile="${SourceControl.ShowChangesLabelBased.Output}" >
      <tfsserverconnection refid="${TFS.Info}"/>
      <fromversionspec type="Label" versionspec="${SourceControl.ShowChangesLabelBased.FromLabel}"/>
      <toversionspec type="Label" versionspec="${SourceControl.ShowChangesLabelBased.ToLabel}"/>
    </tfshistory>
  </target>

  <target name="SourceControl.ShowChangesSinceLastBuild">
    <property name="Private.SourceControl.ConvertLocalPathToPath.LocalPath" value="${Common.Directory.ThirdParty.Path}"/>
    <call target="Private.SourceControl.ConvertLocalPathToPath"/>

    <property name="SourceControl.ShowChangesTimeBased.Path" value="${Private.SourceControl.ConvertLocalPathToPath.Path}"/>
    <property name="SourceControl.ShowChangesTimeBased.FromDate" value="${TFS.LastBuildTime}"/>
    <property name="SourceControl.ShowChangesTimeBased.ToDate" value="${datetime::now()}"/>
    <property name="SourceControl.ShowChangesTimeBased.Output" value="${Private.TFS.ReportDirectory}\ThirdPartyChanges.xml"/>

    <call target="SourceControl.ShowChangesTimeBased"/>

    <property name="Private.SourceControl.ConvertLocalPathToPath.LocalPath" value="${Common.Directory.Product.Path}"/>
    <call target="Private.SourceControl.ConvertLocalPathToPath"/>

    <property name="SourceControl.ShowChangesTimeBased.Path" value="${Private.SourceControl.ConvertLocalPathToPath.Path}"/>
    <property name="SourceControl.ShowChangesTimeBased.Output" value="${Private.TFS.ReportDirectory}\ProductChanges.xml"/>

    <call target="SourceControl.ShowChangesTimeBased"/>
  </target>

  <!--
  <property name="SourceControl.ShowChangesTimeBased.Path" value=""/>
  <property name="SourceControl.ShowChangesTimeBased.FromDate" value=""/>
  <property name="SourceControl.ShowChangesTimeBased.ToDate" value=""/>
  <property name="SourceControl.ShowChangesTimeBased.Output" value=""/>
  -->
  <target name="SourceControl.ShowChangesTimeBased">
    <tfshistory itemspec="${SourceControl.ShowChangesTimeBased.Path}" recursive="true" reportfile="${SourceControl.ShowChangesTimeBased.Output}" >
      <tfsserverconnection refid="${TFS.Info}"/>
      <fromversionspec type="Date" versionspec="${SourceControl.ShowChangesTimeBased.FromDate}"/>
      <toversionspec type="Date" versionspec="${SourceControl.ShowChangesTimeBased.ToDate}"/>
    </tfshistory>
  </target>

  <target name="SourceControl.CleanGetOf.Common.Directory.Product.Path" >
		<property name="Private.SourceControl.Update.LocalPath" value="${Common.Directory.Product.Path}"/>
		<property name="SourceControl.Update.versionspec" value=""/>
		<property name="SourceControl.Update.All" value="true"/>
		<call target="Private.SourceControl.CleanUpdate"/>
	</target>

	<target name="SourceControl.GetOf.Common.Directory.Product.Path" >
		<property name="Private.SourceControl.Update.LocalPath" value="${Common.Directory.Product.Path}"/>
		<property name="SourceControl.Update.versionspec" value=""/>
		<property name="SourceControl.Update.All" value="false"/>
		<call target="Private.SourceControl.Update"/>
	</target>

	<target name="SourceControl.CleanGetFromChangeSetCommon.Directory.Product.Path" >
		<if test="${not property::exists('SourceControl.GetFromChangeSet') or SourceControl.GetFromChangeSet == ''}">
			<property name="SourceControl.GetFromChangeSet" value="${CCNetVSTSChangeSetId}"/>
		</if>

		<echo message="Getting ${Common.Directory.Product.Path} from changeset ${SourceControl.GetFromChangeSet}" />

		<property name="Private.SourceControl.Update.LocalPath" value="${Common.Directory.Product.Path}"/>
		<property name="SourceControl.Update.All" value="true"/>

		<property name="SourceControl.Update.versionspec" value="SourceControl.GetFromChangeSet"/>
		<versionspec id="${SourceControl.Update.versionspec}" type="Changeset" versionspec="${SourceControl.GetFromChangeSet}"/>

		<call target="Private.SourceControl.CleanUpdate"/>
	</target>

	<target name="SourceControl.GetFromChangeSetCommon.Directory.Product.Path" >
		<if test="${not property::exists('SourceControl.GetFromChangeSet') or SourceControl.GetFromChangeSet == ''}">
			<property name="SourceControl.GetFromChangeSet" value="${CCNetVSTSChangeSetId}"/>
		</if>

		<echo message="Getting ${Common.Directory.Product.Path} from changeset ${SourceControl.GetFromChangeSet}" />

		<property name="Private.SourceControl.Update.LocalPath" value="${Common.Directory.Product.Path}"/>
		<property name="SourceControl.Update.All" value="false"/>

		<property name="SourceControl.Update.versionspec" value="SourceControl.GetFromChangeSet"/>
		<versionspec id="${SourceControl.Update.versionspec}" type="Changeset" versionspec="${SourceControl.GetFromChangeSet}"/>
		
		<call target="Private.SourceControl.Update"/>
	</target>

	<!-- Needed for SourceControl.CleanGetFromLabelofCommon.Directory.Product.Path
  <property name="SourceControl.GetFromLabel" value=""/>
  -->

  <target name="SourceControl.CleanGetFromLabelOfCommon.Directory.Product.Path">
		<property name="Private.SourceControl.Update.LocalPath" value="${Common.Directory.Product.Path}"/>
		<property name="SourceControl.Update.All" value="true"/>
		
		<property name="SourceControl.Update.versionspec" value="SourceControl.CleanGetFromLabel"/>
		<versionspec id="${SourceControl.Update.versionspec}" type="Label" versionspec="${SourceControl.GetFromLabel}"/>
		
		<call target="Private.SourceControl.CleanUpdate"/>
  </target>

  <target name="SourceControl.GetOf.CodeLineDirectory" >
		<property name="Private.SourceControl.Update.LocalPath" value="${Common.Directory.CodeLine.Path}"/>
		<property name="SourceControl.Update.versionspec" value=""/>
		<property name="SourceControl.Update.All" value="false"/>
		<call target="Private.SourceControl.Update"/>
  </target>


	<target name="Private.SourceControl.CleanUpdate">
		<property name="Private.SourceControl.DeleteDirectory.Directory" value="${Private.SourceControl.Update.LocalPath}"/>
		<call target="Private.SourceControl.DeleteDirectory"/>

		<call target="Private.SourceControl.Update"/>
	 </target>

	<!--
  <property name="Private.SourceControl.Update.LocalPath" value=""/>
  <property name="SourceControl.Update.ReplaceWritableFiles" value="False"/>
	<property name="SourceControl.Update.versionspec" value=""/>
	 <property name="SourceControl.Update.All" value="true"/>
	 -->

	<target name="Private.SourceControl.Update">
		<call target="Private.SourceControl.EnsureWorkspace"/>
		<tfsmapworkspace workspacename="${TFS.WorkspaceName}">
			<tfsserverconnection refid="${TFS.Info}"/>
			<mappings>
				<mapping localitem="${Private.SourceControl.Update.LocalPath}" serveritem="${sourcecontrol::convertlocaltoserver(Private.SourceControl.Update.LocalPath)}"/>
			</mappings>
		</tfsmapworkspace>

		<if test="${property::exists('SourceControl.Update.versionspec') == false or SourceControl.Update.versionspec == ''}">
			<property name="SourceControl.Update.versionspec" value="SourceControl.Update.versionspec"/>
		</if>
		
		<tfsget verbose="true" 
						serveritem="${sourcecontrol::convertlocaltoserver(Private.SourceControl.Update.LocalPath)}"
						recursive="true"
						isinteractive="${SourceControl.Update.Interactive}"
						all="${SourceControl.Update.All}" 
						overwrite="${SourceControl.Update.ReplaceWritableFiles}"
						workspacename="${TFS.WorkspaceName}" >
			<tfsserverconnection refid="${TFS.Info}"/>
			<versionspec refid="${SourceControl.Update.versionspec}" />
		</tfsget>
	 </target>
	
  <!-- Params for SourceControl.Relabel
  <property name="SourceControl.Relabel.OldLabel" value=""/>
  <property name="SourceControl.Relabel.NewLabel" value=""/>
  <property name="SourceControl.Relabel.Path" value=""/>
  -->
  <target name="SourceControl.Relabel">
    <call target="Private.SourceControl.EnsureWorkspace"/>
    <tfslabel 
          comment="Relabeled by Build ${ProjectName}, was ${SourceControl.Relabel.OldLabel}"
          itemspec="${SourceControl.Relabel.Path}" 
          labelname="${SourceControl.Relabel.NewLabel}"
          recursive="true" 
          scope="${TFS.LabelScope}" >
      <tfsserverconnection refid="${TFS.Info}"/>
      <versionspec type="Label" versionspec="${SourceControl.Relabel.OldLabel}"/>
    </tfslabel>
  </target>

  <!--
  The following properties should be specified in the calling script.
  
  <property name="SourceControl.CheckOut.File" value="${Private.Versioning.AssemblyInfoFile}"/>
  -->
  <target name="SourceControl.CheckOut">
    <call target="Private.SourceControl.EnsureWorkspace"/>
    <tfscheckout localitem="${SourceControl.CheckOut.File}" workspacename="${TFS.WorkspaceName}" >
      <tfsserverconnection refid="${TFS.Info}"/>
    </tfscheckout>
  </target>

  <!--
  The following properties should be specified in the calling script.
  
  <property name="SourceControl.CheckIn.File" value="${Private.Versioning.AssemblyInfoFile}"/>
  -->
  <target name="SourceControl.CheckIn">
    <call target="Private.SourceControl.EnsureWorkspace"/>
    <tfscheckin localitem="${SourceControl.CheckIn.File}" workspacename="${TFS.WorkspaceName}" >
      <tfsserverconnection refid="${TFS.Info}"/>
    </tfscheckin>
  </target>

  <!-- Needed for Private.SourceControl.ConvertLocalPathToPath
  <property name="Private.SourceControl.ConvertLocalPathToPath.LocalPath" value=""/>
  -->
  <!-- Returned by Private.SourceControl.ConvertLocalPathToPath
  <property name="Private.SourceControl.ConvertLocalPathToPath.Path" value=""/>
  -->
  <target name="Private.SourceControl.ConvertLocalPathToPath">
    <property name="Private.SourceControl.ConvertLocalPathToPath.Path" value="${sourcecontrol::convertlocaltoserver(Private.SourceControl.ConvertLocalPathToPath.LocalPath)}"/>
  </target>
  
  <!-- Needed for Private.SourceControl.DeleteDirectory
  <property name="Private.SourceControl.DeleteDirectory.Directory" value=""/>
  -->

  <target name="Private.SourceControl.DeleteDirectory">
    <if test="${directory::exists(Private.SourceControl.DeleteDirectory.Directory)}" >
      <attrib readonly="false">
        <fileset>
          <include name="${Private.SourceControl.DeleteDirectory.Directory}\*" />
        </fileset>
      </attrib>

      <trycatch>
        <try>
          <delete dir="${Private.SourceControl.DeleteDirectory.Directory}"/>
        </try>
        <catch>
          <exec program="cmd" commandline='/C "rmdir /S /Q "${Private.SourceControl.DeleteDirectory.Directory}""' />
        </catch>
      </trycatch>
    </if>
  </target>
  
  <script language="C#" prefix="sourcecontrol">
    <code>
      <![CDATA[                 
					
          [Function("convertlocaltoserver")]
					public string ConvertLocalToServer(string local)
          {
            String server = local.Replace(this.Project.Properties["Common.Directory.ProjectsRoot.Path"], "");
            server = server.Replace(@"\", @"/");
            return String.Format(@"{0}{1}", this.Project.Properties["TFS.ServerPathPrefix"], server);
          }
          
			]]>
    </code>
  </script>

  <target name="Private.SourceControl.EnsureWorkspace">
    <ifnot test="${tfs-vc::workspace-exists(TFS.Info, TFS.WorkspaceName)}">
      <property name="TFS.Workspace.Found" value="false"/>
      <trycatch>
        <try>
          <property name="TFS.WorkspaceName" value="${tfs-vc::get-workspace-name(TFS.Info, Common.Directory.CodeLine.Path)}"/>
          <property name="TFS.Workspace.Found" value="true"/>
        </try>
        <catch/>
      </trycatch>

      <ifnot test="${TFS.Workspace.Found}">
        <tfsmapworkspace workspacename="${TFS.WorkspaceName}" comment="Created By build ${CCNetProject}" >
          <tfsserverconnection refid="${TFS.Info}"/>
          <mappings>
            <mapping localitem="${Common.Directory.CodeLine.Path}" serveritem="${sourcecontrol::convertlocaltoserver(Common.Directory.CodeLine.Path)}"/>
          </mappings>
        </tfsmapworkspace>
      </ifnot>
    </ifnot>
  </target>

  <target name="SourceControl.SetUp">
    <property name="Private.TFS.CacheFile" value="CacheFile.xml"/>
    <property name="Private.TFS.ReportDirectory" value="${Common.Directory.Build.Path}\TFS" overwrite="false"/>

    <include buildfile="${Private.TFS.ReportDirectory}\${Private.TFS.CacheFile}" if="${file::exists(Private.TFS.ReportDirectory + '\' + Private.TFS.CacheFile)}" failonerror="false"/>
    <property name="TFS.LastBuildTime" value="${CCNetBuildDate} ${CCNetBuildTime}" overwrite="false"/>

    <regex pattern="(?'StaticLabelPart'.*\.)(?'BuildNumber'\d+)$" input="${CCNetLabel}"/>
    <property name="TFS.LastBuildLabel" value="${StaticLabelPart}${int::parse(BuildNumber) - 1}"/>

    <mkdir dir="${Private.TFS.ReportDirectory}" unless="${directory::exists(Private.TFS.ReportDirectory)}" />
    <delete>
      <fileset>
        <include name="${Private.TFS.ReportDirectory}\*.*"/>
        <exclude name="${Private.TFS.ReportDirectory}\${Private.TFS.CacheFile}"/>
      </fileset>
    </delete>

    <saveproperties format="Include" file="${Private.TFS.ReportDirectory}\${Private.TFS.CacheFile}">
      <property name="TFS.LastBuildTime" value="${CCNetBuildDate} ${CCNetBuildTime}"/>
    </saveproperties>
  </target>

  <target name="SourceControl.TearDown">

  </target>

  <target name="SourceControl.Repository.Load">
    <property name="TFS.Workspace.Found" value="false"/>
    <trycatch>
      <try>
        <property name="TFS.WorkspaceName" value="${tfs-vc::get-workspace-name(TFS.Info, Common.Directory.ProjectRoot.Path)}"/>
        <property name="TFS.Workspace.Found" value="true"/>
      </try>
      <catch/>
    </trycatch>

    <tfsmapworkspace workspacename="${TFS.WorkspaceName}" comment="Created By CI Factory project ${ProjectName}" >
      <tfsserverconnection refid="${TFS.Info}"/>
      <mappings>
        <mapping localitem="${Common.Directory.ProjectRoot.Path}" serveritem="${sourcecontrol::convertlocaltoserver(Common.Directory.ProjectRoot.Path)}"/>
      </mappings>
    </tfsmapworkspace>

    <tfsadd localitem="${Common.Directory.ProjectRoot.Path}" recursive="true" workspacename="${TFS.WorkspaceName}" >
      <tfsserverconnection refid="${TFS.Info}"/>
    </tfsadd>
    <tfscheckin localitem="${Common.Directory.ProjectRoot.Path}" recursive="true" workspacename="${TFS.WorkspaceName}" comment="Initial Load by CI Factory">
      <tfsserverconnection refid="${TFS.Info}"/>
    </tfscheckin>
  </target>
  
</project>