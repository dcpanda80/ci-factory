<?xml version="1.0" encoding="utf-8" ?>
<project xmlns="http://nant.sf.net/schemas/nant.xsd" name="VSTSVersionControl.Target" >

  <include buildfile="VSS.Properties.xml" />

  <property name="Private.TFS.CacheFile" value="CacheFile.xml"/>
  <property name="Private.TFS.ReportDirectory" value="${BuildDirectory}\TFS" overwrite="false"/>

  <include buildfile="${Private.TFS.ReportDirectory}\${Private.TFS.CacheFile}" if="${file::exists(Private.TFS.ReportDirectory + '\' + Private.TFS.CacheFile)}" failonerror="false"/>
  <property name="TFS.LastBuildTime" value="${CCNetBuildDate} ${CCNetBuildTime}" overwrite="false"/>

  <regex pattern="(?'StaticLabelPart'.*\.)(?'BuildNumber'\d+)$" input="${CCNetLabel}"/>
  <property name="TFS.LastBuildLabel" value="${StaticLabelPart}${int::parse(BuildNumber) - 1}"/>
  
  <target name="SourceControl.CleanGetFromLabelOfThirdPartyDirectory" >
    <call target="Private.SourceControl.EnsureWorkspace"/>
    <property name="Private.SourceControl.DeleteDirectory.Directory" value="${ThirdPartyDirectory}"/>
    <call target="Private.SourceControl.DeleteDirectory"/>

    <tfsget serveritem="${sourcecontrol::convertlocaltoserver(ThirdPartyDirectory)}" recursive="true" workspacename="${TFS.WorkspaceName}" resultfilesetrefid="TFS.ThirdPartyDirectory.GetFileSet" >
      <tfsserverconnection refid="${TFS.Info}"/>
      <versionspec type="Label" versionspec="${SourceControl.GetFromLabel}"/>
    </tfsget>
  </target>

  <target name="SourceControl.CleanGetOfThirdPartyDirectory" >
    <call target="Private.SourceControl.EnsureWorkspace"/>
    <property name="Private.SourceControl.DeleteDirectory.Directory" value="${ThirdPartyDirectory}"/>
    <call target="Private.SourceControl.DeleteDirectory"/>
    
    <tfsget serveritem="${sourcecontrol::convertlocaltoserver(ThirdPartyDirectory)}" recursive="true" workspacename="${TFS.WorkspaceName}" resultfilesetrefid="TFS.ThirdPartyDirectory.GetFileSet">
      <tfsserverconnection refid="${TFS.Info}"/>
    </tfsget>
  </target>

  <target name="SourceControl.GetOfThirdPartyDirectory" >
    <call target="Private.SourceControl.EnsureWorkspace"/>
    <tfsget serveritem="${sourcecontrol::convertlocaltoserver(ThirdPartyDirectory)}" recursive="true" workspacename="${TFS.WorkspaceName}" resultfilesetrefid="TFS.ThirdPartyDirectory.GetFileSet">
      <tfsserverconnection refid="${TFS.Info}"/>
    </tfsget>
  </target>

  <!--<property name="SourceControl.ShowChanges.FromLabel" value=""/>
  <property name="SourceControl.ShowChanges.ToLabel" value=""/>-->
  <target name="SourceControl.ShowChangesBetweenLabelsBuild">
    <property name="Private.SourceControl.ConvertLocalPathToPath.LocalPath" value="${ThirdPartyDirectory}"/>
    <call target="Private.SourceControl.ConvertLocalPathToPath"/>

    <property name="SourceControl.ShowChangesLabelBased.Path" value="${Private.SourceControl.ConvertLocalPathToPath.Path}"/>
    <property name="SourceControl.ShowChangesLabelBased.FromLabel" value="${SourceControl.ShowChanges.FromLabel}"/>
    <property name="SourceControl.ShowChangesLabelBased.ToLabel" value="${SourceControl.ShowChanges.ToLabel}"/>
    <property name="SourceControl.ShowChangesLabelBased.Output" value="${Private.VSS.ReportDirectory}\ThirdPartyChanges.xml"/>

    <call target="SourceControl.ShowChangesLabelBased"/>

    <property name="Private.SourceControl.ConvertLocalPathToPath.LocalPath" value="${ProductDirectory}"/>
    <call target="Private.SourceControl.ConvertLocalPathToPath"/>

    <property name="SourceControl.ShowChangesLabelBased.Path" value="${Private.SourceControl.ConvertLocalPathToPath.Path}"/>
    <property name="SourceControl.ShowChangesLabelBased.Output" value="${Private.VSS.ReportDirectory}\ProductChanges.xml"/>

    <call target="SourceControl.ShowChangesLabelBased"/>
  </target>

  <!--
  <property name="SourceControl.ShowChangesLabelBased.Path" value=""/>
  <property name="SourceControl.ShowChangesLabelBased.FromLabel" value=""/>
  <property name="SourceControl.ShowChangesLabelBased.ToLabel" value=""/>
  <property name="SourceControl.ShowChangesLabelBased.Output" value=""/>
  -->
  <target name="SourceControl.ShowChangesLabelBased">
    <tfshistory itemspec="${SourceControl.ShowChangesLabelBased.Path}" recursive="true" reportfile="${SourceControl.ShowChangesLabelBased.Output}" >
      <tfsserverconnection refid="${TFS.Info}"/>
      <fromversionspec type="Label" versionspec="${SourceControl.ShowChangesLabelBased.FromLabel}"/>
      <toversionspec type="Label" versionspec="${SourceControl.ShowChangesLabelBased.ToLabel}"/>
    </tfshistory>
  </target>

  <target name="SourceControl.ShowChangesSinceLastBuild">
    <property name="Private.SourceControl.ConvertLocalPathToPath.LocalPath" value="${ThirdPartyDirectory}"/>
    <call target="Private.SourceControl.ConvertLocalPathToPath"/>

    <property name="SourceControl.ShowChangesTimeBased.Path" value="${Private.SourceControl.ConvertLocalPathToPath.Path}"/>
    <property name="SourceControl.ShowChangesTimeBased.FromDate" value="${TFS.LastBuildTime}"/>
    <property name="SourceControl.ShowChangesTimeBased.ToDate" value="${datetime::now()}"/>
    <property name="SourceControl.ShowChangesTimeBased.Output" value="${Private.TFS.ReportDirectory}\ThirdPartyChanges.xml"/>

    <call target="SourceControl.ShowChangesTimeBased"/>

    <property name="Private.SourceControl.ConvertLocalPathToPath.LocalPath" value="${ProductDirectory}"/>
    <call target="Private.SourceControl.ConvertLocalPathToPath"/>

    <property name="SourceControl.ShowChangesTimeBased.Path" value="${Private.SourceControl.ConvertLocalPathToPath.Path}"/>
    <property name="SourceControl.ShowChangesTimeBased.Output" value="${Private.TFS.ReportDirectory}\ProductChanges.xml"/>

    <call target="SourceControl.ShowChangesTimeBased"/>
  </target>
  
  <!--
  <property name="SourceControl.ShowChangesTimeBased.Path" value=""/>
  <property name="SourceControl.ShowChangesTimeBased.FromDate" value=""/>
  <property name="SourceControl.ShowChangesTimeBased.ToDate" value=""/>
  <property name="SourceControl.ShowChangesTimeBased.Output" value=""/>
  -->
  <target name="SourceControl.ShowChangesTimeBased">
    <tfshistory itemspec="${SourceControl.ShowChangesTimeBased.Path}" recursive="true" reportfile="${SourceControl.ShowChangesTimeBased.Output}" >
      <tfsserverconnection refid="${TFS.Info}"/>
      <fromversionspec type="Date" versionspec="${SourceControl.ShowChangesTimeBased.FromDate}"/>
      <toversionspec type="Date" versionspec="${SourceControl.ShowChangesTimeBased.ToDate}"/>
    </tfshistory>
  </target>

  <target name="SourceControl.CleanGetOfProductDirectory" >
    <call target="Private.SourceControl.EnsureWorkspace"/>
    <property name="Private.SourceControl.DeleteDirectory.Directory" value="${ProductDirectory}"/>
    <call target="Private.SourceControl.DeleteDirectory"/>
    
    <tfsget serveritem="${sourcecontrol::convertlocaltoserver(ProductDirectory)}" recursive="true" workspacename="${TFS.WorkspaceName}" resultfilesetrefid="TFS.ProductDirectory.GetFileSet" >
      <tfsserverconnection refid="${TFS.Info}"/>
    </tfsget>
  </target>

  <target name="SourceControl.GetOfProductDirectory" >
    <call target="Private.SourceControl.EnsureWorkspace"/>
    <tfsget serveritem="${sourcecontrol::convertlocaltoserver(ProductDirectory)}" recursive="true" workspacename="${TFS.WorkspaceName}" resultfilesetrefid="TFS.ProductDirectory.GetFileSet" >
      <tfsserverconnection refid="${TFS.Info}"/>
    </tfsget>
  </target>

  <!-- Needed for SourceControl.CleanGetFromLabelofProductDirectory
  <property name="SourceControl.GetFromLabel" value=""/>
  -->

  <target name="SourceControl.CleanGetFromLabelOfProductDirectory">
    <call target="Private.SourceControl.EnsureWorkspace"/>
    <property name="Private.SourceControl.DeleteDirectory.Directory" value="${ProductDirectory}"/>
    <call target="Private.SourceControl.DeleteDirectory"/>
    
    <tfsget serveritem="${sourcecontrol::convertlocaltoserver(ProductDirectory)}" recursive="true" workspacename="${TFS.WorkspaceName}" resultfilesetrefid="TFS.ProductDirectory.GetFileSet" >
      <tfsserverconnection refid="${TFS.Info}"/>
      <versionspec type="Label" versionspec="${SourceControl.GetFromLabel}"/>
    </tfsget>
  </target>

  <target name="SourceControl.GetOfBuildDirectory" >
    <call target="Private.SourceControl.EnsureWorkspace"/>
    <tfsget serveritem="${sourcecontrol::convertlocaltoserver(BuildDirectory)}" recursive="true" workspacename="${TFS.WorkspaceName}" resultfilesetrefid="TFS.BuildDirectory.GetFileSet" >
      <tfsserverconnection refid="${TFS.Info}"/>
    </tfsget>
  </target>
  
  <!-- Params for SourceControl.Relabel
  <property name="SourceControl.Relabel.OldLabel" value=""/>
  <property name="SourceControl.Relabel.NewLabel" value=""/>
  <property name="SourceControl.Relabel.Path" value=""/>
  -->
  <target name="SourceControl.Relabel">
    <call target="Private.SourceControl.EnsureWorkspace"/>
    <tfslabel 
          comment="Relabeled by Build ${ProjectName}, was ${SourceControl.Relabel.OldLabel}"
          itemspec="${SourceControl.Relabel.Path}" 
          labelname="${SourceControl.Relabel.NewLabel}"
          recursive="true" 
          scope="${TFS.LabelScope}" >
      <tfsserverconnection refid="${TFS.Info}"/>
      <versionspec type="Label" versionspec="${SourceControl.Relabel.OldLabel}"/>
    </tfslabel>
  </target>

  <!--
  The following properties should be specified in the calling script.
  
  <property name="SourceControl.CheckOut.File" value="${Private.Versioning.AssemblyInfoFile}"/>
  -->
  <target name="SourceControl.CheckOut">
    <call target="Private.SourceControl.EnsureWorkspace"/>
    <tfscheckout localitem="${SourceControl.CheckOut.File}" workspacename="${TFS.WorkspaceName}" >
      <tfsserverconnection refid="${TFS.Info}"/>
    </tfscheckout>
  </target>

  <!--
  The following properties should be specified in the calling script.
  
  <property name="SourceControl.CheckIn.File" value="${Private.Versioning.AssemblyInfoFile}"/>
  -->
  <target name="SourceControl.CheckIn">
    <call target="Private.SourceControl.EnsureWorkspace"/>
    <tfscheckin localitem="${SourceControl.CheckIn.File}" workspacename="${TFS.WorkspaceName}" >
      <tfsserverconnection refid="${TFS.Info}"/>
    </tfscheckin>
  </target>

  <!-- Needed for Private.SourceControl.ConvertLocalPathToPath
  <property name="Private.SourceControl.ConvertLocalPathToPath.LocalPath" value=""/>
  -->
  <!-- Returned by Private.SourceControl.ConvertLocalPathToPath
  <property name="Private.SourceControl.ConvertLocalPathToPath.Path" value=""/>
  -->
  <target name="Private.SourceControl.ConvertLocalPathToPath">
    <property name="Private.SourceControl.ConvertLocalPathToPath.Path" value="${string::replace(Private.SourceControl.ConvertLocalPathToPath.LocalPath, ProjectsDirectory, '')}"/>
    <property name="Private.SourceControl.ConvertLocalPathToPath.Path" value="${string::replace(Private.SourceControl.ConvertLocalPathToPath.Path, '\', '/')}"/>
    <property name="Private.SourceControl.ConvertLocalPathToPath.Path" value="$/${Private.SourceControl.ConvertLocalPathToPath.Path}"/>
    <property name="Private.SourceControl.ConvertLocalPathToPath.Path" value="${string::replace(Private.SourceControl.ConvertLocalPathToPath.Path, '//', '/')}"/>
  </target>
  
  <!-- Needed for Private.SourceControl.DeleteDirectory
  <property name="Private.SourceControl.DeleteDirectory.Directory" value=""/>
  -->

  <target name="Private.SourceControl.DeleteDirectory">
    <if test="${directory::exists(Private.SourceControl.DeleteDirectory.Directory)}" >
      <attrib readonly="false">
        <fileset>
          <include name="${Private.SourceControl.DeleteDirectory.Directory}\*" />
        </fileset>
      </attrib>

      <trycatch>
        <try>
          <delete dir="${Private.SourceControl.DeleteDirectory.Directory}"/>
        </try>
        <catch>
          <exec program="cmd" commandline='/C "rmdir /S /Q "${Private.SourceControl.DeleteDirectory.Directory}""' />
        </catch>
      </trycatch>
    </if>
  </target>
  
  <script language="C#" prefix="sourcecontrol">
    <code>
      <![CDATA[                 
					
          [Function("convertlocaltoserver")]
					public string ConvertLocalToServer(string local)
          {
            String server = local.Replace(this.Project.Properties["ProjectsDirectory"], "");
            server = server.Replace(@"\", @"/");
            server = String.Format(@"$/{0}", local);
            return server.Replace(@"//", @"/");
          }
          
			]]>
    </code>
  </script>

  <target name="Private.SourceControl.EnsureWorkspace">
    <ifnot test="${tfs-vc::workspace-exists(TFS.Info, TFS.WorkspaceName)}">

      <tfsmapworkspace workspacename="${TFS.WorkspaceName}" comment="Created By build ${CCNetProject}" >
        <tfsserverconnection refid="${TFS.Info}"/>
        <mappings>
          <mapping localitem="${ProjectCodeLineDirectory}" serveritem="${sourcecontrol::convertlocaltoserver(ProjectCodeLineDirectory)}"/>
        </mappings>
      </tfsmapworkspace>

    </ifnot>
  </target>

  <target name="SourceControl.SetUp">
    <mkdir dir="${Private.TFS.ReportDirectory}" unless="${directory::exists(Private.TFS.ReportDirectory)}" />
    <delete>
      <fileset>
        <include name="${Private.TFS.ReportDirectory}\*.*"/>
        <exclude name="${Private.TFS.ReportDirectory}\${Private.TFS.CacheFile}"/>
      </fileset>
    </delete>

    <saveproperties format="Include" file="${Private.TFS.ReportDirectory}\${Private.TFS.CacheFile}">
      <property name="TFS.LastBuildTime" value="${CCNetBuildDate} ${CCNetBuildTime}"/>
    </saveproperties>
  </target>

  <target name="SourceControl.TearDown">

  </target>
  
</project>