<?xml version="1.0" encoding="UTF-8"?>
<project name="triserv" default="source.compile" basedir=".">

	<import file="build/build.targets.xml" />

	<property name="temp.dir" value="/temp" />
	<mkdir dir="${temp.dir}" />
	<condition property="progress-filepath" value="${temp.dir}/ant-progress.txt">
		<not>
			<isset property="progress-filepath" />
		</not>
	</condition>

	<target name="source.compile">
		<var name="do-to-target" value="source.compile" />
		<antcall target="do-to-projects" />
	</target>

	<target name="package.create">
		<var name="do-to-target" value="package.create" />
		<antcall target="do-to-projects" />
	</target>

	<target name="clean">
		<var name="do-to-target" value="clean" />
		<antcall target="do-to-projects" />
	</target>

	<target name="coverage.write.report">
		<delete dir="${basedir}/coverage-reports" />
		<mkdir dir="${basedir}/coverage-reports" />
		<cobertura-merge datafile="${basedir}/coverage-reports/coverage.ser">
			<fileset dir="${basedir}">
				<include name="**/*.ser" />
			</fileset>
		</cobertura-merge>
		<property name="coverage.temp.source" value="${temp.dir}/coverage-source"/>
		<delete dir="${coverage.temp.source}"/>
		<mkdir dir="${coverage.temp.source}"/>
		
		<for param="source.dir">
			<path>
				<dirset dir="${basedir}">
					<include name="production/**/src/main/java"/>
				</dirset>
			</path>
			<sequential>
				<copy todir="${coverage.temp.source}">
					<fileset dir="@{source.dir}">
						<include name="**/*.java"/>
					</fileset>
				</copy>
			</sequential>
		</for>
		
		<cobertura-report 
			format="xml" 
			datafile="${basedir}/coverage-reports/coverage.ser" 
			destdir="${basedir}/coverage-reports"
			srcdir="${coverage.temp.source}"
		/>
		<cobertura-report 
			format="html" 
			datafile="${basedir}/coverage-reports/coverage.ser" 
			destdir="${basedir}/coverage-reports"
			srcdir="${coverage.temp.source}"
		/>
	</target>

	<target name="webtest.run">
		<var name="do-to-target" value="webtest.run" />
		<antcall target="do-to-projects" />

		<junitreportplus reportfile="${basedir}/web-test-reports/WebTests.xml" testtype="web">
			<xmlreports>
				<fileset dir="${basedir}">
					<include name="**/web-test-reports/TEST-*.xml" />
				</fileset>
			</xmlreports>
		</junitreportplus>
	</target>

	<target name="integrationtest.run">
		<call target="-coverage.product.prep"/>
		<var name="do-to-target" value="integrationtest.run" />
		<antcall target="do-to-projects" />

		<junitreportplus reportfile="${basedir}/integration-test-reports/IntegrationTests.xml" testtype="integration">
			<xmlreports>
				<fileset dir="${basedir}">
					<include name="**/integration-test-reports/TEST-*.xml" />
				</fileset>
			</xmlreports>
		</junitreportplus>
		<call target="-coverage.product.check"/>
	</target>

	<target name="unittest.run">
		<call target="-coverage.product.prep"/>
		<var name="do-to-target" value="unittest.run" />
		<antcall target="do-to-projects" />

		<junitreportplus reportfile="${basedir}/unit-test-reports/UnitTests.xml" testtype="unit">
			<xmlreports>
				<fileset dir="${basedir}">
					<include name="**/unit-test-reports/TEST-*.xml" />
				</fileset>
			</xmlreports>
		</junitreportplus>
		<call target="-coverage.product.check"/>
	</target>
	
	<target name="help">
		<echo taskname="help">
This project will iterate over all the projects listed in ${basedir}/projects.xml
and execute all targets specificed.
			
Targets available in this project:

clean - deletes all transient directories and files.

source.compile - compiles all source files and copies all resources into the ${build.dir}.

package.create - creates jar/war/ear files.

unittest.run - executes all the unit tests in projects that have unit tests and are marked as having unit tests.
	Writes an html report for each project to [project directory]/coverage-reports/index.html. 
	Checks that both line and branch coverage rates are meet for all classes.  
	The default minimum rates, percents required are ${coverage.threshold.linerate}% line coverage 
	and ${coverage.threshold.branchrate}% branch coverage.  Exceptions to the default rates are maintained
	in the file ${coverage.thresholds.file}.
			
integrationtest.run - executes all integration tests in projects that have integration tests and are marked as having integration tests.
	Writes an html report for each project to [project directory]/coverage-reports/index.html. 
	Checks that both line and branch coverage rates are meet for all classes.  
	The default minimum rates, percents required are ${coverage.threshold.linerate}% line coverage 
	and ${coverage.threshold.branchrate}% branch coverage.  Exceptions to the default rates are maintained
	in the file ${coverage.thresholds.file}.

webtest.run - executes all web tests in projects that have web tests and are marked as having web tests.

coverage.write.report - merges all coverage information and writes a single html report to ${basedir}/coverage-reports/index.html.

	
		</echo>
	</target>

	<target name="do-to-projects" description="calls the target specified in the property do-to-target on all the projects.">
		<property name="project.count" value="0" />
		<xmltask source="${basedir}/projects.xml">
			<call path="/projects/project">
				<actions>
					<math result="project.count" operand1="${project.count}" operation="+" operand2="1" datatype="int" />
				</actions>
			</call>
		</xmltask>

		<property name="current.project.count" value="0" />
		<xmltask source="${basedir}/projects.xml">
			<call path="/projects/project">
				<param name="project.name" path="name/text()" />
				<param name="project.directory" path="directory/text()" />
				<actions>
					<math result="current.project.count" operand1="${current.project.count}" operation="+" operand2="1" datatype="int" />
					<echo message=" ******************** Start @{project.name} ${do-to-target} project ${current.project.count} of ${project.count} *************************" file="${progress-filepath}" />
					<echo message=" ******************** Start @{project.name} ${do-to-target} project ${current.project.count} of ${project.count} *************************" />
					<ant dir="${basedir}/@{project.directory}" antfile="build.xml" inheritAll="false">
						<target name="${do-to-target}" />
						<property name="called.from.main.build" value="true" />
					</ant>
					<echo message=" ******************** End @{project.name} ${do-to-target} project ${current.project.count} of ${project.count} *************************" file="${progress-filepath}" />
					<echo message=" ******************** End @{project.name} ${do-to-target} project ${current.project.count} of ${project.count} *************************" />
				</actions>
			</call>
		</xmltask>
	</target>

</project>
