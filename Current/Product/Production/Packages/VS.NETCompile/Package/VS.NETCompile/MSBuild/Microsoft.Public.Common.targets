<!--
***********************************************************************************************
Microsoft.Public.Common.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

This file defines the steps in the standard build process specific for C# .NET projects
being targeted for .NET Framework 1.1. For example, it contains the step that calls 
the C# compiler. The remainder of the build process is defined in Microsoft.Common.targets.

Copyright (C) Microsoft Corporation. All rights reserved.
***********************************************************************************************
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <UsingTask TaskName="GenerateResourceEE" AssemblyFile=".\MSBee.dll"/>
  <UsingTask TaskName="GetRegistryValue" AssemblyFile=".\MSBee.dll"/>

  <PropertyGroup>
    <AvailablePlatforms>$(AvailablePlatforms),.NET 1.1</AvailablePlatforms>
  </PropertyGroup>

  
  <!-- 
  EVERETT - is defined for Everett Builds
  TargetFrameworkFullVersion and TargetFrameworkVersion - identify that we're targeting v1.1
  UseHostCompilerIfAvailable - set to false so the stand alone compilers are invoked
  -->

  <PropertyGroup Condition=" '$(Platform)' == '.NET 1.1'">
    <TargetFrameworkFullVersion>v1.1.4322</TargetFrameworkFullVersion>
    <TargetFrameworkVersion>v1.1</TargetFrameworkVersion>		
    <UseHostCompilerIfAvailable>false</UseHostCompilerIfAvailable>
  </PropertyGroup>

  <!-- For Debug and Release builds, place .NET 1.1 binaries underneath bin\FX1_1. -->
  <!--<PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <OutputPath>bin\FX1_1\Debug\</OutputPath>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <OutputPath>bin\FX1_1\Release</OutputPath>
  </PropertyGroup>-->
  
  <!-- CHANGE TARGET FRAMEWORK DIRECTORY -->

  <!-- Update TargetFrameworkDirectory and TargetFrameworkSDKDirectory properties to point to Everett paths. 
  $(TargetFrameworkDirectory) controls where assembly resolution logic finds assemblies.
  -->
  <PropertyGroup Condition=" '$(Platform)' == '.NET 1.1'">
    <TargetFrameworkDirectory>$(SystemRoot)\Microsoft.NET\Framework\$(TargetFrameworkFullVersion)</TargetFrameworkDirectory>
    <TargetFrameworkSDKDirectory>"C:\Program Files\Microsoft.NET\SDK\$(TargetFrameworkVersion)"</TargetFrameworkSDKDirectory>
  </PropertyGroup>

  <ItemGroup Condition=" '$(Platform)' == '.NET 1.1'">
    <TargetFrameworkDirectoryItem Include="$(SystemRoot)\Microsoft.NET\Framework\$(TargetFrameworkFullVersion)">
      <InProject>false</InProject>
    </TargetFrameworkDirectoryItem>
    <TargetFrameworkSDKDirectoryItem Include="C:\Program Files\Microsoft.NET\SDK\$(TargetFrameworkVersion)">
      <InProject>false</InProject>
    </TargetFrameworkSDKDirectoryItem>
  </ItemGroup>

  <!--
  Override this target from Microsoft.Common.targets. This target obtains the paths to the 
  Whidbey .NET Framework and Whidbey .NET Framework SDK and then writes the paths to 
  TargetFrameworkDirectory and TargetFrameworkSDKDirectory, respectively. Since we don't want these values
  overriden but the target is referenced from Microsoft.Common.targets, empty the target.
  -->
  <Target
     Name="GetFrameworkPaths"
     DependsOnTargets="$(GetFrameworkPathsDependsOn)" Condition=" '$(Platform)' == '.NET 1.1'">
  </Target>


  <!-- CONTROL ASSEMBLY RESOLUTION LOGIC -->

  <!-- 
  Removed the Registry key for target framework version due to 'v' issue.
  Removed {AssemblyFolders} since it's tied to non applicable hardcoded keys.
  Replaced these with a list of VisualStudioSearchPaths obtained from the registry.
  -->

  <PropertyGroup Condition=" '$(Platform)' == '.NET 1.1'">
    <VisualStudioRegistryBase>Software\Microsoft\VisualStudio</VisualStudioRegistryBase>
    <TargetVisualStudioVersion>7.1</TargetVisualStudioVersion>	
    <AssemblyFoldersSuffix>AssemblyFolders</AssemblyFoldersSuffix>
  </PropertyGroup>

  <Target
    Name="GetVisualStudioSearchPaths" Condition=" '$(Platform)' == '.NET 1.1'">
      <GetRegistryValue 
        RegistryKey="$(VisualStudioRegistryBase)\$(TargetVisualStudioVersion)\$(AssemblyFoldersSuffix)"
        BaseRegistryKey="HKEY_LOCAL_MACHINE"
        SearchDepth="1">
        
        <Output TaskParameter="RegistryValues" ItemName="VisualStudioSearchPaths" />
      </GetRegistryValue>
  </Target>

  <PropertyGroup Condition=" '$(Platform)' == '.NET 1.1'">
    <!--
    The SearchPaths property is set to find assemblies in the following order:

    (1) Files from current project - indicated by {CandidateAssemblyFiles}
    (2) $(ReferencePath) - the reference path property, which comes from the .USER file.
    (3) The hintpath from the referenced item itself, indicated by {HintPathFromItem}.
    (4) The directory of MSBuild's "target" runtime from GetFrameworkPath. The "target" runtime folder is the folder of the runtime that MSBuild is a part of.
    (5) Registered VisualStudio assembly folders.
    (6) Resolve to the GAC.
    (7) Treat the reference's Include as if it were a real file name.
    (8) Look in the application's output folder (like bin\debug).
    -->
    <AssemblySearchPaths>
      {CandidateAssemblyFiles};
      $(ReferencePath);
      {HintPathFromItem};
      {TargetFrameworkDirectory};
      @(VisualStudioSearchPaths);
      {GAC};
      {RawFileName};
      $(OutputPath)
    </AssemblySearchPaths>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Platform)' == '.NET 1.1'">
    <ResolveAssemblyReferencesDependsOn>
      GetFrameworkPaths;
      GetVisualStudioSearchPaths;
      GetRedistLists;
      PrepareForBuild
    </ResolveAssemblyReferencesDependsOn>
  </PropertyGroup>
 
  <!-- OVERRIDE CORERESGEN -->

  <!--
  Override the CoreResGen target from Microsoft.Common.Targets to invoke GenerateResource for the Everett Environment.
  -->
   
  <Target 
    Name="CoreResGen" 
    DependsOnTargets="$(CoreResGenDependsOn)" Condition=" '$(Platform)' == '.NET 1.1'">

    <GenerateResourceEE
      Sources="@(ResxWithNoCulture)"
      References="@(ReferencePath)"
      OutputResources="@(ManifestResourceWithNoCultureName->'$(IntermediateOutputPath)%(Identity).resources')"
      Condition=" '@(ResxWithNoCulture)' != '' ">
            
      <Output TaskParameter="OutputResources" ItemName="ManifestResourceWithNoCulture"/>
      <Output TaskParameter="OutputResources" ItemName="FileWrites"/>
    </GenerateResourceEE>

    <GenerateResourceEE
      Sources="@(ResxWithCulture)"
      References="@(ReferencePath)"
      OutputResources="@(ManifestResourceWithCultureName->'$(IntermediateOutputPath)%(Identity).resources')"
      Condition=" '@(ResxWithCulture)' != '' ">

      <Output TaskParameter="OutputResources" ItemName="ManifestResourceWithCulture"/>
      <Output TaskParameter="OutputResources" ItemName="FileWrites"/>
    </GenerateResourceEE> 
  </Target>

</Project>
