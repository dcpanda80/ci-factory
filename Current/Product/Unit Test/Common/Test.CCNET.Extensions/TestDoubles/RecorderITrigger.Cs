// Generated by Refly
namespace TestDoubles
{
    using System;
    using Doubler.Common;
    using ThoughtWorks.CruiseControl.Remote;
    
    
    [DoubleAttribute()]
    [RecorderAttribute()]
    public class RecorderITrigger : ThoughtWorks.CruiseControl.Remote.ITrigger
    {
        
        private ITriggerRecordings _recordings;
        
        private System.DateTime _nextBuild;
        
        public RecorderITrigger()
        {
            this.Recordings.NewRecording.Called = true;
            if ((this.Recordings.NewRecording.ExceptionToThrow != null))
            {
                throw this.Recordings.NewRecording.ExceptionToThrow;
            }
        }
        
        public virtual System.DateTime NextBuild
        {
            get
            {
                return this._nextBuild;
            }
        }
        
        public virtual System.DateTime SetNextBuild
        {
            get
            {
                return this._nextBuild;
            }
            set
            {
                this._nextBuild = value;
            }
        }
        
        public virtual ITriggerRecordings Recordings
        {
            get
            {
                if ((this._recordings == null))
                {
                    this._recordings = new ITriggerRecordings();
                }
                return this._recordings;
            }
            set
            {
                this._recordings = value;
            }
        }
        
        public virtual ThoughtWorks.CruiseControl.Remote.BuildCondition ShouldRunIntegration()
        {
            this.Recordings.ShouldRunIntegrationRecording.Called = true;
            if ((this.Recordings.ShouldRunIntegrationRecording.ExceptionToThrow != null))
            {
                throw this.Recordings.ShouldRunIntegrationRecording.ExceptionToThrow;
            }
            return this.Recordings.ShouldRunIntegrationRecording.ReturnValue;
        }
        
        public virtual void IntegrationCompleted()
        {
            this.Recordings.IntegrationCompletedRecording.Called = true;
            if ((this.Recordings.IntegrationCompletedRecording.ExceptionToThrow != null))
            {
                throw this.Recordings.IntegrationCompletedRecording.ExceptionToThrow;
            }
        }
        
        public virtual void IntegrationNotRun()
        {
            this.Recordings.IntegrationNotRunRecording.Called = true;
            if ((this.Recordings.IntegrationNotRunRecording.ExceptionToThrow != null))
            {
                throw this.Recordings.IntegrationNotRunRecording.ExceptionToThrow;
            }
        }
        
        public class IntegrationNotRunRecordingRecordings
        {
            
            private bool _called;
            
            private System.Exception _exceptionToThrow;
            
            public virtual bool Called
            {
                get
                {
                    return this._called;
                }
                set
                {
                    this._called = value;
                }
            }
            
            public virtual System.Exception ExceptionToThrow
            {
                get
                {
                    return this._exceptionToThrow;
                }
                set
                {
                    this._exceptionToThrow = value;
                }
            }
        }
        
        public class ShouldRunIntegrationRecordingRecordings
        {
            
            private bool _called;
            
            private BuildCondition _returnValue;
            
            private System.Exception _exceptionToThrow;
            
            public virtual bool Called
            {
                get
                {
                    return this._called;
                }
                set
                {
                    this._called = value;
                }
            }
            
            public virtual System.Exception ExceptionToThrow
            {
                get
                {
                    return this._exceptionToThrow;
                }
                set
                {
                    this._exceptionToThrow = value;
                }
            }
            
            public virtual BuildCondition ReturnValue
            {
                get
                {
                    return this._returnValue;
                }
                set
                {
                    this._returnValue = value;
                }
            }
        }
        
        public class ITriggerRecordings
        {
            
            private ShouldRunIntegrationRecordingRecordings _shouldRunIntegrationRecording;
            
            private NewRecordingRecordings _newRecording;
            
            private IntegrationCompletedRecordingRecordings _integrationCompletedRecording;
            
            private IntegrationNotRunRecordingRecordings _integrationNotRunRecording;
            
            public virtual NewRecordingRecordings NewRecording
            {
                get
                {
                    if ((this._newRecording == null))
                    {
                        this._newRecording = new NewRecordingRecordings();
                    }
                    return this._newRecording;
                }
                set
                {
                    this._newRecording = value;
                }
            }
            
            public virtual ShouldRunIntegrationRecordingRecordings ShouldRunIntegrationRecording
            {
                get
                {
                    if ((this._shouldRunIntegrationRecording == null))
                    {
                        this._shouldRunIntegrationRecording = new ShouldRunIntegrationRecordingRecordings();
                    }
                    return this._shouldRunIntegrationRecording;
                }
                set
                {
                    this._shouldRunIntegrationRecording = value;
                }
            }
            
            public virtual IntegrationCompletedRecordingRecordings IntegrationCompletedRecording
            {
                get
                {
                    if ((this._integrationCompletedRecording == null))
                    {
                        this._integrationCompletedRecording = new IntegrationCompletedRecordingRecordings();
                    }
                    return this._integrationCompletedRecording;
                }
                set
                {
                    this._integrationCompletedRecording = value;
                }
            }
            
            public virtual IntegrationNotRunRecordingRecordings IntegrationNotRunRecording
            {
                get
                {
                    if ((this._integrationNotRunRecording == null))
                    {
                        this._integrationNotRunRecording = new IntegrationNotRunRecordingRecordings();
                    }
                    return this._integrationNotRunRecording;
                }
                set
                {
                    this._integrationNotRunRecording = value;
                }
            }
        }
        
        public class NewRecordingRecordings
        {
            
            private bool _called;
            
            private System.Exception _exceptionToThrow;
            
            public virtual bool Called
            {
                get
                {
                    return this._called;
                }
                set
                {
                    this._called = value;
                }
            }
            
            public virtual System.Exception ExceptionToThrow
            {
                get
                {
                    return this._exceptionToThrow;
                }
                set
                {
                    this._exceptionToThrow = value;
                }
            }
        }
        
        public class IntegrationCompletedRecordingRecordings
        {
            
            private bool _called;
            
            private System.Exception _exceptionToThrow;
            
            public virtual bool Called
            {
                get
                {
                    return this._called;
                }
                set
                {
                    this._called = value;
                }
            }
            
            public virtual System.Exception ExceptionToThrow
            {
                get
                {
                    return this._exceptionToThrow;
                }
                set
                {
                    this._exceptionToThrow = value;
                }
            }
        }
    }
}
