<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://nant.sf.net/schemas/nant.xsd" name="SVN">

  <ifthenelse test="${file::exists('Packages\Subversion\bin\CIFactory.NAnt.Subversion.Tasks.dll')}">
    <then>
      <property name="SVN.Task" value="Packages\Subversion\bin\CIFactory.NAnt.Subversion.Tasks.dll"/>
    </then>
    <elseif if="${file::exists(PackagesDirectory + '\Subversion\bin\CIFactory.NAnt.Subversion.Tasks.dll')}">
      <property name="SVN.Task" value="${PackagesDirectory}\Subversion\bin\CIFactory.NAnt.Subversion.Tasks.dll"/>
    </elseif>
    <else>
      <fail message="Can not find ...Packages\Subversion\bin\CIFactory.NAnt.Subversion.Tasks.dll!"/>
    </else>
  </ifthenelse>

  <loadtasks assembly="${SVN.Task}" />

  <property name="SVN.Debug" value="false" overwrite="false" />

  <include buildfile="SourceControl.Properties.xml" />

  <property name="Private.SVN.ReportDirectory" value="${BuildDirectory}\SVN" overwrite="false"/>

  <!--
	The following properties should be specified in the calling script.
	
	<property name="SVN.URI" value="" />
	<property name="SVN.Username" value="" />
	<property name="SVN.Password" value="" />
	
	-->

  <target name="SourceControl.CleanGetOfThirdPartyDirectory" >
    <property name="SourceControl.CleanGetOf" value="${ThirdPartyDirectory}"/>
    <call target="SourceControl.CleanGetOf"/>
  </target>

  <target name="SourceControl.CleanGetOfCommon.Directory.Product.Path" >
    <property name="SourceControl.CleanGetOf" value="${Common.Directory.Product.Path}"/>
    <call target="SourceControl.CleanGetOf"/>
  </target>

  <target name="SourceControl.GetOfThirdPartyDirectory" >
    <property name="SourceControl.GetOf" value="${ThirdPartyDirectory}"/>
    <call target="SourceControl.GetOf"/>
  </target>

  <target name="SourceControl.GetOfCommon.Directory.Product.Path" >
    <property name="SourceControl.GetOf" value="${Common.Directory.Product.Path}"/>
    <call target="SourceControl.GetOf"/>
  </target>

  <target name="SourceControl.GetOfCodeLineDirectory" >
    <property name="SourceControl.GetOf" value="${Common.Directory.CodeLine.Path}"/>
    <call target="SourceControl.GetOf"/>
  </target>

  <target name="SourceControl.CleanGetOf" >
    <trycatch>
      <try>
        <exec program="svn" workingdir="${SourceControl.CleanGetOf}" verbose="${SVN.Debug}" failonerror="false">
          <arg line="cleanup" />
        </exec>
        <exec program="svn" workingdir="${SourceControl.CleanGetOf}" verbose="${SVN.Debug}" failonerror="false">
          <arg line="revert" />
          <arg line="--recursive" />
          <arg line="." />
        </exec>
        <svncleantree directory="${SourceControl.CleanGetOf}" recursive="true" if="${directory::exists(SourceControl.CleanGetOf)}" verbose="${SVN.Debug}"/>
      </try>
      <catch>
        <property name="Private.SourceControl.DeleteLocal.Directory" value="${SourceControl.CleanGetOf}"/>
        <call target="Private.SourceControl.DeleteLocal.Directory" />
      </catch>
    </trycatch>

    <property name="SourceControl.GetOf" value="${SourceControl.CleanGetOf}"/>
    <call target="SourceControl.GetOf"/>
  </target>

	<target name="SourceControl.GetOf" >
		<mkdir dir="${SourceControl.GetOf}" unless="${directory::exists(SourceControl.GetOf)}"/>
		<property name="SourceControl.GetOf.NeedCheckout" value="false"/>
		<property name="SourceControl.GetOf.CleanUp" value="false"/>

		<ifthenelse test="${SourceControl.Update.Interactive}">
			<then>
				<call target="Private.SourceControl.IteractiveGetOf"/>
			</then>
			<else>
				<call target="Private.SourceControl.NonIteractiveGetOf"/>
			</else>
		</ifthenelse>
	</target>

	<target name="Private.SourceControl.IteractiveGetOf">
		<property name="SourceControl.GetOf.NeedCheckout" value="false"/>
		<property name="SourceControl.GetOf.CleanUp" value="false"/>

    <ifthenelse test="${svn::is-versioned(SourceControl.GetOf)}">
      <then>
		    <trycatch>
			    <try>
				    <exec program="${TortoisePath}" workingdir="${SourceControl.GetOf}" verbose="${SVN.Debug}" >
					    <arg line="/command:update" />
					    <arg line='/path:"${SourceControl.GetOf}"' />
					    <arg line='/notempfile' />
				    </exec>
			    </try>
			    <catch property="exception">
				    <echo message="${exception}" />
				    <property name="SourceControl.GetOf.CleanUp" value="true"/>
			    </catch>
		    </trycatch>

		    <trycatch if="${SourceControl.GetOf.CleanUp}">
			    <try>
				    <exec program="${TortoisePath}" workingdir="${SourceControl.GetOf}" verbose="${SVN.Debug}">
					    <arg line="/command:cleanup" />
					    <arg line='/path:"${SourceControl.GetOf}"' />
					    <arg line='/notempfile' />
				    </exec>
				    <exec program="${TortoisePath}" workingdir="${SourceControl.GetOf}" verbose="${SVN.Debug}">
					    <arg line="/command:update" />
					    <arg line='/path:"${SourceControl.GetOf}"' />
					    <arg line='/notempfile' />
				    </exec>
			    </try>
			    <catch property="exception">
				    <echo message="${exception}" />
				    <property name="SourceControl.GetOf.NeedCheckout" value="true"/>
			    </catch>
		    </trycatch>
      </then>
      <else>
        <echo message="${SourceControl.GetOf} is not versioned by Svn."/>
        <property name="SourceControl.GetOf.NeedCheckout" value="true"/>
      </else>
    </ifthenelse>

		<if test="${SourceControl.GetOf.NeedCheckout}">
			<property name="Private.SourceControl.DeleteLocal.Directory" value="${SourceControl.GetOf}"/>
			<call target="Private.SourceControl.DeleteLocal.Directory" unless="${SourceControl.Update.Interactive}" />
			<property name="Uri" value="${string::replace(SourceControl.GetOf, Common.Directory.CodeLine.Path, SVN.URI.ProjectCodeLine)}"/>
			<property name="Uri" value="${string::replace(Uri, '\', '/')}"/>
			<exec program="${TortoisePath}" workingdir="${SourceControl.GetOf}" verbose="${SVN.Debug}">
				<arg line="/command:checkout" />
				<arg line='/url:"${Uri}"' />
				<arg line='/path:"${SourceControl.GetOf}"' />
			</exec>
		</if>
	</target>

	<target name="Private.SourceControl.NonIteractiveGetOf">
		<trycatch>
			<try>
				<ifthenelse test="${svn::is-versioned(SourceControl.GetOf)}">
					<then>
						<exec program="svn" workingdir="${SourceControl.GetOf}" verbose="${SVN.Debug}">
							<arg line="update" />
							<arg line="--non-interactive" />
						</exec>
					</then>
					<else>
						<echo message="${SourceControl.GetOf} is not versioned by Svn."/>
						<property name="SourceControl.GetOf.NeedCheckout" value="true"/>
					</else>
				</ifthenelse>
			</try>
			<catch>
				<property name="SourceControl.GetOf.CleanUp" value="true"/>
			</catch>
		</trycatch>

		<trycatch if="${SourceControl.GetOf.CleanUp}">
			<try>
				<ifthenelse test="${svn::is-versioned(SourceControl.GetOf)}">
					<then>
						<exec program="svn" workingdir="${SourceControl.GetOf}" verbose="${SVN.Debug}">
							<arg line="cleanup" />
						</exec>
						<exec program="svn" workingdir="${SourceControl.GetOf}" verbose="${SVN.Debug}">
							<arg line="update" />
							<arg line="--non-interactive" />
						</exec>
					</then>
					<else>
						<echo message="${SourceControl.GetOf} is not versioned by Svn."/>
						<property name="SourceControl.GetOf.NeedCheckout" value="true"/>
					</else>
				</ifthenelse>
			</try>
			<catch>
				<property name="SourceControl.GetOf.NeedCheckout" value="true"/>
			</catch>
		</trycatch>

		<if test="${SourceControl.GetOf.NeedCheckout}">
			<property name="Private.SourceControl.DeleteLocal.Directory" value="${SourceControl.GetOf}"/>
			<call target="Private.SourceControl.DeleteLocal.Directory" unless="${SourceControl.Update.Interactive}" />
			<property name="Uri" value="${string::replace(SourceControl.GetOf, Common.Directory.CodeLine.Path, SVN.URI.ProjectCodeLine)}"/>
			<property name="Uri" value="${string::replace(Uri, '\', '/')}"/>
			<svn-checkout username="${SVN.Username}" password="${SVN.Password}" uri="${Uri}" recursive ="true" destination ="${SourceControl.GetOf}" />
		</if>
	</target>
	
	<target name="Private.SourceControl.DeleteLocal.Directory">
    <if test="${directory::exists(Private.SourceControl.DeleteLocal.Directory)}" >
      <attrib readonly="false">
        <fileset>
          <include name="${Private.SourceControl.DeleteLocal.Directory}\*" />
        </fileset>
      </attrib>

      <trycatch>
        <try>
          <delete dir="${Private.SourceControl.DeleteLocal.Directory}"/>
        </try>
        <catch>
          <exec program="cmd" commandline='/C "rmdir /S /Q "${Private.SourceControl.DeleteLocal.Directory}""' />
        </catch>
      </trycatch>
    </if>
  </target>

  <!--
  The following properties should be specified in the calling script.
  
  <property name="SourceControl.CheckOut.File" value="${Private.Versioning.AssemblyInfoFile}"/>
  -->
  <target name="SourceControl.CheckOut" >
    <exec program="svn" workingdir="${path::get-directory-name(SourceControl.CheckOut.File)}" verbose="${SVN.Debug}">
      <arg line="update" />
      <arg line="--non-interactive" />
      <arg line="--username ${SVN.Username}" />
      <arg line="--password ${SVN.Password}" />
      <arg line='"${path::get-file-name(SourceControl.CheckOut.File)}"' />
    </exec>
    <attrib file='${SourceControl.CheckOut.File}' readonly='false' failonerror='false' />
  </target>

  <!--
  The following properties should be specified in the calling script.
  
  <property name="SourceControl.CheckIn.File" value="${Private.Versioning.AssemblyInfoFile}"/>
  -->
  <target name="SourceControl.CheckIn" >
    <exec program="svn" workingdir="${path::get-directory-name(SourceControl.CheckIn.File)}" verbose="${SVN.Debug}">
      <arg line="update" />
      <arg line="--non-interactive" />
      <arg line="--username ${SVN.Username}" />
      <arg line="--password ${SVN.Password}" />
      <arg line='"${path::get-file-name(SourceControl.CheckIn.File)}"' />
    </exec>
    <exec program="svn" workingdir="${path::get-directory-name(SourceControl.CheckIn.File)}" verbose="${SVN.Debug}">
      <arg line="commit" />
      <arg line="--non-interactive" />
      <arg line="--username ${SVN.Username}" />
      <arg line="--password ${SVN.Password}" />
      <arg line='-m "Modified by build script in build ${CCNetLabel}"' />
      <arg line='"${path::get-file-name(SourceControl.CheckIn.File)}"' />
    </exec>
  </target>

  <!--
    <property name="SourceControl.Rename.Source" value="${BranchBuildDirectory}\dashboard\WorkspaceSetup\${ProjectName}-${ProjectCodeLineName}-WorkspaceSetup.exe"/>
    <property name="SourceControl.Rename.Target" value="${BranchBuildDirectory}\dashboard\WorkspaceSetup\${ProjectName}-${BranchName}-WorkspaceSetup.exe"/>
  -->
  <target name='SourceControl.Rename'>
    <exec program='svn' commandline='move "${SourceControl.Rename.Source}" "${SourceControl.Rename.Target}"' workingdir='${Common.Directory.CodeLine.Path}' verbose="${SVN.Debug}" />
  </target>

  <target name="SourceControl.SetUp">
    <mkdir if="${directory::exists(Private.SVN.ReportDirectory) == false}" dir="${Private.SVN.ReportDirectory}"/>
    <delete>
      <fileset>
        <include name="${Private.SVN.ReportDirectory}\*.*"/>
      </fileset>
    </delete>
  </target>

  <target name="SourceControl.TearDown">

  </target>

  <target name="SourceControl.Repository.Create">
    <mkdir if="${directory::exists(SVN.RootShare + '\' + ProjectName) == false}" dir="${SVN.RootShare}\${ProjectName}"/>
    <unzip todir="${SVN.RootShare}" zipfile="${SVN.TemplateDB}"/>
  </target>

  <target name="SourceControl.Repository.Load">
    <mkdir dir="${Common.Directory.ProjectRoot.Path}\tags" unless="${directory::exists(Common.Directory.ProjectsRoot.Path + '\tags')}"/>
    <exec program="svn" workingdir="${Common.Directory.ProjectsRoot.Path}" verbose="${SVN.Debug}" >
      <arg line="import"/>
      <arg line='-m "Initial Load by CI Factory Installer"'/>
      <arg line="${ProjectName}"/>
      <arg line="${SVN.URI.ProjectName}"/>
      <arg line="--non-interactive" />
      <arg line="--non-recursive" />
      <arg line="--username ${SVN.Username}" />
      <arg line="--password ${SVN.Password}" />
    </exec>

    <svn-checkout username="${SVN.Username}" password="${SVN.Password}" uri="${SVN.URI.ProjectName}" recursive ="false" destination ="${Common.Directory.ProjectRoot.Path}" />

    <exec program="svn" workingdir="${Common.Directory.ProjectRoot.Path}" verbose="${SVN.Debug}" >
      <arg line="add"/>
      <arg line="* --force" />
    </exec>

    <if test="${SVN.Credentials.SafeStorage}">
      <exec program="svn" workingdir="${PackagesDirectory}\Subversion" verbose="${SVN.Debug}" >
        <arg line="revert"/>
        <arg line="SourceControl.Credentials.xml" />
      </exec>

      <exec program="svn" workingdir="${PackagesDirectory}\Subversion" verbose="${SVN.Debug}" >
        <arg line="propset"/>
        <arg line="svn:ignore"/>
        <arg line="SourceControl.Credentials.xml" />
        <arg line="."/>
      </exec>
    </if>

		<exec program="svn" workingdir="${BuildDirectory}\server" verbose="${SVN.Debug}" >
			<arg line="revert"/>
			<arg line="*.state" />
		</exec>

		<exec program="svn" workingdir="${BuildDirectory}\server" verbose="${SVN.Debug}" >
			<arg line="propset"/>
			<arg line="svn:ignore"/>
			<arg line="*.state" />
			<arg line="."/>
		</exec>

    <exec program="svn" workingdir="${Common.Directory.ProjectRoot.Path}" verbose="${SVN.Debug}">
      <arg line="commit" />
      <arg line="--non-interactive" />
      <arg line="--username ${SVN.Username}" />
      <arg line="--password ${SVN.Password}" />
      <arg line='-m "Initial Load by CI Factory Installer"'/>
    </exec>

	  <switch value="${environment::variable-exists('SVN_ASP_DOT_NET_HACK')}">
		  <case value='True' break='true'>
			  <property name='SvnDirName' value='_svn'/>
		  </case>
		  <case value='False' break='true'>
			  <property name='SvnDirName' value='.svn'/>
		  </case>
	  </switch>
		
    <delete dir='${Common.Directory.ProjectRoot.Path}\${SvnDirName}' includeemptydirs='true'  />
    <delete dir='${Common.Directory.ProjectRoot.Path}\tags' includeemptydirs='true' />
  </target>

  <target name="SourceControl.Bindings.Create">
    <fail message="Not yet implemented!"/>
  </target>

  <!--
  Paremeters for target:
  <property name="SourceControl.CreateBranch.BranchName" value="${BranchName}"/>
  -->
  <target name="SourceControl.StartCreateBranch">
    <svn-checkout username="${SVN.Username}" password="${SVN.Password}" uri="${SVN.URI.ProjectName}" recursive ="false" destination ="${Common.Directory.ProjectRoot.Path}" />

    <exec program="svn" workingdir="${Common.Directory.ProjectRoot.Path}" verbose="${SVN.Debug}">
      <arg line="copy" />
      <arg line="${SVN.URI.ProjectCodeLine}" />
      <arg line="${SourceControl.CreateBranch.BranchName}" />
    </exec>

    <property name="BranchSubversionPackageDirectory" value="${Common.Directory.ProjectRoot.Path}\${SourceControl.CreateBranch.BranchName}\${BuildDirectoryName}\${PackagesDirectoryName}\Subversion"/>
    <copy
      unless="${file::exists(BranchSubversionPackageDirectory + '\SourceControl.Credentials.xml')}"
      file="${PackagesDirectory}\Subversion\SourceControl.Credentials.xml"
      todir="${BranchSubversionPackageDirectory}"
      verbose="${SVN.Debug}"
    />
    <exec program="svn" workingdir="${Common.Directory.ProjectRoot.Path}" verbose="${SVN.Debug}">
      <arg line="commit" />
      <arg line="--non-interactive" />
      <arg line="--username ${SVN.Username}" />
      <arg line="--password ${SVN.Password}" />
      <arg line='-m "Branch by CI Factory Installer"'/>
    </exec>

    <switch value="${environment::variable-exists('SVN_ASP_DOT_NET_HACK')}">
      <case value='True' break='true'>
        <property name='SvnDirName' value='_svn'/>
      </case>
      <case value='False' break='true'>
        <property name='SvnDirName' value='.svn'/>
      </case>
    </switch>

    <delete dir='${Common.Directory.ProjectRoot.Path}\${SvnDirName}' includeemptydirs='true'  />
  </target>

  <target name="SourceControl.FinishCreateBranch">
    <exec program="svn" workingdir="${Common.Directory.ProjectRoot.Path}\${SourceControl.CreateBranch.BranchName}" verbose="${SVN.Debug}">
      <arg line="commit" />
      <arg line="--non-interactive" />
      <arg line="--username ${SVN.Username}" />
      <arg line="--password ${SVN.Password}" />
      <arg line='-m "Adjust Branch by CI Factory Installer"'/>
    </exec>

    <exec program="svn" workingdir="${Common.Directory.CodeLine.Path}" verbose="${SVN.Debug}">
      <arg line="commit" />
      <arg line="--non-interactive" />
      <arg line="--username ${SVN.Username}" />
      <arg line="--password ${SVN.Password}" />
      <arg line='-m "Support Branch by CI Factory Installer"'/>
    </exec>
  </target>
</project>
