<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NAnt.Contrib.Tasks</name>
    </assembly>
    <members>
        <member name="T:NAnt.Contrib.Tasks.ADSIBaseTask">
            <summary>
            Base NAnt task for working with ADSI.  This task contains only the path of the ADSI
            object that you want to work with.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ADSIBaseTask.Path">
            <summary>
            The ADSI path of the location where we want to work with.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ADSIGetPropertyTask">
            <summary>
            Used to get the value of a property from an ADSI object.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ADSIGetPropertyTask.ExecuteTask">
            <summary>
            Sets the specified property
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ADSIGetPropertyTask.PropName">
            <summary>
            The name of the property to get.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ADSIGetPropertyTask.StoreIn">
            <summary>
            The name of the property to store the value in.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ADSISetPropertyTask">
            <summary>
            Sets a property on an ADSI object.
            </summary>
            <remarks>
            This task uses a heuristic to determine the type of the property in ADSI.  The following cases are notable:
            <list type="bulleted">
              <item>If the property does not exist on the item, it is inserted as a string.</item>
              <item>If the property already exists, this method will attempt to preserve
              the type of the property.  The types this method knows about are String,
              Boolean, and Int32.</item>
              <item>If the property exists and is an array, the value is added to 
              the array, but only if it is not already present.</item>
            </list>
            </remarks>
            <example>
              <code>
                <![CDATA[
            <adsisetprop path="${iis.path}/Root" propname="AuthAnonymous" propvalue="true" />
                ]]>
              </code>
            </example>
            <example>
              <code>
                <![CDATA[
            <adsisetprop path="${iis.path}/Root/GWSSample">
                <properties>
                    <option name="AuthBasic" value="false" />
                    <option name="AuthNTLM" value="true" />
                </properties>
            </adsisetprop>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ADSISetPropertyTask.ExecuteTask">
            <summary>
            Sets the specified property
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ADSISetPropertyTask.SetProperty(System.DirectoryServices.DirectoryEntry,System.String,System.String)">
            <summary>
            Sets the named property on the specified <see cref="T:System.DirectoryServices.DirectoryEntry"/> 
            to the given value.
            </summary>
            <param name="entry">The <see cref="T:System.DirectoryServices.DirectoryEntry"/> we're modifying.</param>
            <param name="propertyName">The name of the property to set.</param>
            <param name="propertyValue">The value to set the property to.</param>
            <remarks>
            The following cases are notable:
            <list type="bulleted">
              <item>
              If the property does not exist on the item, it is inserted as a 
              string.
              </item>
              <item>
              If the property already exists, this method will attempt to preserve
              the type of the property.  The types this method knows about are 
              <see cref="T:System.String"/>, <see creef="bool"/>, and <see cref="T:System.Int32"/>.
              </item>
              <item>
              If the property exists and is an array, the value is added to the 
              array, but only if it's not already present.
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ADSISetPropertyTask.PropertyName">
            <summary>
            The name of the property to set.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ADSISetPropertyTask.PropertyValue">
            <summary>
            The new value of the property.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Astyle">
            <summary>
            Formats source code in a given directory to a specified code format.
            </summary>
            <remarks>
            <para>
            Most examples inline have been produced by Tal Davidson and team and 
            are part of the astyle documentation.  They have been included in
            the task documentation as an easy reference.
            </para>
            NOTE: This task relies on the astyle.exe file being in your path variable.
            Please download the astyle.exe from http://astyle.sourceforge.net.
            </remarks>
            <example>
              <code>
                <![CDATA[
            <astyle style="NAnt" cleanup="true">
                <sources>
                    <include name="**/**.cs" />
                </sources>
            </astyle>
                ]]>
              </code>
            </example>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Astyle.DEFAULT_STYLE">
            <summary>
            The default style seems to be the closest to C# standards.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Astyle.PrepareProcess(System.Diagnostics.Process)">
            <summary>
            Build up the command line arguments, determine which executable is 
            being used and find the path to that executable and set the working 
            directory.
            </summary>
            <param name="process">The process to prepare.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Astyle.SetCommandOption(System.String,System.String,System.Boolean)">
            <summary>
            Adds a new command option if none exists.  If one does exist then
            the use switch is toggled on or of.
            </summary>
            <param name="name">The common name of the option.</param>
            <param name="value">The option value or command line switch of the option.</param>
            <param name="on"><see langword="true" /> if the option should be appended to the commandline, otherwise <see langword="false" />.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Astyle.AppendCommandOptions">
            <summary>
            Append the command line options or commen names for the options
            to the generic options collection.  This is then piped to the
            command line as a switch.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Astyle.AppendFiles">
            <summary>
            Append the files specified in the fileset to the command line argument.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.CommandOptions">
            <summary>
            A collection of command line option switches.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.Sources">
            <summary>
            Used to select the files to copy. 
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.CommandLineArguments">
            <summary>
            The command-line arguments for the program.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.Style">
            <summary>
            Indicate the preset style to use.
                <list type="table">
                    <item>ansi
                        <code>
                           namespace foospace
                           {
                               int Foo()
                               {
                                   if (isBar)
                                   {
                                       bar();
                                       return 1;
                                   }
                                   else
                                       return 0;
                               }
                           }
                        </code>
                    </item>
                    <item>kr ( Kernighan&amp;Ritchie )
                        <code>
                           namespace foospace {
                               int Foo() {
                                   if (isBar) {
                                       bar();
                                       return 1;
                                   } else
                                       return 0;
                               }
                           }
                        </code>
                    </item>
                    <item>linux
                        <code>
                           namespace foospace
                           {
                                   int Foo()
                                   {
                                           if (isBar) {
                                                   bar();
                                                   return 1;
                                           } else
                                                   return 0;
                                   }
                           }
                        </code>
                    </item>
                    <item>gnu
                        <code>
                           namespace foospace
                           {
                               int Foo()
                               {
                                   if (isBar)
                                   {
                                       bar();
                                       return 1;
                                   }
                                   else
                                   return 0;
                               }
                           }
                        </code>
                    </item>
                    <item>java
                        <code>
                           class foospace {
                               int Foo() {
                                   if (isBar) {
                                       bar();
                                       return 1;
                                   } else
                                       return 0;
                               }
                           }
                        </code>
                    </item>
                    <item>NAnt
                        <code>
                           namespace foospace {
                               class foo() {
                           #region Protected Static Fields
                                   private int Foo() {
                                       if (isBar) {
                                           bar();
                                           return 1;
                                       } else {
                                           return 0;
                                       }
                                   }
                           #endregion
                           }
                        </code>
                    </item>
                </list>
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.CleanUp">
            <summary>
            Astyle leaves the original files around, renamed with a different
                suffix.  Setting this to <code>true</code>
                will remove these files.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.Suffix">
            <summary>
            The suffix to append to original files, defaults to <c>.orig</c> 
            if not specified.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.IndentNumSpaces">
            <summary>
            Indicate the maximum number of spaces to indent relative to a 
            previous line.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.IndentNumTabs">
            <summary>
            Indicate that tabs should be used to indent sources.  The number 
            specified indicates the maximum number of spaces the tab character
            will represent.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.IndentNumTabsForce">
            <summary>
            Indent using tab characters. Treat each tab as # spaces. Uses tabs as 
            indents in areas '--indent=tab' prefers to use spaces, such as 
            inside multi-line statements.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.ConvertTabs">
            <summary>
            <see langword="true" /> to convert tabs to spaces.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.IndentClass">
             <summary>
             <see langword="true" /> if class statements should be indented.
             <code>
             
                The default:
            
                class Foo
                {
                public:
                    Foo();
                    virtual ~Foo();
                };
            
                becomes:
            
                class Foo
                {
                    public:
                        Foo();
                        virtual ~Foo();
                };
                
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.IndentSwitch">
             <summary>
             <see langword="true" /> if switch statements should be indented.
             <code>
             
                    The default:
            
                    switch (foo)
                    {
                    case 1:
                        a += 2;
                        break;
            
                    default:
                        a += 2;
                        break;
                    }
            
                    becomes:
            
                    switch (foo)
                    {
                        case 1:
                            a += 2;
                            break;
            
                        default:
                            a += 2;
                            break;
                    }
                    
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.IndentCase">
             <summary>
             <see langword="true" /> if case statements should be indented.
             <code>
             
                The default:
            
                switch (foo)
                {
                case 1:
                    {
                        a += 2;
                        break;
                    }
            
                default:
                    {
                        a += 2;
                        break;
                    }
                }
            
                becomes:
            
                switch (foo)
                {
                    case 1:
                    {
                        a += 2;
                        break;
                    }
            
                    default:
                    {
                        a += 2;
                        break;
                    }
                }
                
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.IndentBracket">
             <summary>
             <code>true</code> if bracket statements should be indented.
             <code>
             
                The default:
            
                if (isFoo)
                {
                    bar();
                }
                else
                {
                    anotherBar();
                }
            
                becomes:
            
                if (isFoo)
                    {
                    bar();
                    }
                else
                    {
                    anotherBar();
                    }
                    
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.IndentBlock">
             <summary>
             <see langword="true" /> if block statements should be indented.
                The default:
            
                if (isFoo)
                {
                    bar();
                }
                else
                    anotherBar();
            
                becomes:
            
                if (isFoo)
                    {
                        bar();
                    }
                else
                    anotherBar();
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.IndentNamespaces">
             <summary>
             <see langword="true" /> if namespace statements should be indented.
             <code>
            
                The default:
            
                namespace foospace
                {
                class Foo
                {
                    public:
                        Foo();
                        virtual ~Foo();
                };
                }
            
                becomes:
            
                namespace foospace
                {
                    class Foo
                    {
                        public:
                            Foo();
                            virtual ~Foo();
                    };
                }
            
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.IndentLabels">
             <summary>
             <see langword="true" /> if label statements should be indented.
             <code>
             
                The default:
            
                int foospace()
                {
                    while (isFoo)
                    {
                        ...
                        goto error;
            
                error:
                        ...
                    }
                }
            
                becomes:
            
                int foospace()
                {
                    while (isFoo)
                    {
                        ...
                        goto error;
            
                    error:
                        ...
                    }
                }
            
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.IndentMax">
            <summary>
            Indicate the maximum number of spaces to indent relative to a 
            previous line.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.IndentMin">
            <summary>
            Indicate the maximum number of spaces to indent relative to a 
            previous line.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.FillEmptyLines">
            <summary>
            <see langword="true" /> if empty lines should be filled with the 
            whitespace of the previous line.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.BracketsNewLine">
             <summary>
             <see langword="true" /> if brackets should be put on a new line.
             <code>
            
                if (isFoo)
                {
                    bar();
                }
                else
                {
                    anotherBar();
                }
                
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.BracketsAttach">
            <summary>
            <see langword="true" /> if brackets should be attached.
            <code>
            
               if (isFoo){
                   bar();
               } else {
                   anotherBar();
               }
            
            </code>
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.BracketsLinux">
             <summary>
             <see langword="true" /> if brackets should be put on a new line and 
             indented.
             <code>
            
                namespace foospace
                {
                    int Foo()
                    {
                        if (isBar) {
                            bar();
                            return 1;
                        } else
                            return 0;
                    }
                }
            
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.BreakClosing">
             <summary>
             <see langword="true" /> if the line after a bracket (i.e. an else 
             statement after the closing if) should be placed on the next line.
             <code>
             
                if (isFoo){
                    bar();
                }else {
                    anotherBar();
                }
            
                becomes:
            
                if (isFoo) {
                    bar();
                }
                else {
                    anotherBar();
                }
                
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.BreakBlocks">
             <summary>
             <see langword="true" /> to break block statements with an empty line.
             <code>
            
                isFoo = true;
                if (isFoo) {
                    bar();
                } else {
                    anotherBar();
                }
                isBar = false;
            
                becomes:
            
                isFoo = true;
            
                if (isFoo) {
                    bar();
                } else {
                    anotherBar();
                }
            
                isBar = false;
            
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.BreakBlocksAll">
             <summary>
             <see langword="true" /> to break all block statements, even on 
             nested ifs with an empty line.
             <code>
            
                isFoo = true;
                if (isFoo) {
                    bar();
                } else {
                    anotherBar();
                }
                isBar = false;
            
                becomes:
            
                isFoo = true;
            
                if (isFoo) {
                    bar();
            
                } else {
                    anotherBar();
                }
            
                isBar = false;
            
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.BreakElseif">
             <summary>
             <see langword="true" /> to put the if component of an else if on a 
             new line.
             <code>
            
                if (isFoo) {
                    bar();
                } else if (isBar()){
                    anotherBar();
                }
            
                becomes:
            
                if (isFoo) {
                    bar();
                } else
                    if (isBar()){
                        anotherBar();
                    } 
            
             </code>
             
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.PadOperators">
             <summary>
             <see langword="true" /> to pad operators with a space.
             <code>
             
                if (isFoo)
                    a = bar((b-c)*a,*d--);
            
                becomes:
            
                if (isFoo)
                    a = bar((b - c) * a, *d--);
            
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.PadParenthesis">
             <summary>
             <see langword="true" /> to pad parenthesis with a space.
             <code>
            
                if (isFoo)
                    a = bar((b-c)*a,*d--);
            
                becomes:
            
                if ( isFoo )
                    a = bar( ( b-c )*a, *d-- );
            
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.PadAll">
             <summary>
             <see langword="true" /> to pad operators and parenthesis.
             <code>
             
                if (isFoo)
                    a = bar((b-c)*a,*d--);
            
                becomes:
            
                if ( isFoo )
                    a = bar( ( b - c ) * a, *d-- );
            
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.NoBreakComplex">
             <summary>
             <see langword="true" /> to keep complex statements on the same line.
             <code>
             
                if (isFoo)
                {  
                    isFoo = false; cout &lt;&lt; isFoo &lt;&lt; endl;
                }
            
                remains as is.
            
                if (isFoo) DoBar();
            
                remains as is.
            
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.NoBreakSingleLineBlocks">
             <summary>
             <see langword="true" /> to keep single line statements on the same line.
             <code>
            
                if (isFoo)
                { isFoo = false; cout &lt;&lt; isFoo &lt;&lt; endl; }
            
                remains as is.
            
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.ProgramArguments">
            <summary>
            Gets the command-line arguments for the external program.
            </summary>
            <value>
            The command-line arguments for the external program.
            </value>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ChecksumTask">
            <summary>
            Calculates checksums for a set of files.
            Loosely based on Ant's Checksum task.
            </summary>
            <remarks>
            This task takes a set of input files in a fileset
            and calculates a checksum for each one of them. 
            You can specify the algorithm to use when calculating
            the checksum value (MD5 or SHA1, for example).
            The calculated value is saved to a file with the same
            name as the input file and an added extension either
            based on the algorithm name (e.g. .MD5), or whatever 
            is specified through the fileext attribute.
            </remarks>
            <example>
              <code>
                <![CDATA[
            <checksum algorithm="MD5" fileext="MD5">
                <fileset>
                    <include name="${outputdir}\*.dll"/>
                </fileset>
            </checksum>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ChecksumTask.InitializeTask(System.Xml.XmlNode)">
            <summary>
            Initializes task and ensures the supplied attributes are valid.
            </summary>
            <param name="taskNode">Xml node used to define this task instance.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ChecksumTask.ExecuteTask">
            <summary>
            This is where the work is done
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ChecksumTask.WriteChecksum(System.String,System.String)">
            <summary>
            Writes a checksum to a destination file
            </summary>
            <param name="filename"></param>
            <param name="checksum"></param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ChecksumTask.Algorithm">
            <summary>
            Name of Algorithm to use when calculating
            the checksum. Can be MD5 or SHA1.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ChecksumTask.FileExtension">
            <summary>
            The generated checksum file's name will be the 
            original filename with "." and fileext 
            added to it. Defaults to the 
            algorithm name being used
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ChecksumTask.FileSet">
            <summary>
            Set of files to use as input
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.CodeStatsTask">
            <summary>
            Generates statistics from source code.
            </summary>
            <remarks>
            Scans files in a fileset counting lines.
            </remarks>
            <example>
              <para>
              Generate statistics for a set of C# and VB.NET sources, applying 
              different labels for both.
              </para>
              <code>
                <![CDATA[
            <codestats output="test.xml" append="true" buildname="MyBuildName">
                <counts>
                    <count label="C#">
                        <fileset>
                            <include name="**/*.cs" />
                        </fileset>
                    </count>
                    <count label="VB">
                        <fileset>
                            <include name="**\*.vb" />
                        </fileset>
                    </count>
                </counts>
            </codestats>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Generate statistics for all C# sources and only output a summary to 
              the log.
              </para>
              <code>
                <![CDATA[
            <codestats output="test.xml" verbose="true" summarize="true">
                <counts>
                    <count label="C#">
                        <fileset>
                            <include name="**\*.cs" />
                        </fileset>
                    </count>
                </counts>
            </codestats>
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.CodeStatsTask.CodeStats">
            <summary>
            Set of line counters to enable.  
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.CodeStatsTask.BuildName">
            <summary>
            An identifier to be able to track which build last updated the 
            code stats file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.CodeStatsTask.AppendFile">
            <summary>
            Specifies whether the results should be appended to the output file.
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.CodeStatsTask.Summarize">
            <summary>
            If you only want to show summary stats for the whole fileset
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.CodeStatsTask.OutputFile">
            <summary>
            The name of the file to save the output to (in XML).
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.COMRegisterTask">
            <summary>
            Register COM servers or type libraries.
            </summary>
            <remarks>
            <para>
            COM register task will try and register any type of COM related file 
            that needs registering.
            </para>
            <para>Executable files (.exe) will be registered as exe servers, type 
            libaries (.tlb) registered with RegisterTypeLib and for all other 
            filetypes it will attempt to register them as dll servers.
            </para>
            </remarks>
            <example>
              <para>Register a single dll server.</para>
              <code>
                <![CDATA[
            <comregister file="myComServer.dll" />
                ]]>
              </code>
            </example>
            <example>
              <para>Register a single exe server </para>
              <code>
                <![CDATA[
            <comregister file="myComServer.exe" />
                ]]>
              </code>
            </example>
            <example>
              <para>Register a set of COM files at once.</para>
              <code>
                <![CDATA[
            <comregister unregister="false">
                <fileset>
                    <include name="an_ExeServer.exe" />
                    <include name="a_TypeLibrary.tlb" />
                    <include name="a_DllServer.dll" />
                    <include name="an_OcxServer.ocx" />
                </fileset>
            </comregister>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.COMRegisterTask.RegisterDllServer(System.String)">
            <summary>
            Register an inproc COM server, usually a .dll or .ocx
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.COMRegisterTask.RegisterTypelib(System.String)">
            <summary>
            Register a COM type library
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.COMRegisterTask.RegisterExeServer(System.String)">
            <summary>
            Register exe servers.
            </summary>
            <param name="path"></param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.COMRegisterTask.File">
            <summary>
            The name of the file to register. This is provided as an alternate 
            to using the task's fileset.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.COMRegisterTask.Unregister">
            <summary>Unregistering this time. ( /u paramater )Default is "false".</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.COMRegisterTask.COMRegisterFileSet">
            <summary>
            The set of files to register.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.COMRegisterTask.DynamicPInvoke">
            <summary>
            Helper class to synamically build an assembly with the correct 
            P/Invoke signature
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.COMRegisterTask.DynamicPInvoke.DynamicDllFuncInvoke(System.String,System.String)">
            <summary>
            Register a given dll.
            </summary>
            <param name="dll"></param>
            <param name="entrypoint"></param>
            <returns></returns>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ConcatTask">
            <summary>
            A task that concatenates a set of files.
            Loosely based on Ant's Concat task.
            </summary>
            <remarks>
            <para>
            This task takes a set of input files in a fileset
            and concatenates them into a single file. You can 
            either replace the output file, or append to it 
            by using the append attribute.
            </para>
            <para>
            The order the files are concatenated in is not
            especified.
            </para>
            </remarks>
            <example>
              <code>
                <![CDATA[
            <concat destfile="${outputdir}\Full.txt" append="true">
                <fileset>
                    <include name="${outputdir}\Test-*.txt" />
                </fileset>
            </concat>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ConcatTask.InitializeTask(System.Xml.XmlNode)">
            <summary>
            Initializes task and ensures the supplied attributes are valid.
            </summary>
            <param name="taskNode">Xml node used to define this task instance.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ConcatTask.ExecuteTask">
            <summary>
            This is where the work is done
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ConcatTask.OpenDestinationFile">
            <summary>
            Opens the destination file according
            to the specified flags
            </summary>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ConcatTask.AppendFiles(System.IO.FileStream)">
            <summary>
            Appends all specified files
            </summary>
            <param name="output">File to write to</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ConcatTask.DestinationFile">
            <summary>
            Name of the destination file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ConcatTask.Append">
            <summary>
            Specifies whether to append to the destination file.
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ConcatTask.FileSet">
            <summary>
            Set of files to use as input.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.DicsoTask">
            <summary>
            Discovers the URLs of XML web services on a web server and saves documents
            related to them to the local disk. The resulting .discomap, .wsdl, and .xsd files
            can be used with the <see cref="T:NAnt.Contrib.Tasks.WsdlTask"/> to produce web service clients and
            and abstract web service servers using ASP.NET.
            </summary>
            <example>
              <para>Generate a proxy class for a web service.</para>
              <code>
                <![CDATA[
            <disco 
                path="http://www.somewhere.com/myservice.wsdl"
                language="CS" 
                namespace="MyCompany.MyService" 
                outfile="MyService.cs" 
            />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.DicsoTask.ExecuteTask">
            <summary>
            Discover the details for the specified web service.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.Path">
            <summary>The URL or Path to discover.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.NoLogo">
            <summary>Suppresses the banner.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.NoSave">
            <summary>Do not save the discovered documents to the local disk.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.OutputDir">
            <summary>The output directory to save discovered documents in.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.Username">
            <summary>Username of an account with credentials to access a
            server that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.Password">
            <summary>Password of an account with credentials to access a
            server that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.Domain">
            <summary>Domain of an account with credentials to access a
            server that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.Proxy">
            <summary>URL of a proxy server to use for HTTP requests.
            The default is to use the system proxy setting.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.ProxyUsername">
            <summary>Username of an account with credentials to access a
            proxy that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.ProxyPassword">
            <summary>Password of an account with credentials to access a
            proxy that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.ProxyDomain">
            <summary>Domain of an account with credentials to access a
            proxy that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.ProgramArguments">
            <summary>
            Gets the command-line arguments for the external program.
            </summary>
            <value>
            The command-line arguments for the external program.
            </value>
        </member>
        <member name="T:NAnt.Contrib.Tasks.FxCopTask">
            <summary>
            Analyzes managed code assemblies and reports information about the 
            assemblies, such as possible design, localization, performance, and 
            security improvements.
            </summary>
            <remarks>
              <note>
              this task relies on fxcopcmd.exe being in your PATH environment variable.  
              You can download the latest FxCop from <see href="http://www.gotdotnet.com/team/fxcop/" />.
              </note>
            </remarks>
            <example>
              <code>
                <![CDATA[
            <fxcop directOutputToConsole="true" projectFile="${build.dir}\Sample.fxcop">
                <targets>
                    <include name="${build.dir}\bin\*.dll" />
                </targets>
                <rules>
                    <include name="${build.dir}\rules\*.dll" />
                </rules>
            </fxcop>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.FxCopTask.#ctor">
            <summary>
            Creates a new <see cref="T:NAnt.Contrib.Tasks.FxCopTask"/> instance.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.FxCopTask.PrepareProcess(System.Diagnostics.Process)">
            <summary>
            Performs logic before the external process is started
            </summary>
            <param name="process">Process.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.FxCopTask.BuildArguments">
            <summary>
            Builds the arguments to pass to the exe.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.ApplyOutXsl">
            <summary>
            Applies the XSL transformation specified in /outXsl to the analysis report before saving the file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.DirectOutputToConsole">
            <summary>
            Directs analysis output to the console or to the Output window in Visual Studio .NET. By default, the XSL file FxCopConsoleOutput.xsl is applied to the output before it is displayed.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.ConsoleXslFilename">
            <summary>
            Specifies the XSL or XSLT file that contains a transformation to be applied to the analysis output before it is displayed in the console.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.DependencyDirectories">
            <summary>
            Specifies additional directories to search for assembly dependencies. FxCopCmd always searches the target assembly directory and the current working directory.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.TargetAssemblies">
            <summary>
            Specifies the target assembly to analyze.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.ImportFiles">
            <summary>
            Specifies the name of an analysis report or project file to import. Any messages in the imported file that are marked as excluded are not included in the analysis results.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.AnalysisReportFilename">
            <summary>
            Specifies the file name for the analysis report.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.OutputXslFilename">
            <summary>
            Specifies the XSL or XSLT file that is referenced by the xml-stylesheet processing instruction in the analysis report.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.PlatformDirectory">
            <summary>
            Specifies the location of the version of Mscorlib.dll that was used when building the target assemblies if this version is not installed on the computer running FxCopCmd.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.ProjectFile">
            <summary>
            Specifies the filename of FxCop project file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.RuleLibraries">
            <summary>
            Specifies the filename(s) of FxCop project file(s).
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.IncludeSummaryReport">
            <summary>
            Includes a summary report with the informational messages returned by FxCopCmd.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.TypeList">
            <summary>
            Comma-separated list of type names to analyze.  This option disables analysis of assemblies, namespaces, and resources; only the specified types and their members are included in the analysis.  
            Use the wildcard character '*' at the end of the name to select multiple types.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.SaveResults">
            <summary>
            Saves the results of the analysis in the project file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.ProgramArguments">
            <summary>
            Gets the program arguments.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.GacInstallTask">
            <summary>
            Installs assemblies into the Global Assembly Cache (GAC) by using the <c>gacutil</c> SDK tool.
            </summary>
            <remarks>
            <para>
            Assemblies can be installed to the GAC with or without reference counting. The full details of reference counting can be found in
            the SDK documentation.
            </para>
            </remarks>
            <example>
              <para>Installs <c>Shared.dll</c> into the GAC.</para>
              <code>
                <![CDATA[
            <gac-install>
                <assemblies>
                    <include name="Shared.dll" />
                </assemblies>
            </gac-install>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Installs <c>Shared.dll</c> and <c>MyWeb.dll</c> into the GAC.
              </para>
              <code>
                <![CDATA[
            <gac-install>
                <assemblies>
                    <include name="Shared.dll" />
                    <include name="MyWeb.dll" />
                </assemblies>
            </gac-install>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Installs <c>Shared.dll</c> and <c>MyWeb.dll</c> into the GAC and 
              specifies reference information.
              </para>
              <code>
                <![CDATA[
            <gac-install scheme-type="Opaque" scheme-id="MyID" scheme-description="My description">
                <assemblies>
                    <include name="Shared.dll" />
                    <include name="MyWeb.dll" />
                </assemblies>
            </gacinstall>
                ]]>
              </code>
            </example>
        </member>
        <member name="T:NAnt.Contrib.Tasks.GacTaskBase">
            <summary>
            Base class functionality for the GAC tasks.
            </summary>
            <remarks>
            Concrete GAC tasks extend this class in order to obtain common functionality.
            </remarks>
        </member>
        <member name="F:NAnt.Contrib.Tasks.GacTaskBase._currentAssembly">
            <summary>
            Stores the details of the assembly currently being operated against. This could be a name or
            path, depending on the concrete task.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.GacTaskBase._force">
            <summary>
            See <see cref="P:NAnt.Contrib.Tasks.GacTaskBase.Force"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.GacTaskBase._reference">
            <summary>
            See <see cref="P:NAnt.Contrib.Tasks.GacTaskBase.Reference"/>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.GacTaskBase.#ctor">
            <summary>
            Constructs and initialises an instance of <c>GacTask</c>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.GacTaskBase.StartProcess">
            <summary>
            Starts the process that is wrapped by this GAC task.
            </summary>
            <remarks>
            Provided only to seal the implementation of <c>StartProcess()</c>.
            </remarks>
            <returns>The process that was started.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.GacTaskBase.InitializeTask(System.Xml.XmlNode)">
            <summary>
            Validates the task's configuration.
            </summary>
            <param name="taskNode">The task node.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.GacTaskBase.ExecuteTask">
            <summary>
            Executes the task.
            </summary>
            <remarks>
            Provided only to seal the implementation of <c>ExecuteTask()</c>.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.GacTaskBase.AppendProgramArguments(System.Text.StringBuilder)">
            <summary>
            Appends any task-specific program arguments.
            </summary>
            <param name="sb">The <c>StringBuilder</c> on which to append program arguments.</param>
            <remarks>
            Subclasses must override this method to return the arguments with which to run the GAC task.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.GacTaskBase.BeforeExecuteTask">
            <summary>
            Invoked prior to invoking <c>ExecuteTask()</c> on the base class.
            </summary>
            <remarks>
            Allows, for example, subclasses to output useful information to the log.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacTaskBase.Force">
            <summary>
            Gets or sets a value indicating whether the GAC operation will be forced.
            </summary>
            <remarks>
            The exact meaning of this property is dependent on the subclass. As such, subclasses should override this
            property to provide a valid description.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacTaskBase.Reference">
            <summary>
            Specifies reference details to use when working with the GAC.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacTaskBase.AssemblyList">
            <summary>
            Concrete GAC tasks must override this property to return an array of assembly names or paths
            upon which to operate.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacTaskBase.ExeName">
            <summary>
            Gets the executable name for the <c>gacutil</c> command-line tool.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacTaskBase.ReferenceSpecified">
            <summary>
            Specifies whether a reference was specified for the GAC task.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacTaskBase.CurrentAssembly">
            <summary>
            Gets the current assembly being operated against.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacTaskBase.ProgramArguments">
            <summary>
            Gets the program arguments with which to run the <c>gacutil</c> process.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.GacInstallTask._assemblies">
            <summary>
            See <see cref="P:NAnt.Contrib.Tasks.GacInstallTask.Assemblies"/>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.GacInstallTask.#ctor">
            <summary>
            Constructs and initialises an instance of the <c>GacInstallTask</c>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.GacInstallTask.AppendProgramArguments(System.Text.StringBuilder)">
            <summary>
            Appends any install-specific arguments.
            </summary>
            <param name="sb">The <c>StringBuilder</c> to append arguments to.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.GacInstallTask.BeforeExecuteTask">
            <summary>
            Outputs log information.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacInstallTask.Assemblies">
            <summary>
            Specifies the assemblies to install.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacInstallTask.AssemblyList">
            <summary>
            Gets the assembly list to install.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacInstallTask.Force">
            <summary>
            If <see langword="true" />, the specified assemblies will be forcibly 
            installed. Any existing duplicate assemblies in the GAC will be 
            overwritten. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.GacTask">
            <summary>
            Manipulates the contents of the global assembly cache.
            </summary>
            <remarks>
              <para>
              This tasks provides some of the same functionality as the gacutil tool 
              provided in the .NET Framework SDK.
              </para>
              <para>
              Specifically, the <see cref="T:NAnt.Contrib.Tasks.GacTask"/> allows you to install assemblies 
              into the cache and remove them from the cache.
              </para>
              <para>
              Refer to the <see href="ms-help://MS.NETFrameworkSDK/cptools/html/cpgrfglobalassemblycacheutilitygacutilexe.htm">
              Global Assembly Cache Tool (Gacutil.exe)</see> for more information.
              </para>
            </remarks>
            <example>
              <para>
              Inserts assembly <c>mydll.dll</c> into the global assembly cache.
              </para>
              <code>
                <![CDATA[
            <gac assembly="mydll.dll" action="install" />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Removes the assembly <c>hello</c> from the global assembly cache and 
              the native image cache.
              </para>
              <code>
                <![CDATA[
            <gac assembly="hello" action="uninstall" />
                ]]>
              </code>
              <para>
              Note that the previous command might remove more than one assembly 
              from the assembly cache because the assembly name is not fully 
              specified. For example, if both version 1.0.0.0 and 3.2.2.1 of 
              <c>hello</c> are installed in the cache, both of the assemblies will 
              be removed from the global assembly cache.
              </para>
            </example>
            <example>
              <para>
              Use the following example to avoid removing more than one assembly. 
              This command removes only the hello assembly that matches the fully 
              specified version number, culture, and public key.
              </para>
              <code>
                <![CDATA[
            <gac assembly="hello,Version=1.0.0.1,Culture=de,PublicKeyToken=45e343aae32233ca" action="uninstall" />
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacTask.AssemblyName">
            <summary>
            The name of a file that contains an assembly manifest.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacTask.ActionType">
            <summary>
            Defines the action to take with the assembly. The default is 
            <see cref="F:NAnt.Contrib.Tasks.GacTask.ActionTypes.install"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacTask.AssemblyFileSet">
            <summary>
            Fileset are used to define multiple assemblies.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.GacTask.ActionTypes">
            <summary>
            Defines the actions that can be performed on an assembly using the
            <see cref="T:NAnt.Contrib.Tasks.GacTask"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.GacTask.ActionTypes.install">
            <summary>
            Installs an assembly into the global assembly cache.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.GacTask.ActionTypes.overwrite">
            <summary>
            Installs an assembly into the global assembly cache. If an assembly 
            with the same name already exists in the global assembly cache, it is 
            overwritten.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.GacTask.ActionTypes.uninstall">
            <summary>
            Uninstalls an assembly from the global assembly cache.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.GacUninstallTask">
            <summary>
            Uninstalls assemblies from the Global Assembly Cache (GAC) by using the <c>gacutil</c> SDK tool.
            </summary>
            <remarks>
            <para>
            Assemblies are specified via an <see cref="T:NAnt.Contrib.Types.AssemblySet"/>. Individual assemblies are specified by their identity information. Only a
            name is required but, optionally, the assembly version, culture and public key token may be specified.
            </para>
            <para>
            Assemblies can be uninstalled from the GAC with or without reference counting. The full details of reference counting can be found in
            the SDK documentation.
            </para>
            </remarks>
            <example>
              <para>Uninstalls <c>Shared</c> assembly from the GAC.</para>
              <code>
                <![CDATA[
            <gac-uninstall>
                   <assemblies>
                       <assembly name="Shared" />
                   </assemblies>
            </gac-uninstall>
                ]]>
            </code>
            </example>
            <example>
              <para>
              Uninstalls <c>Shared</c> and <c>MyWeb</c> from the GAC.
              </para>
              <code>
                <![CDATA[
            <gac-uninstall>
                   <assemblies>
                       <assembly name="Shared" />
                       <assembly name="MyWeb" />
                   </assemblies>
            </gac-uninstall>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Decrements references to <c>Shared</c> in the GAC and uninstalls if 
              the reference count reaches zero.
              </para>
              <code>
                <![CDATA[
            <gac-uninstall scheme-type="Opaque" scheme-id="MyID" scheme-description="My description">
                   <assemblies>
                       <assembly name="Shared" />
                   </assemblies>
            </gac-uninstall>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Uninstalls version <c>2.1.7.9201</c> of <c>Shared</c> plus the 
              Australian-cultured <c>MyWeb</c> from the GAC.
              </para>
              <code>
                <![CDATA[
            <gac-uninstall>
                   <assemblies>
                       <assembly name="Shared" version="2.1.7.9201" />
                       <assembly name="MyWeb" culture="en-AU" />
                   </assemblies>
            </gac-uninstall>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Uninstalls the neutrally-cultured, version <c>1.0.5000.0</c> of 
              <c>System.Xml</c> from the native image cache. The assembly must
              also have a public key token of <c>b77a5c561934e08a</c> to be 
              uninstalled.
              </para>
              <code>
                <![CDATA[
            <gac-uninstall native="true">
                   <assemblies>
                       <assembly name="System.Xml" version="1.0.5000.0" public-key-token="b77a5c561934e08a" culture="Neutral" />
                   </assemblies>
            </gac-uninstall>
                ]]>
              </code>
            </example>
        </member>
        <member name="F:NAnt.Contrib.Tasks.GacUninstallTask._native">
            <summary>
            See <see cref="P:NAnt.Contrib.Tasks.GacUninstallTask.Native"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.GacUninstallTask._assemblies">
            <summary>
            See <see cref="P:NAnt.Contrib.Tasks.GacUninstallTask.Assemblies"/>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.GacUninstallTask.#ctor">
            <summary>
            Constructs an instance of the <c>GacUninstallTask</c>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.GacUninstallTask.AppendProgramArguments(System.Text.StringBuilder)">
            <summary>
            Appends any install-specific arguments.
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.GacUninstallTask.BeforeExecuteTask">
            <summary>
            Outputs log information.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacUninstallTask.Native">
            <summary>
            If <see langword="true" />, specifies that the assemblies should be 
            uninstalled from the native image cache. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacUninstallTask.Assemblies">
            <summary>
            Specifies the assemblies to uninstall.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacUninstallTask.AssemblyList">
            <summary>
            Gets the assembly list to uninstall.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacUninstallTask.Force">
            <summary>
            If <see langword="true" />, the specified assemblies will be forcibly 
            removed from the GAC. All references to the specified assemblies will
            be removed from the GAC prior to removing the assemblies themselves. 
            The default is <see langword="false" />.
            </summary>
            <remarks>
            You cannot use this option to remove an assembly that was installed using Microsoft Windows Installer.
            </remarks>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Grep.GrepTask">
            <summary>
            Searches files for a regular-expression and produces an XML report of 
            the matches.
            </summary>
            <example>
                <para>
                    Extract all <i>TODO:</i>, <i>UNDONE:</i> or <i>HACK:</i>-
                    comment-tags from C# source files and write them to a file
                    <i>out.xml</i>. (A xslt-stylesheet could then transform it to
                    a nice html-page for your project-homepage, but that is beyond
                    the scope of this example.) 
                </para>
                <para>
                    <i>Path</i>, <i>File</i> and <i>LineNumber</i> are automatically
                    generated elements.
                </para>
                <code>
                    <![CDATA[
            <grep output="out.xml" pattern="// (?'Type'TODO|UNDONE|HACK): (\[(?'Author'\w*),(?'Date'.*)\])? (?'Text'[^\n\r]*)">
                <fileset>
                    <include name="*.cs" />
                </fileset>
            </grep>
                    ]]>
                </code>
                <para>
                    The resulting XML file for a comment-tag  
                    'TODO: [md, 14-02-2004] comment this method'
                    will look like
                </para>
                <code>
                    <![CDATA[
            <?xml version="1.0" encoding="utf-8" ?> 
            <Matches>
                <Match>
                    <Type>TODO</Type> 
                    <Text>comment this method</Text> 
                    <Path>C:\MyProjects\MyPath</Path>
                    <File>MyFile.cs</Filename> 
                    <LineNumber>146</LineNumber> 
                    <Author>md</Author>
                    <Date>14-02-2004</Date>
                </Match>
                ...
            </Matches>
                    ]]>
                </code> 
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Grep.GrepTask.ExecuteTask">
            <summary>
            Performs the regex-search.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Grep.GrepTask.WriteXml(NAnt.Contrib.Tasks.Grep.MatchCollection,System.IO.StreamWriter)">
            <summary>
            Writes the collection of matches to the specified <see cref="T:System.IO.StreamWriter"/>
            in XML format.
            </summary>
            <param name="matches">The matches to write.</param>
            <param name="writer"><see cref="T:System.IO.StreamWriter"/> to write the matches to.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Grep.GrepTask.WriteMatches(NAnt.Contrib.Tasks.Grep.MatchCollection)">
            <summary>
            Writes the specified matches to <see cref="P:NAnt.Contrib.Tasks.Grep.GrepTask.OutputFile"/>.
            </summary>
            <param name="matches">The collection of matches to write.</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Grep.GrepTask.OutputFile">
            <summary>
            Specifies the name of the output file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Grep.GrepTask.Pattern">
            <summary>
            Specifies the regular-expression to search for.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Grep.GrepTask.InputFiles">
            <summary>
            The set of files in which the expression is searched.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Grep.LineCounter">
            <summary>
            This purpose of this class is to get the line-numbers within 
            a string for a specific position of a character 
            (an index, as returned by the <see cref="T:System.Text.RegularExpressions.Regex"/> class).
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Grep.LineCounter._string">
            <summary>
            The string to count in
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Grep.LineCounter._currentPos">
            <summary>
            The current position within <see cref="F:NAnt.Contrib.Tasks.Grep.LineCounter._string"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Grep.LineCounter._currentLine">
            <summary>
            The number of line feeds upto (but exluding) <see cref="F:NAnt.Contrib.Tasks.Grep.LineCounter._currentPos"/>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Grep.LineCounter.#ctor(System.String)">
            <summary>
            Constructs a line-counter for a <see cref="T:System.String"/>.
            </summary>
            <param name="str"><see cref="T:System.String"/> for which lines are counted.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Grep.LineCounter.CountTo(System.Int32)">
            <summary>
            Counts the line-numbers until the position <paramref name="pos" />
            is reached.
            </summary>
            <param name="pos">Index into the string given during construction </param>
            <returns>
            The number of lines.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Grep.LineCounter.Count(System.String,System.Char,System.Int32,System.Int32)">
            <summary>
            Counts the number of occurences of <paramref name="c"/> in the 
            range from <paramref name="start"/> to <paramref name="end"/> in 
            string <paramref name="str"/>.
            </summary>
            <param name="str"><see cref="T:System.String"/> to count in.</param>
            <param name="c">Character to count.</param>
            <param name="start">Start of range.</param>
            <param name="end">End of range.</param>
            <returns>
            The number of occurences of <paramref name="c"/> in the range from 
            <paramref name="start"/> to <paramref name="end"/> in string 
            <paramref name="str"/>.
            </returns>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Grep.Match">
            <summary>
            Encapsulation of a match of a regular-expression with the
            associated named capture-groups.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Grep.Match.values">
            <summary>
            <see cref="T:System.Collections.Hashtable"/> containing the mapping from group names 
            to values.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Grep.Match.WriteXml(System.Xml.XmlTextWriter)">
            <summary>
            Writes this match to an <see cref="T:System.Xml.XmlTextWriter"/>.
            </summary>
            <param name="xmlWriter">The <see cref="T:System.Xml.XmlTextWriter"/> to write to.</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Grep.Match.Item(System.String)">
            <summary>
            Gets or sets the value for a capture group.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Grep.MatchCollection">
            <summary>
             A strongly-typed collection of <see cref="T:NAnt.Contrib.Tasks.Grep.Match"/> instances.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Grep.MatchCollection.Add(NAnt.Contrib.Tasks.Grep.Match)">
            <summary>
            Adds a <see cref="T:NAnt.Contrib.Tasks.Grep.Match"/> to this collection.
            </summary>
            <param name="match"><see cref="T:NAnt.Contrib.Tasks.Grep.Match"/> to add.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Grep.MatchCollection.Add(NAnt.Contrib.Tasks.Grep.MatchCollection)">
            <summary>
            Adds all <see cref="T:NAnt.Contrib.Tasks.Grep.Match"/> instances <paramref name="matches"/>
            to this collection.
            </summary>
            <param name="matches">Collection of <see cref="T:NAnt.Contrib.Tasks.Grep.Match"/> instances to add.</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Grep.MatchCollection.Item(System.Int32)">
            <summary>
            Gets the <paramref name="idx" />th match stored in this collection.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Grep.Pattern">
            <summary>
            Encapsulation of a search pattern.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Grep.Pattern.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Tasks.Grep.Pattern"/> class from 
            a regular-expression.
            </summary>
            <param name="regex">The regular-expression.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Grep.Pattern.ConcatenateCaptures(System.Text.RegularExpressions.Group)">
            <summary>
            Concatenates the captures of <paramref name="group"/> to a string.
            </summary>
            <param name="group"><see cref="T:System.Text.RegularExpressions.Group"/> containing the captures.</param>
            <returns>
            <see cref="T:System.String"/> containg the concatenated captures.
            </returns>
            <remarks>
            A named-group can captured multiple times, when the regular
            expression has a quantifier, e.g. (// (?'Text'.*) )* will match
            multiline comments with group <i>Text</i> having a capture for
            every line.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Grep.Pattern.Extract(System.String,System.String)">
            <summary>
            Extracts the matches of this pattern from <paramref name="source" />.
            </summary>
            <param name="filename">The name of the file associated with <paramref name="source" />.</param>
            <param name="source">The source string</param>
            <returns>
            A collection of found matches.
            </returns>
        </member>
        <member name="T:NAnt.Contrib.Tasks.HxCompTask">
            <summary>
            Compiles a Microsoft HTML Help 2.0 Project.
            </summary>
            <example>
              <para>Compile a help file.</para>
              <code>
                <![CDATA[
            <hxcomp contents="MyContents.HxC" output="MyHelpFile.HxS" projectroot="HelpSourceFolder" />
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.Contents">
            <summary>
            The name of the contents (.HxC) file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.LogFile">
            <summary>
            ANSI/DBCS log filename.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.UnicodeLogFile">
            <summary>
            Unicode log filename.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.ProjectRoot">
            <summary>
            Root directory containing Help 2.0 project files.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.OutputFile">
            <summary>
            Output (.HxS) filename.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.NoInformation">
            <summary>
            Generate no informational messages.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.NoErrors">
            <summary>
            Generate no error messages.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.NoWarnings">
            <summary>
            Generate no warning messages.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.UncompileFile">
            <summary>
            File to be decompiled.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.UncompileOutputDir">
            <summary>
            Directory to place decompiled files into.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.ProgramArguments">
            <summary>
            Arguments of program to execute
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.HxRegTask">
            <summary>
            Registers a Microsoft HTML Help 2.0 Collection.
            </summary>
            <example>
              <para>Register a help namespace.</para>
              <code>
                <![CDATA[
            <hxreg namespace="MyProduct.MyHelp" title="MyProductHelp" collection="MyHelp.HxC" helpfile="MyHelp.HxS" />
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.Namespace">
            <summary>Help collection namespace.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.Title">
            <summary>Title identifier.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.Collection">
            <summary>Collection (.HxC) filename. </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.Description">
            <summary>Description of the namespace.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.HelpFile">
            <summary>Help (.HxS) filename.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.Index">
            <summary>Index (.HxI) filename.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.SearchFile">
            <summary>Combined full-text search (.HxQ) filename.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.AttrIndex">
            <summary>Combined attribute index (.HxR) filename.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.Language">
            <summary>Language ID.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.Alias">
            <summary>Alias.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.CommandFile">
            <summary>Filename of a file containing HxReg commands.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.UnRegister">
            <summary>Unregister a namespace, title, or alias.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.ProgramArguments">
            <summary>
            Arguments of program to execute
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.MgmtClassGenTask">
            <summary>
            A task that generates strongly typed WMI classes using 
            <c>mgmtclassgen.exe</c>.
            </summary>
            <remarks>
            The Management Strongly Typed Class Generator 
            enables you to quickly generate an early-bound 
            managed class for a specified Windows Management 
            Instrumentation (WMI) class. The generated 
            class simplifies the code you must write to access 
            an instance of the WMI class.
            </remarks>
            <example>
              <code>
                <![CDATA[
            <mgmtclassgen 
                wmiclass="Win32_LogicalDisk" 
                language="CS"
                machine="SomeMachine"
                path="Root\cimv2"
                namespace="Winterdom.WMI"
                out="${outputdir}\LogicalDisk.cs"
                username="Administrator"
                password="password"
            />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MgmtClassGenTask.InitializeTask(System.Xml.XmlNode)">
            <summary>
            Initializes task and ensures the supplied attributes are valid.
            </summary>
            <param name="taskNode">Xml node used to define this task instance.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MgmtClassGenTask.ExecuteTask">
            <summary>
            This is where the work is done
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MgmtClassGenTask.WmiClass">
            <summary>
            Specifies the name of the WMI class
            to generate the strongly typed class
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MgmtClassGenTask.Language">
            <summary>
            Specifies the language in which to generate
            the class. Possible values are: CS, VB, JS
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MgmtClassGenTask.Machine">
            <summary>
            Specifies the machine to connect to.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MgmtClassGenTask.Path">
            <summary>
            Specifies the path to the WMI namespace
            that contains the class.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MgmtClassGenTask.Namespace">
            <summary>
            Namespace of the generated .NET class
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MgmtClassGenTask.OutFile">
            <summary>
            Path of the file to generate
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MgmtClassGenTask.Username">
            <summary>
            User name to use when connecting to
            the specified machine
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MgmtClassGenTask.Password">
            <summary>
            Password to use when connecting to the 
            specified machine
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MgmtClassGenTask.ProgramFileName">
            <summary>
            Filename of program to execute
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MgmtClassGenTask.ProgramArguments">
            <summary>
            Arguments of program to execute
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.NGenTask">
            <summary>
            Pre-translates native code for an assembly containing IL (Intermediary 
            Language bytecode) on the Windows platform.
            </summary>
            <example>
              <code>
                <![CDATA[
            <ngen assembly="MyAssembly.dll" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.NGenTask.InitializeTask(System.Xml.XmlNode)">
            <summary>
            Initializes task and ensures the supplied attributes are valid.
            </summary>
            <param name="taskNode">Xml node used to define this task instance.</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NGenTask.Assembly">
            <summary>Assembly path or display name.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NGenTask.Show">
            <summary>If existing images should be shown.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NGenTask.Delete">
            <summary>If existing images should be deleted.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NGenTask.Debug">
            <summary>If an image should be generated which
            can be used under a debugger.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NGenTask.DebugOptimized">
            <summary>If an image should be generated which
            can be used under a debugger in optimized
            debugging mode.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NGenTask.Profiled">
            <summary>If an image should be generated which
            can be used under a profiler.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NGenTask.ProgramArguments">
            <summary>
            Arguments of program to execute
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.NUnitReportTask">
            <summary>
            A task that generates a summary HTML
            from a set of NUnit xml report files.
            Loosely based on Erik Hatcher JUnitReport for Ant.
            </summary>
            <remarks>
            This task can generate a combined HTML report out of a
            set of NUnit result files generated using the 
            XML Result Formatter.
            
            By default, NUnitReport will generate the combined
            report using the NUnitSummary.xsl file located at the
            assembly's location, but you can specify a different
            XSLT template to use with the <code>xslfile</code>
            attribute.
            
            Also, all the properties defined in the current
            project will be passed down to the XSLT file as 
            template parameters, so you can access properties
            such as nant.project.name, nant.version, etc.
            </remarks>
            <example>
              <code><![CDATA[
              <nunitreport 
                    out="${outputdir}\TestSummary.html"
                    >
                 <fileset>
                    <include name="${outputdir}\Test-*.xml" />
                 </fileset>
              </nunitreport>
              
              ]]></code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.NUnitReportTask.InitializeTask(System.Xml.XmlNode)">
            <summary>
            Initializes task and ensures the supplied attributes are valid.
            </summary>
            <param name="taskNode">Xml node used to define this task instance.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.NUnitReportTask.ExecuteTask">
            <summary>
            This is where the work is done
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.NUnitReportTask.CreateSummaryXmlDoc">
            <summary>
            Initializes the XmlDocument instance
            used to summarize the test results
            </summary>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.NUnitReportTask.GetPropertyList">
            <summary>
            Builds an XsltArgumentList with all
            the properties defined in the 
            current project as XSLT parameters.
            </summary>
            <returns>Property List</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.NUnitReportTask.LoadTransform">
            <summary>
            Loads the XSLT Transform
            </summary>
            <remarks>
            This method will load the file specified
            through the the xslfile attribute, or
            the default transformation included
            as a managed resource.
            </remarks>
            <returns>The Transformation to use</returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NUnitReportTask.OutFilename">
            <summary>
            Name of Output HTML file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NUnitReportTask.XslFile">
            <summary>
            XSLT file used to generate the report.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NUnitReportTask.XmlFileSet">
            <summary>
            Set of XML files to use as input
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.NUnitReportTask.LocalResXmlResolver">
            <summary>
            Custom XmlResolver used to load the 
            XSLT files out of this assembly resources.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.NUnitReportTask.LocalResXmlResolver.GetEntity(System.Uri,System.String,System.Type)">
            <summary>
            Loads the XSLT file
            </summary>
            <param name="absoluteUri"></param>
            <param name="role"></param>
            <param name="objToReturn"></param>
            <returns></returns>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.P4Add">
            <summary>
            Open file(s) in a client workspace for addition to the depot.
            </summary>
            <example>
              <para>
              Add all cs files under the given directory into the "new" changelist 
              (will be created if it doesn't already exist).
              </para>
              <code>
                <![CDATA[
            <p4add file="C:\Src\Project\*.cs" changelist="new" />
                ]]>
              </code>
            </example>
            <example>
              <para>Add Test.txt into the default changelist.</para>
              <code>
                <![CDATA[
            <p4add file="C:\Src\Project\Test.txt" />
                ]]>
              </code>
            </example>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.P4Base">
            <summary>
            Base class for Perforce (P4) NAnt tasks. See individual task for example usage.
            <seealso cref="T:NAnt.Contrib.Tasks.Perforce.P4Add">P4Add</seealso>
            <seealso cref="T:NAnt.Contrib.Tasks.Perforce.P4Change">P4Change</seealso>
            <seealso cref="T:NAnt.Contrib.Tasks.Perforce.P4Delete">P4Delete</seealso>
            <seealso cref="T:NAnt.Contrib.Tasks.Perforce.P4Edit">P4Edit</seealso>
            <seealso cref="T:NAnt.Contrib.Tasks.Perforce.P4Label">P4Label</seealso>
            <seealso cref="T:NAnt.Contrib.Tasks.Perforce.P4Labelsync">P4Labelsync</seealso>
            <seealso cref="T:NAnt.Contrib.Tasks.Perforce.P4Print">P4Print</seealso>
            <seealso cref="T:NAnt.Contrib.Tasks.Perforce.P4Reopen">P4Reopen</seealso>
            <seealso cref="T:NAnt.Contrib.Tasks.Perforce.P4Revert">P4Revert</seealso>
            <seealso cref="T:NAnt.Contrib.Tasks.Perforce.P4Submit">P4Submit</seealso>
            <seealso cref="T:NAnt.Contrib.Tasks.Perforce.P4Sync">P4Sync</seealso>
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.P4Base.ExecuteTask">
            <summary>
            Execute the perforce command assembled by subclasses.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Base.Port">
            <summary>
            The p4 server and port to connect to. The default is "perforce:1666".
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Base.Client">
            <summary>
            The p4 client spec to use. The default is the current client.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Base.User">
            <summary>
            The p4 username. The default is the current user.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Base.View">
            <summary>
            The client, branch or label view to operate upon. The default is
            "//...".
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Base.Script">
            <summary>
            Prepends a descriptive field (for example, text:, info:, error:, exit:) 
            to each line of output produced by a Perforce command. This is most 
            often used when scripting. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Base.ProgramArguments">
            <summary>
            Gets the command line arguments for the external program.
            </summary>
            <value>
            The command line arguments for the external program.
            </value>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Base.ExeName">
            <summary>
            Override the ExeName paramater for p4.exe
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Base.CommandSpecificArguments">
            <summary>
            Derived classes should override this to provide command-specific
            commandline arguments.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.P4Add.getSpecificCommandArguments">
            <summary>
            Build the command string for this particular command.
            </summary>
            <returns>
            The command string for this particular command.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Add.File">
            <summary>
            File(s) to add. File name can contain wildcard characters. (Note: 
            this is not using p4 wildcard syntax, but the OS wildcards).
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Add.Changelist">
            <summary>
            Changelist that files will be added into. Changelist will be created 
            if not already present.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Add.Type">
            <summary>
            File Type settings. Applied to all files in the <see cref="P:NAnt.Contrib.Tasks.Perforce.P4Add.File"/> 
            parameter.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Add.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.P4Change">
            <summary>
            Create or delete a changelist specification.
            </summary>
            <example>
              <para>Create a new changelist called "mynewchange".</para>
              <code>
                <![CDATA[
            <p4change changelist="mynewchange" />
                ]]>
              </code>
            </example>
            <example>
              <para>Delete the changelist called "mynewchange".</para>
              <code>
                <![CDATA[
            <p4change changelist="mynewchange" delete="true" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.P4Change.getSpecificCommandArguments">
            <summary>
            Builds the command string for this particular command.
            </summary>
            <returns>
            The command string for this particular command.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Change.Changelist">
            <summary>
            Changelist to create or delete.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Change.Delete">
            <summary>
            If <see langword="false" /> causes passed in changelist to be 
            deleted. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Change.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.P4Client">
            <summary>
            Add/modify/delete a client spec in perforce.
            </summary>
            <example>
              <para>
              Add a client (modify if already present and have sufficient rights).
              </para>
              <code>
                <![CDATA[
            <p4client clientname="myClient" view="//root/test/..." />
                ]]>
              </code>
            </example>
            <example>
              <para>Delete a client.</para>
              <code>
                <![CDATA[
            <p4client delete="true" clientname="myClient" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.P4Client.getSpecificCommandArguments">
            <summary>
            Builds the command string for this particular command.
            </summary>
            <returns>
            The command string for this particular command.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Client.ClientName">
            <summary>
            Name of client to create/delete.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Client.Root">
            <summary>
            Root path for client spec.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Client.Delete">
            <summary>
            Delete the named client. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Client.Force">
            <summary>
            Force a delete even if files are open. The default is 
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Client.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.P4Delete">
            <summary>
            Open file(s) in a client workspace for deletion from the depot.
            </summary>
            <example>
              <para>
              Mark all cs files under the give view for deletion and place them in 
              the "Deleting" changelist.
              </para>
              <code>
                <![CDATA[
            <p4delete view="//Root/ProjectX/Test/...*.cs" changelist="Deleting" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.P4Delete.getSpecificCommandArguments">
            <summary>
            Builds the command string for this particular command.
            </summary>
            <returns>
            The command string for this particular command.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Delete.Changelist">
            <summary>
            Changelist to place the marked for deletion item into.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Delete.View">
            <summary>
            The client, branch or label view to operate upon.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Delete.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.P4Edit">
            <summary>
            Opens file(s) in a client workspace for edit.
            </summary>
            <example>
              <para>
              Open all files in the ProjectX Test folder for edit, and place into 
              the default changelist.
              </para>
              <code>
                <![CDATA[
            <p4edit view="//Root/ProjectX/Test/..." />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Open all *.txt files in the ProjectX Test folder for edit, and place 
              into the "testing" changelist.
              </para>
              <code>
                <![CDATA[
            <p4edit view="//Root/ProjectX/Test/...*.txt" changelist="testing" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.P4Edit.getSpecificCommandArguments">
            <summary>
            Builds the command string for this particular command.
            </summary>
            <returns>
            The command string for this particular command.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Edit.Changelist">
            <summary>
            Changelist to place the opened files into.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Edit.Type">
            <summary>
            File Type settings.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Edit.View">
            <summary>
            The client, branch or label view to operate upon.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Edit.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.P4Info">
            <summary>
            Returns information from the "p4 info" command back into variables for 
            use within the build process.
            </summary>
            <example>
              <para>Fill the variables using the task.</para>
              <code>
                <![CDATA[
            <p4info user="myuser" client="myclient" host="myhost" root="myroot" />
            <echo message="User: ${myuser} - Client: ${myclient} - Host: ${myhost} - Root: ${myroot}" />
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Info.User">
            <summary>
            The name of the property to store the p4 user name in.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Info.Client">
            <summary>
            The name of the property to store the p4 client name in.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Info.Host">
            <summary>
            The name of the property to store the p4 host name in.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Info.Root">
            <summary>
            The name of the property to store the p4 client root in.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.P4Label">
            <summary>
            Create or edit a label specification and its view.
            </summary>
            <example>
              <para>Create a new label called "SDK_V1.2".</para>
              <code>
                <![CDATA[
            <p4label label="SDK_V1.2" view="//Root/ProjectX/Test/...*.txt" />
                ]]>
              </code>
            </example>
            <example>
              <para>Delete the previously created label.</para>
              <code>
                <![CDATA[
            <p4label label="SDK_V1.2" delete="true" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.P4Label.getSpecificCommandArguments">
            <summary>
            Builds the command string for this particular command.
            </summary>
            <returns>
            The command string for this particular command.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Label.Label">
            <summary>
            Name of label to create/delete.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Label.Delete">
            <summary>
            Delete the named label. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Label.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.P4Labelsync">
            <summary>
            Synchronize a label with the contents of the current client workspace.
            </summary>
            <example>
              <para>Apply a previously created label to the specified view.</para>
              <code>
                <![CDATA[
            <p4labelsync label="SDK_V1.2" view="//Root/..." />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.P4Labelsync.getSpecificCommandArguments">
            <summary>
            Builds the command string for this particular command.
            </summary>
            <returns>
            The command string for this particular command.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Labelsync.Label">
            <summary>
            Name of the label to sync the specified or default view with.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Labelsync.Delete">
            <summary>
            Delete the view defined in the label, or matching the input view 
            from the label. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Labelsync.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.P4Print">
            <summary>
            Fetch a specific file from a Perforce depot without needing a clientspec 
            to map it.
            </summary>
            <example>
              <code>
                <![CDATA[
            <p4print file="//depot/foo/mainline/clientspec" outputfile=".\clientspec" />
            <p4client input=".\clientspec" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.P4Print.getSpecificCommandArguments">
            <summary>
            Builds the command string for this particular command.
            </summary>
            <returns>
            The command string for this particular command.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Print.File">
            <summary> 
            The depot or local filename (including optional path) of the file 
            to fetch.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Print.P4OutputFile">
            <summary> 
            The local filename to write the fetched file to.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Print.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.P4Reopen">
            <summary>
            Move opened files between changelists or change the files’ type.
            </summary>
            <remarks>
            This task has two different but related uses:
            Moving opened files between changelists (default or named).
            Changing the type of an opened file.
            </remarks>
            <example>
              <para>
              Move the specified files matching the view into the "New" changelist.
              </para>
              <code>
                <![CDATA[
            <p4reopen view="//Root/...Version.xml" changelist="New" />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Modify the specified files matching the view to the given file type. 
              The change won't affect the repository until submitted.
              </para>
              <code>
                <![CDATA[
            <p4reopen view="//Root/...*.res" type="binary" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.P4Reopen.getSpecificCommandArguments">
            <summary>
            Builds the command string for this particular command.
            </summary>
            <returns>
            The command string for this particular command.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Reopen.View">
            <summary>
            The client, branch or label view to operate upon.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Reopen.Changelist">
            <summary>
            Changelist to place the reopened files into.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Reopen.Type">
            <summary>
            File Type settings.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Reopen.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.P4Revert">
            <summary>
            Discard changes made to open files.
            </summary>
            <example>
              <para>Revert all txt files in a given changelist.</para>
              <code>
                <![CDATA[
            <p4revert changelist="Test" view="//...*.txt" />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Revert all unchanged files opened in the given changelist.
              </para>
              <code>
                <![CDATA[
            <p4revert changelist="Test" revertunchanged="true" />
                ]]>
              </code>
            </example>
            <example>
              <para>Revert all unchanged files opened in any changelist.</para>
              <code>
                <![CDATA[
            <p4revert revertunchanged="true" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.P4Revert.getSpecificCommandArguments">
            <summary>
            Builds the command string for this particular command.
            </summary>
            <returns>
            The command string for this particular command.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Revert.Changelist">
            <summary>
            Changelist to perform the revert action on. optional.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Revert.RevertUnchanged">
            <summary>
            Revert all unchanged or missing files from the changelist. default is false. optional.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Revert.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.P4Set">
            <summary>
            Set registry variables that perforce uses.
            </summary>
            <remarks>
            Note: the environment variables that p4 uses will be set, but will not
            be validated.
            </remarks>
            <example>
              <para>Modify any of the three variables (at least one required).</para>
              <code>
                <![CDATA[
            <p4set client="myClient" user="jonb" port="server:1666" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.P4Set.getSpecificCommandArguments">
            <summary>
            Builds the command string for this particular command.
            </summary>
            <returns>
            The command string for this particular command.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Set.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.P4Submit">
            <summary>
            Send changes made to open files to the depot.
            </summary>
            <example>
              <para>
              Submit changelist "Temp", but first revert all unchanged files in the 
              changelist.
              </para>
              <code>
                <![CDATA[
            <p4submit changelist="Temp" revertunchanged="true" />
                ]]>
              </code>
            </example>
            <example>
              <para>Submit changelist, but leave the files open afterwards.</para>
              <code>
                <![CDATA[
            <p4submit changelist="Temp" remainopen="true" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.P4Submit.getSpecificCommandArguments">
            <summary>
            Builds the command string for this particular command.
            </summary>
            <returns>
            The command string for this particular command.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Submit.Changelist">
            <summary>
            Changelist to submit.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Submit.RemainOpen">
            <summary>
            Keep the files open after submitting. The default is 
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Submit.RevertUnchanged">
            <summary>
            Revert all unchanged or missing files from the changelist.
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Submit.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.P4Sync">
             <summary>
             Synchronize client space to a Perforce depot view.
             </summary>  
             <example>
               <para>
               Sync to head using P4USER, P4PORT and P4CLIENT settings specified.
               </para>
               <code>
                 <![CDATA[
             <p4sync 
                 view="//projects/foo/main/source/..."
                 user="fbloggs"
                 port="km01:1666"
                 client="fbloggsclient"
             />
                 ]]>
               </code>
             </example>
             <example>
               <para>Sync to head using default p4 environment variables.</para>
               <code>
                 <![CDATA[
             <p4sync view="//projects/foo/main/source/..." />
                 ]]>
               </code>
             </example>
             <example>
               <para>Force a re-sync to head, refreshing all files.</para>
               <code>
                 <![CDATA[
             <p4sync force="true" view="//projects/foo/main/source/..." />
                 ]]>
               </code>
             </example>
             <example>
               <para>Sync to a label.</para>
               <code>
                 <![CDATA[
             <p4sync label="myPerforceLabel" />
                 ]]>
               </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.P4Sync.getSpecificCommandArguments">
            <summary>
            Builds the command string for this particular command.
            </summary>
            <returns>
            The command string for this particular command.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Sync.Label">
            <summary> Label to sync client to; optional.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Sync.Force">
            <summary>
            Force a refresh of files. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Sync.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.Perforce">
            <summary>
            Static helper class for Perforce tasks.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.Perforce.GetUserName">
            <summary>
            ask p4 for the user name
            </summary>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.Perforce.GetClient">
            <summary>
            ask p4 for the client name
            </summary>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.Perforce.GetChangelistNumber(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get a changelist number based on on its name
            </summary>
            <param name="User"></param>
            <param name="Client"></param>
            <param name="ChangeList"></param>
            <param name="CreateIfMissing"></param>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.Perforce.GetChangelistNumber(System.String,System.String,System.String)">
            <summary>
            Get a changelist number based on on its name
            </summary>
            <param name="User"></param>
            <param name="Client"></param>
            <param name="ChangeList"></param>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.Perforce.CreateLabel(System.String,System.String,System.String)">
            <summary>
            Create a new label
            </summary>
            <param name="User"></param>
            <param name="Labelname"></param>
            <param name="View"></param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.Perforce.CreateClient(System.String,System.String,System.String,System.String)">
            <summary>
            Create a new Client
            </summary>
            <param name="User"></param>
            <param name="Clientname"></param>
            <param name="Root"></param>
            <param name="View"></param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.Perforce.CreateChangelist(System.String,System.String,System.String)">
            <summary>
            Create a new changelist
            </summary>
            <param name="User"></param>
            <param name="Client"></param>
            <param name="ChangeList">Description of Changelist</param>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.Perforce.GetP4Info(System.String)">
            <summary>
            call the p4 process to 
            </summary>
            <param name="SearchPattern"></param>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.Perforce.GetP4Info(System.String[])">
            <summary>
            call the p4 process to 
            </summary>
            <param name="SearchPatterns"></param>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.Perforce.getProcessOutput(System.String,System.String,System.String)">
            <summary>
            Execute a process and return its ourput
            </summary>
            <param name="exe"></param>
            <param name="prms"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.Perforce.RunProcess(System.String,System.String,System.String,System.String@)">
            <summary>
            Execute a process and return its ourput
            </summary>
            <param name="exe"></param>
            <param name="prms"></param>
            <param name="input"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.Perforce.RunProcess(System.String,System.String,System.String)">
            <summary>
            Execute a process by name
            </summary>
            <param name="exe"></param>
            <param name="prms"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:NAnt.Contrib.Tasks.RecordTask">
            <summary>
            A task that records the build's output to a file. Loosely based on Ant's 
            <a href="http://ant.apache.org/manual/CoreTasks/recorder.html">Record</a>
            task.
            </summary>
            <remarks>
            This task allows you to record the build's output, or parts of it to a 
            file. You can start and stop recording at any place in the build process.
            </remarks>
            <example>
              <code>
                <![CDATA[
            <record name="${outputdir}\Buildlog.txt" level="Info" action="Start"/>
            <record name="${outputdir}\Buildlog.txt" action="Close"/>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.RecordTask.ExecuteTask">
            <summary>
            This is where the work is done.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.RecordTask.LogName">
            <summary>
            Name of destination file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.RecordTask.Action">
            <summary>
            Action to apply to this log instance - either <see cref="F:NAnt.Contrib.Tasks.RecordTask.ActionType.Start"/>,
            <see cref="F:NAnt.Contrib.Tasks.RecordTask.ActionType.Stop"/>, <see cref="F:NAnt.Contrib.Tasks.RecordTask.ActionType.Close"/> or
            <see cref="F:NAnt.Contrib.Tasks.RecordTask.ActionType.Flush"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.RecordTask.AutoFlush">
            <summary>
            Determines whether the recorder will flush it's buffer after every 
            write to it. The default is <see langword="false"/>.
            </summary>
            <remarks>
            Effective only with the <see cref="F:NAnt.Contrib.Tasks.RecordTask.ActionType.Start"/> action.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.RecordTask.ThresholdLevel">
            <summary>
            Determine the level of logging - either <see cref="F:NAnt.Core.Level.Debug"/>, 
            <see cref="F:NAnt.Core.Level.Verbose"/>, <see cref="F:NAnt.Core.Level.Info"/>, 
            <see cref="F:NAnt.Core.Level.Warning"/> or <see cref="F:NAnt.Core.Level.Error"/>. 
            The default is <see cref="F:NAnt.Core.Level.Info"/>.
            </summary>
            <remarks>
            Effective only with the <see cref="F:NAnt.Contrib.Tasks.RecordTask.ActionType.Start"/> action.
            </remarks>
        </member>
        <member name="T:NAnt.Contrib.Tasks.RegasmTask">
            <summary>
            Registers an assembly for use from COM clients.
            </summary>
            <remarks>
              <para>
              Refer to the <see href="ms-help://MS.VSCC/MS.MSDNVS/cptools/html/cpgrfassemblyregistrationtoolregasmexe.htm">Regasm</see> 
              documentation for more information on the regasm tool.
              </para>
            </remarks>
            <example>
              <para>
              Register a single assembly.
              </para>
              <code>
                <![CDATA[
            <regasm assembly="myAssembly.dll" />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Register an assembly while exporting a typelibrary.
              </para>
              <code>
                <![CDATA[
            <regasm assembly="myAssembly.dll" typelib="myAssembly.tlb" />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Register a set of assemblies at once.
              </para>
              <code>
                <![CDATA[
            <regasm unregister="false" codebase="true">
                <fileset>
                    <include name="**/*.dll" />
                  <exclude name="notanassembly.dll" />
                </fileset>
            </regasm>
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.RegasmTask.AssemblyFile">
            <summary>
            The name of the file to register. This is provided as an alternate 
            to using the task's fileset.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.RegasmTask.RegistryFile">
            <summary>
            Registry file to export to instead of entering the types directly 
            into the registry. If a fileset is used then the entries are all 
            collated into this file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.RegasmTask.CodeBase">
            <summary>
            Set the code base registry setting.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.RegasmTask.ExportTypelib">
            <summary>
            Export a typelib and register it. The typelib will have the same 
            name as the source assembly unless the <see cref="P:NAnt.Contrib.Tasks.RegasmTask.TypeLib"/> 
            attribute is used.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.RegasmTask.Registered">
            <summary>
            Only refer to already registered type libraries.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.RegasmTask.TypeLib">
            <summary>
            Export the assembly to the specified type library and register it.
            This attribute is ignored when a fileset is specified.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.RegasmTask.Unregister">
            <summary>
            Unregister the assembly. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.RegasmTask.RegasmFileSet">
            <summary>
            The set of files to register.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SchemaValidatedTask">
            <summary>
            Abstract <see cref="T:NAnt.Core.Task"/> that validates inheriting classes against 
            an XML schema of the same name.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SchemaValidatedTask.InitializeTask(System.Xml.XmlNode)">
            <summary>
            Initializes the task and verifies parameters.
            </summary>
            <param name="TaskNode">Node that contains the XML fragment used to define this task instance.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SchemaValidatedTask.Task_OnSchemaValidate(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Occurs when a validation error is raised.
            </summary>
            <param name="sender">The object that sent the event.</param>
            <param name="args">Validation arguments passed in.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SchemaValidatedTask.ExpandPropertiesInNodes(System.Xml.XmlNodeList)">
            <summary>
            Recursively expands properties of all attributes of 
            a nodelist and their children.
            </summary>
            <param name="Nodes">The nodes to recurse.</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SchemaValidatedTask.SchemaObject">
            <summary>
            Returns the object from the Schema wrapper after 
            <see cref="M:NAnt.Contrib.Tasks.SchemaValidatedTask.InitializeTask(System.Xml.XmlNode)"/> is called.
            </summary>
            <value>The object from the Schema wrapper after <see cref="M:NAnt.Contrib.Tasks.SchemaValidatedTask.InitializeTask(System.Xml.XmlNode)"/> is called.</value>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SchemaValidatorAttribute">
            <summary>
            Indicates that class should be validated by an XML Schema.
            </summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SchemaValidatorAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Tasks.SchemaValidatorAttribute"/>
            class.
            </summary>
            <param name="schemaType">The <see cref="T:System.Type"/> of the object created by <see cref="T:NAnt.Contrib.Tasks.XsdTask"/> to represent the root node of your task.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SchemaValidatorAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Tasks.SchemaValidatorAttribute"/>
            class.
            </summary>
            <param name="schemaType">The <see cref="T:System.Type"/> of the object created by <see cref="T:NAnt.Contrib.Tasks.XsdTask"/> to represent the root node of your task.</param>
            <param name="xmlNamespace"></param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SchemaValidatorAttribute.ValidatorType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> of the object created by 
            <see cref="T:NAnt.Contrib.Tasks.XsdTask"/> to represent the root node of your task.
            </summary>
            <value>
            The <see cref="T:System.Type"/> of the object created by <see cref="T:NAnt.Contrib.Tasks.XsdTask"/>
            to represent the root node of your task.
            </value>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SchemeType">
            <summary>
            Defines possible reference counting scheme types for the <see cref="T:NAnt.Contrib.Tasks.GacTask">GAC</see> tasks.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.SchemeType.None">
            <summary>
            Specifies that no reference counting scheme will be used when performing the GAC task.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.SchemeType.UninstallKey">
            <summary>
            Specifies that registry-related reference counting will be used when performing the GAC task.
            </summary>
            <remarks>
            When the scheme type is set to <c>UninstallKey</c>, the related scheme ID should be set to the name of the application
            set in the <c>HKLM\Software\Microsoft\Windows\CurrentVersion</c> registry key.
            </remarks>
            
        </member>
        <member name="F:NAnt.Contrib.Tasks.SchemeType.FilePath">
            <summary>
            Specifies that file-based reference counting will be used when performing the GAC task.
            </summary>
            <remarks>
            When the scheme type is set to <c>FilePath</c>, the related scheme ID should be set to the full path to the executable
            file that installs the assembly.
            </remarks>
            
        </member>
        <member name="F:NAnt.Contrib.Tasks.SchemeType.Opaque">
            <summary>
            Specifies that custom information will be supplied to accommodate reference counting.
            </summary>
            <remarks>
            When the scheme type is set to <c>Opaque</c>, the related scheme ID can be set to any custom piece of information.
            </remarks>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ScpTask">
            <summary>
            Copies a file to a remote server using scp.
            </summary>
            <remarks>
              <para>Copies a file using scp to a remote server.</para>
              <para>The Username Environment variable is used.</para>
            </remarks>
            <example>
              <para>Copy a single file to a remote server and path.</para>
              <code>
                <![CDATA[
            <scp file="myfile.zip" server="myServer" path="~" />
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ScpTask.ProgramName">
            <summary>
            The program to execute. The default is "scp".
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ScpTask.Options">
            <summary>
            The command line arguments.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ScpTask.FileName">
            <summary>
            The file to transfer.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ScpTask.ServerName">
            <summary>
            The server to send the file to.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ScpTask.RemotePath">
            <summary>
            The path on the remote server. The default is "~".
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ScpTask.UserName">
            <summary>
            The username to connect as.  The default is the value of the 
            <c>USERNAME</c> environment variable.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ScpTask.ProgramPathSep">
            <summary>
            The path separator used by the program. The default is "/".
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ScpTask.ProgramFileName">
            <summary>
            Gets the filename of the external program to start.
            </summary>
            <value>
            The filename of the external program.
            </value>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ScpTask.ProgramArguments">
            <summary>
            Gets the command-line arguments for the external program.
            </summary>
            <value>
            The command-line arguments for the external program.
            </value>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ScpTask.BaseDirectory">
            <summary>
            The directory in which the command will be executed.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SourceSafe.AddTask">
            <summary>
            Used to add files to a Visual SourceSafe database.  If the file is currently
            in the SourceSafe database a message will be logged but files will continue to be added.
            </summary>
            <remarks>
            This version does not support recursive adds.  Only adds in the root directory will be added to the
            SourceSafe database.
            </remarks>
            <example>
              <code><![CDATA[
                <vssadd dbpath="C:\SourceSafeFolder\srcsafe.ini" user="user1" password="" path="$/Somefolder">
                  <fileset basedir="C:\SourceFolder\">
                    <include name="*.dll"/>
                  </fileset>
                </vssadd>
              ]]></code>
            </example>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SourceSafe.BaseTask">
            <summary>
            The base abstract class for all Visual Source Safe Tasks.  
            Provides the core attributes, and functionality for opening an item 
            in a Visual Source Safe database.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SourceSafe.BaseTask.Open">
            <summary>
            Opens the Source Safe database and sets the reference to the specified
            item and version.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SourceSafe.BaseTask.GetFileTimestampFlags(NAnt.Contrib.Tasks.SourceSafe.FileTimestamp)">
            <summary>
            Gets the <see cref="T:SourceSafeTypeLib.VSSFlags"/> value corresponding with the 
            specified <see cref="T:NAnt.Contrib.Tasks.SourceSafe.FileTimestamp"/>.
            </summary>
            <param name="timestamp">A <see cref="T:NAnt.Contrib.Tasks.SourceSafe.FileTimestamp"/>.</param>
            <returns>
            An <see cref="T:System.Int32"/> representing the <see cref="T:SourceSafeTypeLib.VSSFlags"/> value
            for the <paramref name="timestamp"/>.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.BaseTask.DBPath">
            <summary>
            The path to the folder that contains "srcsafe.ini".
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.BaseTask.Path">
            <summary>
            The Visual SourceSafe project or file path you wish the perform the
            action on (starting with "$/").
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.BaseTask.Password">
            <summary>
            The password to use to login to the SourceSafe database.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.BaseTask.UserName">
            <summary>
            The name of the user needed to access the Visual SourceSafe database.
            When no <see cref="P:NAnt.Contrib.Tasks.SourceSafe.BaseTask.UserName"/> is specified and "Use network
            name for automatic user log in" is enabled for the Visual SourceSafe
            database, then the current Windows username will be used to log in.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.BaseTask.Login">
            <summary>
            The name of the user needed to access the Visual SourceSafe database.
            When no <see cref="P:NAnt.Contrib.Tasks.SourceSafe.BaseTask.UserName"/> is specified and "Use network
            name for automatic user log in" is enabled, then the current
            Windows username will be used to log in.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.BaseTask.Version">
            <summary>
            A version of the path to reference. Accepts multiple forms, 
            including the label, version number, or date of the version. 
            If omitted, the latest version is used.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SourceSafe.AddTask.ExecuteTask">
            <summary>
            Main task execution method
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SourceSafe.AddTask.CreateProjectPath(System.String)">
            <summary>
            Create project hierarchy in vss
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.AddTask.Comment">
            <summary>
            Places a comment on all files added into the SourceSafe repository.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.AddTask.AddFileSet">
            <summary>
            List of files that should be added to SourceSafe.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SourceSafe.FileTimestamp">
            <summary>
            Defines how the local timestamp of files retrieved from a SourceSafe
            database should be set.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.SourceSafe.FileTimestamp.Current">
            <summary>
            The timestamp of the local file is set to the current date and time.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.SourceSafe.FileTimestamp.Modified">
            <summary>
            The timestamp of the local file is set to the file's last 
            modification date and time. 
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.SourceSafe.FileTimestamp.Updated">
            <summary>
            The timestamp of the local file is set to the date and time that 
            the file was last checked in to the database.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SourceSafe.CheckinTask">
            <summary>
            Used to checkin files into Visual Source Safe.
            </summary>
            <example>
              <para>Checkin all files from an absolute directory to a local sourcesafe database.</para>
              <code><![CDATA[
                <vsscheckin 
                  user="myusername" 
                  password="mypassword" 
                  localpath="C:\Dev\Latest"
                  recursive="true"
                  writable="true"
                  dbpath="C:\VSS\srcsafe.ini"
                  path="$/MyProduct"
                  comment="NAnt checkin"
                />
              ]]></code>
            </example>
            <example>
              <para>Checkin a file from a relative directory to a remote sourcesafe database.</para>
              <code><![CDATA[
                <vsscheckin 
                  user="myusername" 
                  password="mypassword" 
                  localpath="Latest\myFile.cs"
                  recursive="false"
                  writable="true"
                  dbpath="\\MyServer\VSS\srcsafe.ini"
                  path="$/MyProduct/myFile.cs"
                  comment="NAnt checkin"
                />
              ]]></code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.CheckinTask.Comment">
            <summary>
            The comment for the new version.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.CheckinTask.LocalPath">
            <summary>
            The path to the local working directory.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.CheckinTask.Recursive">
            <summary>
            Determines whether to perform a recursive checkin. 
            The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.CheckinTask.Writable">
            <summary>
            Determines whether to leave the file(s) as writable. 
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SourceSafe.CheckoutTask">
            <summary>
            Task used to checkout files from Visual Source Safe.
            </summary>
            <example>
              <para>Checkout the latest files from a local sourcesafe database.</para>
              <code><![CDATA[
                <vsscheckout 
                  user="myusername" 
                  password="mypassword" 
                  localpath="C:\Dev\Latest"
                  recursive="true"
                  writable="true"
                  dbpath="C:\VSS\srcsafe.ini"
                  path="$/MyProduct"
                />
              ]]></code>
            </example>
            <example>
              <para>Checkout a file from a remote sourcesafe database.  Put it in a relative directory.</para>
              <code><![CDATA[
                <vsscheckout 
                  user="myusername" 
                  password="mypassword" 
                  localpath="Latest"
                  recursive="false"
                  writable="true"
                  dbpath="\\MyServer\VSS\srcsafe.ini"
                  path="$/MyProduct/myFile.cs"
                />
              ]]></code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.CheckoutTask.LocalPath">
            <summary>
            The path to the local working directory.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.CheckoutTask.Recursive">
            <summary>
            Determines whether to perform a recursive checkout.
            The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.CheckoutTask.Writable">
            <summary>
            Determines whether to leave the file(s) as writable. 
            The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.CheckoutTask.FileTimestamp">
            <summary>
            Set the behavior for timestamps of local files. The default is
            <see cref="F:FileTimestamp.Current" />.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SourceSafe.StatisTask">
            <summary>
            Task used to checkout files from Visual Source Safe.
            </summary>
            <example>
              <para>Checkout the latest files from a local sourcesafe database.</para>
              <code><![CDATA[
                <vsscheckout 
                  user="myusername" 
                  password="mypassword" 
                  localpath="C:\Dev\Latest"
                  recursive="true"
                  writable="true"
                  dbpath="C:\VSS\srcsafe.ini"
                  path="$/MyProduct"
                />
              ]]></code>
            </example>
            <example>
              <para>Checkout a file from a remote sourcesafe database.  Put it in a relative directory.</para>
              <code><![CDATA[
                <vsscheckout 
                  user="myusername" 
                  password="mypassword" 
                  localpath="Latest"
                  recursive="false"
                  writable="true"
                  dbpath="\\MyServer\VSS\srcsafe.ini"
                  path="$/MyProduct/myFile.cs"
                />
              ]]></code>
            </example>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SourceSafe.DiffTask">
            <summary>
            Used to generate differences in a vss database. It will show all changes to a project
            after the specified label.
            </summary>
            <remarks>
            This only shows differences between the current version and the version specified.
            </remarks>
            <example>
              <code><![CDATA[
                       <vssdiff
                           dbpath='ss.ini'
                           path='$/My Project'
                           label='My Label'
                           user='ssuser'
                           outputfile='diff.xml'
                       />
              ]]></code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.DiffTask.Label">
            <summary>
            The value of the label to compare to. Required.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.DiffTask.OutputFile">
            <summary>
            The output file to generate (xml)
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SourceSafe.GetTask">
            <summary>
            Used to retrieve an item or project from a Visual Source Safe database.
            </summary>
            <example>
              <para>Get the latest files from a local sourcesafe database.</para>
              <code><![CDATA[
                <vssget
                  user="myusername"
                  password="mypassword"
                  localpath="C:\Dev\Latest"
                  recursive="true"
                  replace="true"
                  writable="true"
                  dbpath="C:\VSS\srcsafe.ini"
                  path="$/MyProduct"
                />
              ]]></code>
            </example>
            <example>
              <para>Get the latest version of a file from a remote sourcesafe database.  Put it in a relative directory.</para>
              <code><![CDATA[
                <vssget
                  user="myusername"
                  password="mypassword"
                  localpath="Latest"
                  recursive="true"
                  replace="true"
                  writable="true"
                  dbpath="\\MyServer\VSS\srcsafe.ini"
                  path="$/MyProduct/myFile.cs"
                />
              ]]></code>
            </example>
            <example>
              <para>Get the latest version of a file from a remote sourcesafe database. Remove any deleted files from local image.</para>
              <code><![CDATA[
                <vssget
                  user="myusername"
                  password="mypassword"
                  localpath="C:\Dev\Latest"
                  recursive="true"
                  replace="true"
                  writable="true"
                  removedeleted="true"
                  dbpath="\\MyServer\VSS\srcsafe.ini"
                  path="$/MyProduct/myFile.cs"
                />
              ]]></code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SourceSafe.GetTask.RemoveDeletedFromLocalImage">
            <summary>
            Checks to see if we should remove local copies of deleted files, and starts
            the scan.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SourceSafe.GetTask.RemoveDeletedFromLocalImage(SourceSafeTypeLib.IVSSItem,System.String)">
            <summary>
            Scans the Project Item for deleted files and removes their local
            copies from the local image of the project. Obeys the recursive setting
            (and thus optionally calls itself recursively).
            </summary>
            <param name="item">The VSS Item (project) to check for deletions</param>
            <param name="localPathPrefix">The path to the folder of the item being processed</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.GetTask.LocalPath">
            <summary>
            The path to the local working directory.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.GetTask.Recursive">
            <summary>
            Determines whether to perform the get recursively.
            The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.GetTask.Replace">
            <summary>
            Determines whether to replace writable files.
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.GetTask.Writable">
            <summary>
            Determines whether the files will be writable.
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.GetTask.RemoveDeleted">
            <summary>
            Determines whether files marked "deleted" in the
            repository will be removed from the local copy.
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.GetTask.UseModificationTime">
            <summary>
            Determines whether the timestamp on the local copy
            will be the modification time (if false or omitted, 
            the checkout time will be used)
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.GetTask.FileTimestamp">
            <summary>
            Set the behavior for timestamps of local files. The default is
            <see cref="F:FileTimestamp.Current" />.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SourceSafe.History">
            <summary>
            Generates an XML file showing all changes made to a Visual SourceSafe
            project/file between specified labels or dates (by a given user).
            </summary>
            <example>
              <para>
              Write all changes between "Release1" and "Release2" to XML file 
              "changelog.xml".
              </para>
              <code>
                <![CDATA[
            <vsshistory
                dbpath="C:\VSS\srcsafe.ini"
                path="$/My Project"
                fromlabel="Release1"
                tolabel="Release2"
                output="changelog.xml" />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Write all changes between January 1st 2004 and March 31st 2004 to XML 
              file "history.xml".
              </para>
              <code>
                <![CDATA[
            <vsshistory
                dbpath="C:\VSS\srcsafe.ini"
                path="$/My Project"
                fromdate="01/01/2004"
                todate="03/31/2004"
                output="history.xml"
                />
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.History.FromLabel">
            <summary>
            The value of the label to start comparing to. If it is not included, 
            the compare will start with the very first history item.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.History.ToLabel">
            <summary>
            The value of the label to compare up to. If it is not included,
            the compare will end with the last history item.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.History.FromDate">
            <summary>
            Start date for comparison.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.History.ToDate">
            <summary>
            End date for comparison.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.History.Output">
            <summary>
            Output file to save history to (as XML).
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.History.Recursive">
            <summary>
            Determines whether to perform the comparison recursively.
            The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.History.User">
            <summary>
            Name of the user whose changes you want to see.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.History.VersionFlags">
            <summary>
            Gets the flags that should be used to retrieve the history of
            <see cref="T:System.IO.Path"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.History.Login">
            <summary>
            Override to avoid exposing the corresponding attribute to build 
            authors.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.History.Version">
            <summary>
            Override to avoid exposing the corresponding attribute to build 
            authors.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SourceSafe.LabelTask">
            <summary>
            Used to apply a label to a Visual Source Safe item.
            </summary>
            <example>
              <para>Label all files in a local sourcesafe database. (Automatically applies the label recursively)</para>
              <code><![CDATA[
                <vsslabel 
                  user="myusername" 
                  password="mypassword" 
                  dbpath="C:\VSS\srcsafe.ini"
                  path="$/MyProduct"
                  comment="NAnt label"
                  label="myLabel"
                />
              ]]></code>
            </example>
            <example>
              <para>Label a file in a remote sourcesafe database.</para>
              <code><![CDATA[
                <vsslabel 
                  user="myusername" 
                  password="mypassword" 
                  dbpath="\\MyServer\VSS\srcsafe.ini"
                  path="$/MyProduct/myFile.cs"
                  comment="NAnt label"
                  label="myLabel"
                />
              ]]></code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.LabelTask.Comment">
            <summary>
            The label comment.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.LabelTask.Label">
            <summary>
            The name of the label.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SourceSafe.UndoCheckoutTask">
            <summary>
            Task is used to undo a checkout from SourceSafe
            </summary>
            <example>
              <para>Undo a checkout of all of the files from a local sourcesafe database.</para>
              <code><![CDATA[
                <vssundocheckout 
                  user="myusername" 
                  password="mypassword" 
                  localpath="C:\Dev\Latest"
                  recursive="true"
                  dbpath="C:\VSS\srcsafe.ini"
                  path="$/MyProduct"
                />
              ]]></code>
            </example>
            <example>
              <para>Checkout a file from a remote sourcesafe database.  Put it in a relative directory.</para>
              <code><![CDATA[
                <vssundocheckout 
                  user="myusername" 
                  password="mypassword" 
                  localpath="Latest"
                  recursive="false"
                  dbpath="\\MyServer\VSS\srcsafe.ini"
                  path="$/MyProduct/myFile.cs"
                />
              ]]></code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.UndoCheckoutTask.LocalPath">
            <summary>
            The path to the local working directory. This is required if you wish to 
            have your local file replaced with the latest version from SourceSafe.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.UndoCheckoutTask.Recursive">
            <summary>
            Determines whether to perform a recursive undo of the checkout.
            The default is <see langword="true" />.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SqlTask">
            <summary>
            A task to execute arbitrary SQL statements against a OLEDB data source.
            </summary>
            <remarks>
            You can specify a set of sql statements inside the
            sql element, or execute them from a text file that contains them. You can also
            choose to execute the statements in a single batch, or execute them one by one
            (even inside a transaction, if you want to).
            </remarks>
            <example>
              <para>
              Execute a set of statements inside a transaction.
              </para>
              <code>
                <![CDATA[
            <sql
                connstring="Provider=SQLOLEDB;Data Source=localhost; Initial Catalog=Pruebas; Integrated Security=SSPI"
                transaction="true"
                delimiter=";"
                delimstyle="Normal"
            >
                INSERT INTO jobs (job_desc, min_lvl, max_lvl) VALUES('My Job', 22, 45);
                INSERT INTO jobs (job_desc, min_lvl, max_lvl) VALUES('Other Job', 09, 43);
                SELECT * FROM jobs;
            </sql>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Execute a set of statements from a file and write all query results 
              to a file.
              </para>
              <code>
                <![CDATA[
            <sql
                connstring="Provider=SQLOLEDB;Data Source=localhost; Initial Catalog=Pruebas; Integrated Security=SSPI"
                transaction="true"
                delimiter=";"
                delimstyle="Normal"
                print="true"
                source="sql.txt"
                output="${outputdir}/results.txt"
            />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Execute a SQL script generated by SQL Server Enterprise Manager.
              </para>
              <code>
                <![CDATA[
            <sql
                connstring="Provider=SQLOLEDB;Data Source=localhost; Initial Catalog=Pruebas; Integrated Security=SSPI"
                transaction="true"
                delimiter="GO"
                delimstyle="Line"
                print="true"
                source="pubs.xml"
                batch="false"
                output="${outputdir}/results.txt"
            />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SqlTask.InitializeTask(System.Xml.XmlNode)">
            <summary>
            Initializes task and ensures the supplied attributes are valid.
            </summary>
            <param name="taskNode">XML node used to define this task instance.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SqlTask.ExecuteTask">
            <summary>
            This is where the work is done.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SqlTask.ExecuteStatements(NAnt.Contrib.Util.SqlHelper)">
            <summary>
            Executes the SQL Statements one by one.
            </summary>
            <param name="sqlHelper"></param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SqlTask.ExecuteStatementsInBatch(NAnt.Contrib.Util.SqlHelper)">
            <summary>
            Executes the SQL statements in a single batch.
            </summary>
            <param name="sqlHelper"></param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SqlTask.ProcessResults(System.Data.IDataReader,System.IO.TextWriter)">
            <summary>
            Process a result set.
            </summary>
            <param name="results">Result set.</param>
            <param name="writer"><see cref="T:System.IO.TextWriter"/> to write output to.</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.ConnectionString">
            <summary>
            Connection string used to access database.
            This should be an OleDB connection string.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.Source">
            <summary>
            File where the sql statements are defined.
            </summary>
            <remarks>
            You cannot specify both a source and an inline set of statements.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.Delimiter">
            <summary>
            String that separates statements from one another.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.Batch">
            <summary>
            If true, the statements will be executed as a single batch.
            If false, they will be executed one by one. Default is true.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.ExpandProperties">
            <summary>
            If true, the any nant-style properties on the sql will be
            expanded before execution. Default is true.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.CommandTimeout">
            <summary>
            Command timeout to use when creating commands.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.DelimiterStyle">
            <summary>
            Kind of delimiter used. Allowed values are Normal or Line.
            </summary>
            <remarks>
            Delimiters can be of two kinds: Normal delimiters are
            always specified inline, so they permit having two
            different statements in the same line. Line delimiters,
            however, need to be in a line by their own.
            Default is Normal.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.Print">
            <summary>
            If set to true, results from the statements will be
            output to the build log.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.Output">
            <summary>
            If set, the results from the statements will be output to the 
            specified file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.UseTransaction">
            <summary>
            If set to <see langword="true" />, all statements will be executed
            within a single transaction. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.Append">
            <summary>
            Whether output should be appended to or overwrite
            an existing file. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.ShowHeaders">
            <summary>
            If set to <see langword="true" />, prints headers for result sets.
            The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.QuoteChar">
            <summary>
            The character(s) to surround result columns with when printing, the 
            default is an empty string.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.OutputWriter">
            <summary>
            Gets the underlying <see cref="T:System.IO.TextWriter"/> to which output will 
            be written if <see cref="P:NAnt.Contrib.Tasks.SqlTask.Output"/> is set.
            </summary>
            <value>
            A <see cref="T:System.IO.TextWriter"/> for the file specified in <see cref="P:NAnt.Contrib.Tasks.SqlTask.Output"/>,
            or <see langword="null"/> if <see cref="P:NAnt.Contrib.Tasks.SqlTask.Output"/> is not set.
            </value>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Svn.AbstractSvnTask">
            <summary>
            A base class for creating tasks for executing CVS client commands on a 
            CVS repository.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.SVN_HOME">
            <summary>
            An environment variable that holds path information about where
            svn is located.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.ARG_PREFIX">
            <summary>
            The prefix used for command arguments.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.SVN_EXE">
            <summary>
            The name of the svn executable.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.SVN_RSH">
            <summary>
            Environment variable that holds the executable name that is used for
            ssh communication.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.SVN_PASSFILE">
            <summary>
            Name of the password file that is used to cash password settings.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:AbstractCvsTask"/> 
            class.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.PrepareProcess(System.Diagnostics.Process)">
            <summary>
            Build up the command line arguments, determine which executable is being
            used and find the path to that executable and set the working 
            directory.
            </summary>
            <param name="process">The process to prepare.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.AppendCommandOptions">
            <summary>
            Append the command line options or commen names for the options
            to the generic options collection.  This is then piped to the
            command line as a switch.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.VcsExeName">
            <summary>
            The name of the executable.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.PassFileName">
            <summary>
            The name of the password file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.VcsHomeEnv">
            <summary>
            Name of the home environment variable.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.SshEnv">
            <summary>
            The name of the ssh/ rsh environment variable.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.ExeName">
            <summary>
            The full path of the svn executable.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.Root">
             <summary>
             <para>
             TODO: Add more documentation when I understand all svn root possibilities/
             protocols.
             The svn root is usually in the form of a URL from which the server, protocol
             and path information can be derived.  Although the path to the repository
             can also be determined from this the information is more implicit
             than explicit.  For example a subversion root URL of:
            
             http://svn.collab.net/repos/svn/trunk/doc/book/tools
            
             would have the following components:
                 protocol:       http/ web_dav
                 username:       anonymous
                 servername:     svn.collab.net
                 repository:     /repos/svn
                 server path:    /trunk/doc/book/tools
                 
                 In addition the revision path or branch can also be determined as
                 subversion stores this information as a seperate physical directory.
                 In this example:
                 
                 revision: trunk
             </para>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.UserName">
            <summary>
            The user performing the checkout.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.Password">
            <summary>
            The pasword to use to login to svn.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.Interactive">
            <summary>
            Indicates whether the task should be interactive or not.  This is
            set to <see langword="false" /> by default, and I don't see a reason
            to expose this to the NAnt task.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.Ssh">
            <summary>
            The executable to use for ssh communication.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.CommandName">
            <summary>
            The command to execute.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.IsRootUsed">
            <summary>
            Determines if the root is used for the command based on 
            the command name.  Returns <code>true</code> if the root
            is used, otherwise returns <code>false</code>.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Svn.SvnCheckoutTask">
            <summary>
            Executes the svn checkout command.
            </summary>
            <example>
              <para>Checkout Gentle.NET.</para>
              <code>
                <![CDATA[
            <svn-update
                destination="c:/dev/src/gentle.net" 
                uri="http://www.mertner.com/svn/repos/projects/gentle" 
                recursive="true"
                quiet="true"
                username="anonymoose"
                password="Canada" 
                revision="HEAD"
                cache-auth="false"
                config-dir="c:\home"
            />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Svn.SvnCheckoutTask.#ctor">
            <summary>
            Initialize the task, and set the default parameters.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.SvnCheckoutTask.CommandName">
            <summary>
            Gets the svn command to execute.
            </summary>
            <value>
            The svn command to execute. The default value is "checkout".
            </value>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.SvnCheckoutTask.Quiet">
            <summary>
            Determines if the output should be minimized. The default is
            <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.SvnCheckoutTask.Recursive">
            <summary>
            <see langword="true" /> if the command should be executed recursively.
            The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.SvnCheckoutTask.Revision">
            <summary>
            The revision to checkout.  If no revision is specified then subversion
            will return the <code>HEAD</code>.
            </summary>
            <remarks>
            A revision argument can be one of:
                   NUMBER       revision number
                   "{" DATE "}" revision at start of the date
                   "HEAD"       latest in repository
                   "BASE"       base rev of item's working copy
                   "COMMITTED"  last commit at or before BASE
                   "PREV"       revision just before COMMITTED
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.SvnCheckoutTask.CacheAuth">
            <summary>
            <see langword="true" /> if the authentiction token should be cached
            locally.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.SvnCheckoutTask.ConfigDir">
            <summary>
            The location of the configuration directory.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Svn.SvnTask">
            <summary>
            Executes the svn command specified by the command attribute.
            </summary>
            <example>
              <para>Checkout Gentle.NET.</para>
              <code>
                <![CDATA[
            <svn command="checkout" 
                 destination="c:\dev\src\gentle.net" 
                 svnroot="http://www.mertner.com/svn/repos/projects/gentle" 
                 password="" />
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.SvnTask.CommandName">
            <summary>
            The svn command to execute.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Svn.SvnUpdateTask">
            <summary>
            Executes the svn update specified by the command attribute.
            </summary>
            <example>
              <para>Update Gentle.NET.</para>
              <code>
                <![CDATA[
            <svn-update
                destination="c:\dev\src\gentle.net" 
                uri="http://www.mertner.com/svn/repos/projects/gentle" 
                recursive="true"
                quiet="true"
                username="anonymoose"
                password="Canada" 
                revision="HEAD"
                cach-auth="false"
                config-dir="c:\home"
            />
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.SvnUpdateTask.CommandName">
            <summary>
            Gets the svn command to execute.
            </summary>
            <value>
            The svn command to execute. The default value is "update".
            </value>
        </member>
        <member name="T:NAnt.Contrib.Tasks.TryCatchTask">
            <summary>
            Executes a set of tasks, and optionally catches a build exception to
            allow recovery or rollback steps to be taken, or to define some steps
            to be taken regardless if the tasks succeed or fail, or both.
            </summary>
            <remarks>
              <para>
              The tasks defined in the <c>&lt;<see cref="P:NAnt.Contrib.Tasks.TryCatchTask.TryBlock"/>&gt;</c> block
              will be executed in turn, as they normally would in a target.
              </para>
              <para>
              If a <c>&lt;<see cref="P:NAnt.Contrib.Tasks.TryCatchTask.CatchBlock"/>&gt;</c> block is defined, the 
              tasks in that block will be executed in turn only if one of the tasks 
              in the <c>&lt;<see cref="P:NAnt.Contrib.Tasks.TryCatchTask.TryBlock"/>&gt;</c> block fails. This 
              failure will then be suppressed by the <c>&lt;<see cref="P:NAnt.Contrib.Tasks.TryCatchTask.CatchBlock"/>&gt;</c>
              block.
              </para>
              <para>
              The message associated with the failure can also be caught in a
              property for use within the <c>&lt;<see cref="P:NAnt.Contrib.Tasks.TryCatchTask.CatchBlock"/>&gt;</c>
              block.  The original contents of the property will be restored upon 
              exiting the <c>&lt;<see cref="P:NAnt.Contrib.Tasks.TryCatchTask.CatchBlock"/>&gt;</c> block.
              </para>
              <para>
              If a <c>&lt;<see cref="P:NAnt.Contrib.Tasks.TryCatchTask.FinallyBlock"/>&gt;</c> block is defined, the 
              tasks in that block will be executed after the tasks in both the 
              <c>&lt;<see cref="P:NAnt.Contrib.Tasks.TryCatchTask.TryBlock"/>&gt;</c> and <c>&lt;<see cref="P:NAnt.Contrib.Tasks.TryCatchTask.CatchBlock"/>&gt;</c>
              blocks have been executed, regardless of whether any task fails in 
              either block.
              </para>
            </remarks>
            <example>
              <code>
                <![CDATA[
            <trycatch>
                <try>
                    <echo message="In try" />
                    <fail message="Failing!" />
                </try>
                <catch>
                    <echo message="In catch" />
                </catch>
                <finally>
                    <echo message="Finally done" />
                </finally>
            </trycatch>
                ]]>
              </code>
              <para>
              The output of this example will be:
              </para>
              <code>
            In try
            In catch
            Finally done
              </code>
              <para>
              The failure in the <c>&lt;<see cref="P:NAnt.Contrib.Tasks.TryCatchTask.TryBlock"/>&gt;</c> block will 
              not cause the build to fail.
              </para>
            </example>
            <example>
              <code>
                <![CDATA[
            <trycatch>
                <try>
                    <echo message="In try" />
                    <fail message="Just because..." />
                </try>
                <catch property="failure">
                    <echo message="Caught failure: ${failure}" />
                    <fail message="Bad catch" />
                </catch>
                <finally>
                    <echo message="Finally done" />
                </finally>
            </trycatch>
                ]]>
              </code>
              <para>
              The output of this example will be:
              </para>
              <code>
            In try
            Caught failure: Just because...
            Finally done
            Build failed: Bad catch
              </code>
              <para>
              Like the above, the failure in the <c>&lt;<see cref="P:NAnt.Contrib.Tasks.TryCatchTask.TryBlock"/>&gt;</c>
              block does not cause the build to fail.  The failure in the 
              <c>&lt;<see cref="P:NAnt.Contrib.Tasks.TryCatchTask.CatchBlock"/>&gt;</c> block does, however.
              Note that the <c>&lt;<see cref="P:NAnt.Contrib.Tasks.TryCatchTask.FinallyBlock"/>&gt;</c> block is 
              executed even though the <c>&lt;<see cref="P:NAnt.Contrib.Tasks.TryCatchTask.CatchBlock"/>&gt;</c>
              block failed.
              </para>
            </example>
            <example>
              <code>
                <![CDATA[
            <trycatch>
                <try>
                    <echo message="In try" />
                    <fail message="yet again" />
                </try>
                <catch property="failure">
                    <echo message="Caught failure ${failure}" />
                    <fail message="Bad catch" />
                </catch>
                <finally>
                    <echo message="Finally done ${failure}" />
                </finally>
            </trycatch>
                ]]>
              </code>
              <para>
              The output of this example will be:
              </para>
              <code>
            In try
            Caught failure yet again
            Build failed: Property 'failure' has not been set.
              </code>
              <para>
              The <see cref="T:NAnt.Core.Tasks.EchoTask"/> in the <c>&lt;<see cref="P:NAnt.Contrib.Tasks.TryCatchTask.FinallyBlock"/>&gt;</c>
              block failed because the "failure" property was not defined 
              after exiting the <c>&lt;<see cref="P:NAnt.Contrib.Tasks.TryCatchTask.CatchBlock"/>&gt;</c> block.  
              Note that the failure in the <c>&lt;<see cref="P:NAnt.Contrib.Tasks.TryCatchTask.FinallyBlock"/>&gt;</c> 
              block has eclipsed the failure in the <c>&lt;<see cref="P:NAnt.Contrib.Tasks.TryCatchTask.CatchBlock"/>&gt;</c>
              block.
              </para>
            </example>
            <example>
              <code>
                <![CDATA[
            <trycatch>
                <try>
                    <property name="temp.file" value="${path::get-temp-file-name()}" />
                    <do-stuff to="${temp.file}" />
                    <fail message="Oops..." />
                </try>
                <finally>
                    <echo message="Cleaning up..." />
                    <if test="${property::exists('temp.file')}">
                        <delete file="${temp.file}" />
                    </if>
                </finally>
            </trycatch>
                ]]>
              </code>
              <para>
              A more concrete example, that will always clean up the generated
              temporary file after it has been created.
              </para>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.TryCatchTask.TryBlock">
            <summary>
            The tasks in this block will be executed as a normal part of
            the build script.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.TryCatchTask.CatchBlock">
            <summary>
            The tasks in this block will be executed if any task in the try
            block fails.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.TryCatchTask.FinallyBlock">
            <summary>
            The tasks in this block will always be executed, regardless of
            what happens in the try and catch blocks.
            </summary>
            <remarks>
            Note that any failure in any of the tasks in this block will
            prevent any subsequent tasks from executing.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.TryCatchTask.CatchElement.Property">
            <summary>
            Defines the name of the property to save the message describing
            the failure that has been caught.
            </summary>
            <remarks>
            <para>
            The failure message is only available in the context of the catch
            block.  If you wish to preserve the message, you will need to save
            it into another property.
            </para>
            <para>
            Readonly properties cannot be overridden by this mechanism.
            </para>
            </remarks>
        </member>
        <member name="T:NAnt.Contrib.Tasks.TypedCollectionTask">
             <summary>Generates collection classes based on a given XML specification file. Code generation is in the specified language.</summary>
            <remarks>
               <para>See the <a href="http://www.sellsbrothers.com/tools/">CollectionGen tool page</a> for more information.</para>
            </remarks>
             <example>   
               <code>
             <![CDATA[
             <typedcollection language="CSharp">
                <fileset>
                    <include name="collections.xml" />
                </fileset>
            </typedcollection>
             ]]>
               </code>
             </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.TypedCollectionTask.GenerateCollectionClasses(System.String,System.String)">
            <summary>
            The actual generation work is done here.
            </summary>
            <param name="path"></param>
            <param name="language"></param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.TypedCollectionTask.Language">
            <summary>The language to generate collection classes for.  Valid values are "CSharp" or "VB".</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.TypedCollectionTask.FileName">
            <summary>The name of the template file for collection generation. This is provided as an alternate to using the task's fileset.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.TypedCollectionTask.TypedCollFileSet">
            <summary>
            All files in this fileset will be run thru the collection generator.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ValidateXmlTask">
            <summary>
            Validates a set of XML files based on a set of XML Schemas (XSD).
            </summary>
            <example>
              <code>
                <![CDATA[
            <validatexml>
                <schemas>
                    <schema source="rcf-schema.xsd" />
                    <schema namespace="urn:schemas-company-com:base" source="base-schema.xsd" />
                </schemas>
                <files>
                    <include name="*.xml" />
                </files>
            </validatexml>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ValidateXmlTask.ExecuteTask">
            <summary>
            This is where the work is done.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ValidateXmlTask.XmlFiles">
            <summary>
            The XML files that must be validated.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ValidateXmlTask.Schemas">
            <summary>
            The XML Schemas (XSD) to use for validation.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Vb6Task">
            <summary>
            Compiles Microsoft Visual Basic 6 programs.
            </summary>
            <remarks>
                <para>Uses the VB6.EXE executable included with the Visual Basic 6 environment.</para>
                <para>The compiler uses the settings and source files specified in the project or group file.</para>
            </remarks>
            <example>
              <para>Build the project <c>HelloWorld.vbp</c> in the <c>build</c> directory.</para>
              <code>
                <![CDATA[
            <vb6 project="HelloWorld.vbp" outdir="build" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Vb6Task.ExecuteTask">
            <summary>
            Compiles the Visual Basic project or project group.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Vb6Task.ParseGroupFile(System.IO.FileInfo)">
            <summary>
            Parses a VB group file and extract the file names of the sub-projects 
            in the group.
            </summary>
            <param name="groupFile">The file name of the group file.</param>
            <returns>
            A string collection containing the list of sub-projects in the group.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Vb6Task.ProjectNeedsCompiling(System.String)">
            <summary>
            Determines if a VB project needs to be recompiled by comparing the timestamp of 
            the project's files and references to the timestamp of the last built version.
            </summary>
            <param name="projectFile">The file name of the project file.</param>
            <returns>
            <see langword="true" /> if the project should be compiled; otherwise,
            <see langword="false" />.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Vb6Task.VB6GetTypeLibFile(System.Guid,System.UInt16,System.UInt16,System.UInt32)">
            <summary>
            VB6 uses a special algorithm to search for the typelib file. It doesn't 
            rely on the API function QueryPathOfRegTypeLib, because VB could use a newer
            version of the TLB.
            
            The algorithm used by VB is not perfect and has some flaws, which you could
            get a newer version even if your requested version is installed. This is because
            the algorithm iterates the registry beneath the Guid - entry by entry - from the 
            beginning and returns the first TLB version that is higher or equal to the 
            requested version.
            
            pseudo code:
            1. open the key HKEY_CLASSES_ROOT\TypeLib\{Guid}
            2. If the key exists:
                3. Foreach version under the key that has the requested culture entry:
                    4. If the version higher or equal to the requested version:
                        5. Get the TLB filename and returns it
            </summary>
            <param name="guid">The guid of the tlb to look for</param>
            <param name="major">The major version number of the tlb</param>
            <param name="minor16">The minor version number of the tlb. If you parse minor from a string, treat the string as hex value.</param>
            <param name="lcid">The culture id</param>
            <returns>null if couldn't find a match, otherwise it returns the file.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Vb6Task.ParseProjectFile(System.String,NAnt.Core.Types.FileSet,NAnt.Core.Types.FileSet)">
            <summary>
            Parses a VB project file and extracts the source files, reference files, and 
            the name of the compiled file for the project.
            </summary>
            <param name="projectFile">The filename of the project file.</param>
            <param name="sources">
            A fileset representing the source files of the project, which will
            populated by the method.
            </param>
            <param name="references">
            A fileset representing the references of the project, which will
            populated by the method.
            </param>
            <returns>A string containing the output file name for the project.</returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Vb6Task.OutDir">
            <summary>
            Output directory for the compilation target.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Vb6Task.ProjectFile">
            <summary>
            Visual Basic project or group file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Vb6Task.CheckReferences">
            <summary>
            Determines whether project references are checked when deciding 
            whether the project needs to be recompiled. The default is 
            <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Vb6Task.ErrorFile">
            <summary>
            The file to which the Visual Basic compiler should log errors.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Vb6Task.Conditionals">
            <summary>
            Tells Visual Basic which values to use for conditional compilation
            constants.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Vb6Task.ProgramFileName">
            <summary>
            Gets the filename of the external program to start.
            </summary>
            <value>
            The filename of the external program.
            </value>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Vb6Task.ProgramArguments">
            <summary>
            Gets the command-line arguments for the external program.
            </summary>
            <value>
            The command-line arguments for the external program.
            </value>
        </member>
        <member name="T:NAnt.Contrib.Tasks.VersionTask">
            <summary>
            Increments a four-part version number stored in a text file. The resulting 
            version number is written back to the file and exposed using NAnt properties.
            </summary>
            <remarks>
              <para>
              The version number format in the text file is 
              Major.Minor.Build.Revision, e.g. 1.0.5.25.
              </para>
              <list type="table">
                <item>
                  <term>Major</term>
                  <description>Set in file.</description>
                </item>
                <item>
                  <term>Minor</term>
                  <description>Set in file.</description>
                </item>
                <item>
                  <term>Build</term>
                  <description>Can be incremented by setting the <see cref="P:NAnt.Contrib.Tasks.VersionTask.BuildType"/> parameter.</description>
                </item>
                <item>
                  <term>Revision</term>
                  <description>Can be incremented by setting the <see cref="P:NAnt.Contrib.Tasks.VersionTask.RevisionType"/> parameter.</description>
                </item>
              </list>
              <para>The following NAnt properties are created:</para>
              <list type="table"> 
                <item>
                  <term><c>prefix</c>.version</term>
                  <description>The complete version number, i.e. Major.Minor.Build.Revision</description>
                </item>
                <item>
                  <term><c>prefix</c>.major</term>
                  <description>The major component of the version number.</description>
                </item>
                <item>
                  <term><c>prefix</c>.minor</term>
                  <description>The minor component of the version number.</description>
                </item>
                <item>
                  <term><c>prefix</c>.build</term>
                  <description>The build component of the version number.</description>
                </item>
                <item>
                  <term><c>prefix</c>.revision</term>
                  <description>The revision component of the version number.</description>
                </item>
              </list>
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.VersionTask.ReadVersionFromFile">
            <summary>
            Reads a version string from <see cref="P:NAnt.Contrib.Tasks.VersionTask.Path"/> and returns it as a
            <see cref="T:System.Version"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.Version"/> instance representing the version string in
            <see cref="P:NAnt.Contrib.Tasks.VersionTask.Path"/>.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.VersionTask.WriteVersionToFile(System.Version)">
            <summary>
            Writes the specified version to <see cref="P:NAnt.Contrib.Tasks.VersionTask.Path"/>.
            </summary>
            <param name="version">The version to write to <see cref="P:NAnt.Contrib.Tasks.VersionTask.Path"/>.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.VersionTask.CalculateMonthDayBuildNumber">
            <summary>
            Calculates the build number based on the number of months since the 
            start date.
            </summary>
            <returns>
            The build number based on the number of months since the start date.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.VersionTask.CalculateSecondsSinceMidnight">
            <summary>
            Calculates the number of seconds since midnight. 
            start date.
            </summary>
            <returns>
            The number of seconds since midnight.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.VersionTask.CalculateBuildNumber(System.Int32)">
            <summary>
            Calculates the build number of the version number based on 
            <see cref="P:NAnt.Contrib.Tasks.VersionTask.BuildType"/>.
            </summary>
            <returns>
            The build number.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.VersionTask.CalculateVersion">
            <summary>
            Calculates the complete version.
            </summary>
            <returns>
            The version.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.VersionTask.CalculateRevisionNumber(System.Version,System.Int32)">
            <summary>
            Calculates the revision number of the version number based on RevisionType specified
            </summary>
            <returns>
            The revision number.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.VersionTask.Prefix">
            <summary>
            The string to prefix the properties with. The default is 
            <c>'buildnumber.'</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.VersionTask.StartDate">
            <summary>
            Start of project. Date from which to calculate build number. 
            Required if <see cref="F:NAnt.Contrib.Tasks.VersionTask.BuildNumberAlgorithm.MonthDay"/> is used as 
            <see cref="P:NAnt.Contrib.Tasks.VersionTask.BuildType"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.VersionTask.Path">
            <summary>
            Path to the file containing the current version number. The default 
            file is <c>'build.number'</c> in the project base directory.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.VersionTask.BuildType">
            <summary>
            The algorithm for generating build number. The default is
            <see cref="F:NAnt.Contrib.Tasks.VersionTask.BuildNumberAlgorithm.MonthDay"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.VersionTask.RevisionType">
            <summary>
            The algorithm for generating revision number. The default is
            <see cref="F:NAnt.Contrib.Tasks.VersionTask.RevisionNumberAlgorithm.Automatic"/>.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.VersionTask.BuildNumberAlgorithm">
            <summary>
            Defines possible algorithms to generate the build number.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.VersionTask.BuildNumberAlgorithm.MonthDay">
            <summary>
            Use the number of months since start of project * 100 + current 
            day in month as build number.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.VersionTask.BuildNumberAlgorithm.Increment">
            <summary>
            Increment an existing build number.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.VersionTask.BuildNumberAlgorithm.NoIncrement">
            <summary>
            Use an existing build number (and do not increment it).
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.VersionTask.RevisionNumberAlgorithm">
            <summary>
            Defines possible algorithms to generate the revision number.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.VersionTask.RevisionNumberAlgorithm.Automatic">
            <summary>
            Use the number of seconds since the start of today / 10.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.VersionTask.RevisionNumberAlgorithm.Increment">
            <summary>
            Increment an existing revision number.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory">
            <summary>
            Creates or modifies a virtual directory of a web site hosted on Internet
            Information Server.
            </summary>
            <remarks>
              <para>
              If the virtual directory does not exist it is created, and if it already
              exists it is modified. Only the IIS-properties specified will be set. If set
              by other means (e.g. the Management Console), the unspecified properties retain their current value, 
              otherwise they are inherited from the parent. 
              </para>
              <para>
              For a list of optional parameters see <see href="ms-help://MS.VSCC/MS.MSDNVS/iisref/html/psdk/asp/aore8v5e.htm">IIsWebVirtualDir</see>.
              </para>
              <para>
              More information on metabase parameters is available <see href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/iissdk/iis/alphabeticmetabasepropertylist.asp">here</see>.
            </para>
            </remarks>
            <example>
              <para>
              Create a virtual directory named <c>Temp</c> pointing to <c>c:\temp</c> 
              on the local machine.
              </para>
              <code>
                <![CDATA[
            <mkiisdir dirpath="c:\temp" vdirname="Temp" />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Create a virtual directory named <c>Temp</c> pointing to <c>c:\temp</c> 
              on machine <c>Staging</c>.
              </para>
              <code>
                <![CDATA[
            <mkiisdir iisserver="Staging" dirpath="c:\temp" vdirname="Temp" />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Configure the home directory of for http://svc.here.dev/ to point to
              D:\Develop\Here and require authentication
              </para>
              <code>
                <![CDATA[
            <mkiisdir iisserver="svc.here.dev" dirpath="D:\Develop\Here" vdirname="/" authanonymous="false"/>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Create a virtual directory named <c>WebServices/Dev</c> pointing to 
              <c>c:\MyProject\dev</c> on the web site running on port <c>81</c> of
              machine <c>MyHost</c>.
              </para>
              <code>
                <![CDATA[
            <mkiisdir iisserver="MyHost:81" dirpath="c:\MyProject\dev" vdirname="WebServices/Dev" />
                ]]>
              </code>
              Note that if <c>WebServices</c> is neither an existing virtual directory nor an
              existing physical subdirectory of the web root, your IIS Management Console
              will get confused. Even though <c>http://MyHost:81/WebServices/Dev/theService.asmx</c>
              may be a perfectly working webservice, the Management Console will not show it.
            </example>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Web.WebBase">
            <summary>
            Base class for all IIS-related task.
            </summary>
            <remarks>
            Basically this class hold the logic to determine the IIS version as well
            as the IIS server/port determination/checking logic.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.WebBase.VirtualDirectory">
            <summary>
            Name of the IIS virtual directory.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.WebBase.Server">
            <summary>
            The IIS server, which can be specified using the format <c>[host]:[port]</c>. 
            The default is <c>localhost:80</c>.
            </summary>
            <remarks>
            <para>
            This allows for targeting a specific virtual site on a physical box.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.WebBase.Website">
            <summary>
            The website on the IIS server.  
            </summary>
            <remarks>
            <para>
            This allows for targeting a specific virtual site on a physical box.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.WebBase.Version">
            <summary>
            Gets the version of IIS corresponding with the current OS.
            </summary>
            <value>
            The version of IIS corresponding with the current OS.
            </value>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Web.WebBase.IISVersion">
            <summary>
            Defines the IIS versions supported by the IIS tasks.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AppFriendlyName">
            <summary>
            The user-friendly name of the package or application.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.DirPath">
            <summary>
            The file system path.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessExecute">
            <summary>
            Indicates whether the file or the contents of the folder may be 
            executed, regardless of file type. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessNoRemoteExecute">
            <summary>
            Indicates whether remote requests to execute applications are denied; 
            only requests from the same computer as the IIS server succeed if 
            <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessExecute"/> is set to <see langword="true"/>. You 
            cannot set <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessNoRemoteExecute"/> to <see langword="false"/>
            to enable remote requests, and set <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessExecute"/> to 
            <see langword="false"/> to disable local requests. The default is
            <see langword="false"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessNoRemoteRead">
            <summary>
            Indicates whether remote requests to view files are denied; 
            only requests from the same computer as the IIS server succeed if 
            <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessExecute"/> is set to <see langword="true"/>. You 
            cannot set <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessNoRemoteRead"/> to <see langword="false"/>
            to enable remote requests, and set <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessRead"/> to 
            <see langword="false"/> to disable local requests. The default is
            <see langword="false"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessNoRemoteScript">
            <summary>
            A value of true indicates that remote requests to view dynamic content are denied; only requests from the same computer as the IIS server succeed if the AccessScript property is set to true. You cannot set AccessNoRemoteScript to false to enable remote requests, and set AccessScript to false to disable local requests.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessNoRemoteWrite">
            <summary>
            indicates that remote requests to create or change files are denied; only requests from the same computer as the IIS server succeed if the AccessWrite property is set to true. You cannot set AccessNoRemoteWrite to false to enable remote requests, and set AccessWrite to false to disable local requests.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessRead">
            <summary>
            Indicates whether the file or the contents of the folder may be 
            read. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessSource">
            <summary>
            Indicates whether users are allowed to access source code if either 
            Read or Write permissions are set. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessScript">
            <summary>
            Indicates whether the file or the contents of the folder may be 
            executed if they are script files or static content. The default
            is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessSsl">
            <summary>
            Indicates whether file access requires SSL file permission processing, 
            with or without a client certificate. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccesssSl128">
            <summary>
            Indicates whether file access requires SSL file permission processing 
            with a minimum key size of 128 bits, with or without a client 
            certificate. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessSslMapCert">
            <summary>
            Indicates whether SSL file permission processing maps a client 
            certificate to a Microsoft Windows ® operating system user-account. 
            <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessSslNegotiateCert"/> must also be set to 
            <see langword="true"/> for the mapping to occur. The default is
            <see langword="false"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessSslNegotiateCert">
            <summary>
            Indicates whether SSL file access processing requests a certificate 
            from the client. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessSslRequireCert">
            <summary>
            Indicates whether SSL file access processing requests a certificate 
            from the client. If the client provides no certificate, the connection 
            is closed. <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessSslNegotiateCert"/> must also be set to 
            <see langword="true"/> when using <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessSslRequireCert"/>.
            The default is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessWrite">
            <summary>
            Indicates whether users are allowed to upload files and their 
            associated properties to the enabled directory on your server or 
            to change content in a Write-enabled file. The default is
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AnonymousPasswordSync">
            <summary>
            Indicates whether IIS should handle the user password for anonymous 
            users attempting to access resources. The default is 
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AppCreate">
            <summary>
            Specifies what type of application to create for this virtual directory. 
            The default is <see cref="F:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AppType.Pooled"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AppAllowClientDebug">
            <summary>
            Specifies whether ASP client-side debugging is enabled. The default
            is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AppAllowDebugging">
            <summary>
            Specifies whether ASP debugging is enabled on the server. The default
            is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspAllowSessionState">
            <summary>
            Enables session state persistence for the ASP application. The 
            default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspBufferingOn">
            <summary>
            Specifies whether output from an ASP application will be buffered. 
            If <see langword="true" />, all output from the application is 
            collected in the buffer before the buffer is flushed to the client. 
            With buffering on, the ASP application has to completely process the 
            ASP script before the client receives any output. The default is 
            <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspEnableApplicationRestart">
            <summary>
            Determines whether an ASP application can be automatically restarted. 
            When changes are made to Global.asa or metabase properties that affect 
            an application, the application will not restart unless the 
            <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspEnableApplicationRestart"/> property is set to 
            <see langword="false"/>. The default is <see langword="true"/>.
            </summary>
            <remarks>
            When this property is changed from <see langword="false"/> to 
            <see langword="true"/>, the application immediately restarts.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspEnableAspHtmlFallback">
            <summary>
            Controls the behavior of ASP when a new request is to be rejected 
            due to a full request queue. If <see langword="true" />, an .htm file 
            with a similar name as the requested .asp file, will be sent instead 
            of the .asp file. The naming convention for the .htm file is the 
            name of the .asp file with _asp appended.  The default is
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspEnableChunkedEncoding">
            <summary>
            Specifies whether HTTP 1.1 chunked transfer encoding is enabled for 
            the World Wide Web Publishing Service (WWW service). The default is
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspErrorsToNTLog">
            <summary>
            Specifies which ASP errors are written to the Windows event log. 
            </summary>
            <remarks>
              <para>
              ASP errors are written to the client browser and to the IIS log files 
              by default. <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspLogErrorRequests"/> is set to <see langword="true"/>
              by default, and is modified by <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspErrorsToNTLog"/> in 
              the following way:
              </para>
              <para>
              If <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspLogErrorRequests"/> is set to <see langword="false"/>, 
              then ASP errors are not written to the Windows event log, regardless 
              of the value of <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspErrorsToNTLog"/>.
              </para>
              <para> 
              If <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspLogErrorRequests"/> is set to <see langword="true"/>, 
              and if IIS fails to write an item to the IIS log file, the item is 
              written to the Windows event log as a warning, regardless of the 
              value of <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspErrorsToNTLog"/>. 
              </para>
              <para>
              If <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspLogErrorRequests"/> is set to <see langword="true"/>
              and <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspErrorsToNTLog"/> is set to <see langword="false"/>, 
              then only the most serious ASP errors are sent to the Windows event log. 
              Serious ASP error numbers are: 100, 101, 102, 103, 104, 105, 106, 107, 
              115, 190, 191, 192, 193, 194, 240, 241, and 242.
              </para>
              <para>
              If <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspLogErrorRequests"/> is set to <see langword="true"/>
              and <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspErrorsToNTLog"/> is set to <see langword="true"/>, 
              then all ASP errors are written to the Windows event log.
              </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspEnableParentPaths">
            <summary>
            Specifies whether an ASP page allows paths relative to the current 
            directory. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspEnableTypelibCache">
            <summary>
            Specifies whether type libraries are cached on the server. The 
            default is <see langword="true" />.
            </summary>
            <remarks>
              <para>
              The World Wide Web Publishing Service (WWW service) setting for 
              this property is applicable to all in-process and pooled out-of-process
              application nodes, at all levels.
              </para>
              <para>
              Metabase settings at the Web server level or lower are ignored
              for in-process and pooled out-of-process applications. However, 
              settings at the Web server level or lower are used if that node
              is an isolated out-of-process application.
              </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspExceptionCatchEnable">
            <summary>
            Specifies whether ASP pages trap exceptions thrown by components. 
            If set to <see langword="false" />, the Microsoft Script Debugger tool
            does not catch exceptions sent by the component that you are debugging.
            The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspLogErrorRequests">
            <summary>
            Controls whether the Web server writes ASP errors to the application 
            section of the Windows event log. The default is <see langword="true"/>.
            </summary>
            <remarks>
              <para>
              ASP errors are written to the client browser and to the IIS log files 
              by default. <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspLogErrorRequests"/> is set to <see langword="true"/>
              by default, and is modified by <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspErrorsToNTLog"/> in 
              the following way:
              </para>
              <para>
              If <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspLogErrorRequests"/> is set to <see langword="false"/>, 
              then ASP errors are not written to the Windows event log, regardless 
              of the value of <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspErrorsToNTLog"/>.
              </para>
              <para> 
              If <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspLogErrorRequests"/> is set to <see langword="true"/>, 
              and if IIS fails to write an item to the IIS log file, the item is 
              written to the Windows event log as a warning, regardless of the 
              value of <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspErrorsToNTLog"/>. 
              </para>
              <para>
              If <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspLogErrorRequests"/> is set to <see langword="true"/>
              and <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspErrorsToNTLog"/> is set to <see langword="false"/>, 
              then only the most serious ASP errors are sent to the Windows event log. 
              Serious ASP error numbers are: 100, 101, 102, 103, 104, 105, 106, 107, 
              115, 190, 191, 192, 193, 194, 240, 241, and 242.
              </para>
              <para>
              If <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspLogErrorRequests"/> is set to <see langword="true"/>
              and <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspErrorsToNTLog"/> is set to <see langword="true"/>, 
              then all ASP errors are written to the Windows event log.
              </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspScriptErrorSentToBrowser">
            <summary>
            Specifies whether the Web server writes debugging specifics
            (file name, error, line number, description) to the client browser, 
            in addition to logging them to the Windows Event Log. The default
            is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspThreadGateEnabled">
            <summary>
            Indicates whether IIS thread gating is enabled (only applies to IIS 4 and 5).
            The default is <see langword="false" />.
            </summary>
            <remarks>
            IIS performs thread gating to dynamically control the number of 
            concurrently executing threads, in response to varying load conditions. 
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspTrackThreadingModel">
            <summary>
            Specifies whether IIS checks the threading model of any components 
            that your application creates. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AuthAnonymous">
            <summary>
            Specifies Anonymous authentication as one of the possible authentication
            schemes returned to clients as being available. The default is
            <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AuthBasic">
            <summary>
            Specifies Basic authentication as one of the possible authentication 
            schemes returned to clients as being available. The default is
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AuthNtlm">
            <summary>
            Specifies Integrated Windows authentication as one of the possible 
            authentication schemes returned to clients as being available. The
            default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AuthPersistSingleRequest">
            <summary>
            Specifies that authentication persists only for a single request on 
            a connection. IIS resets the authentication at the end of each request, 
            and forces re-authentication on the next request of the session.
            </summary>
            <remarks>
            [IIS 6.0] When the AuthPersistSingleRequest flag is set to true when 
            using NTLM authentication, IIS 6.0 automatically reauthenticates every 
            request, even those on the same connection.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AuthPersistSingleRequestIfProxy">
            <summary>
            Specifies authentication will persist only across single requests 
            on a connection if the connection is by proxy. Applies to IIS 5.0 
            and 5.1. The default is <see langword="false" />
            </summary>
            <remarks>
            IIS will reset the authentication at the end of the request if the current authenticated 
            request is by proxy and it is not the special case where IIS is running MSPROXY
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AuthPersistSingleRequestAlwaysIfProxy">
            <summary>
            Specifies whether authentication is valid for a single request 
            if by proxy. IIS will reset the authentication at the end of the 
            request and force re-authentication on the next request if the 
            current authenticated request is by proxy of any type. Applies to
            IIS 5.0 and 5.1. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.CacheControlNoCache">
            <summary>
            Specifies whether the HTTP 1.1 directive to prevent caching of content
            should be sent to clients. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.CacheIsapi">
            <summary>
            Indicates whether ISAPI extensions are cached in memory after first 
            use. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.ContentIndexed">
            <summary>
            Specifies whether the installed content indexer should index content 
            under this directory tree. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.CpuAppEnabled">
            <summary>
            Specifies whether process accounting and throttling should be performed 
            for ISAPI extensions and ASP applications. The default is
            <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.CpuCgiEnabled">
            <summary>
            Indicates whether IIS should perform process accounting for CGI 
            applications. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.CreateCgiWithNewConsole">
            <summary>
            Indicates whether a CGI application runs in its own console. The
            default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.CreateProcessAsUser">
            <summary>
            Specifies whether a CGI process is created in the system context 
            or in the context of the requesting user. The default is
            <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.DirBrowseShowDate">
            <summary>
            Specifies whether date information is displayed when browsing 
            directories. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.DirBrowseShowExtension">
            <summary>
            Specifies whether file extensions are displayed when browsing 
            directories. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.DirBrowseShowLongDate">
            <summary>
            Specifies whether date information is displayed in extended format 
            when displaying directories. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.DirBrowseShowSize">
            <summary>
            Specifies whether file size information is displayed when displaying 
            directories. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.DirBrowseShowTime">
            <summary>
            Specifies whether file creation time is displayed when browsing 
            directories. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.DontLog">
            <summary>
            Specifies whether client requests are written to the IIS log files.
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.EnableDefaultDoc">
            <summary>
            When set to true, the default document (specified by the DefaultDoc property) for a directory is loaded when the directory is browsed.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.EnableDirBrowsing">
            <summary>
            Specifies whether directory browsing is enabled. The default is
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.EnableDocFooter">
            <summary>
            Enables or disables custom footers. The default is 
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.EnableReverseDns">
            <summary>
            Enables or disables reverse Domain Name Server (DNS) lookups for 
            the World Wide Web Publishing Service (WWW service). The default is
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.SsiExecDisable">
            <summary>
            Specifies whether server-side include (SSI) #exec directives are 
            disabled under this path. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.UncAuthenticationPassthrough">
            <summary>
            
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspScriptErrorMessage">
            <summary>
            
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.DefaultDoc">
            <summary>
            One or more file names of default documents that will be returned to 
            the client if no file name is included in the client's request.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.UncUserName">
            <summary>
            Specifies the user name for Universal Naming Convention (UNC) virtual 
            roots.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.UncPassword">
            <summary>
            Specifies the encrypted password used to gain access to UNC 
            (Universal Naming Convention) virtual roots.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AppType">
            <summary>
            The different ways a (virtual) directory in IIS can be configured 
            as an application.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AppType.None">
            <summary>
            Virtual directory is not configured as an application.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AppType.InProcess">
            <summary>
            Virtual directory is configured as an in-process application.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AppType.Pooled">
            <summary>
            Virtual directory is configured as a pooled out-of-process 
            application. For IIS4 this is the same as <see cref="F:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AppType.OutOfProcess"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AppType.OutOfProcess">
            <summary>
            Virtual directory is configured as an out-of-process application.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Web.DeleteVirtualDirectory">
            <summary>
            Deletes a virtual directory from a given web site hosted on Internet 
            Information Server.
            </summary>
            <example>
              <para>
              Delete a virtual directory named <c>Temp</c> from the web site running
              on port <c>80</c> of the local machine. If more than one web site is
              running on port <c>80</c>, take the web site bound to the hostname 
              <c>localhost</c> if existent or bound to no hostname otherwise.
              </para>
              <code>
                <![CDATA[
            <deliisdir vdirname="Temp" />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Delete a virtual directory named <c>Temp</c> from the website running 
              on port <c>81</c> of machine <c>MyHost</c>.
              </para>
              <code>
                <![CDATA[
            <deliisdir iisserver="MyHost:81" vdirname="Temp" />
                ]]>
              </code>
            </example>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Web.VirtualDirectoryInfo">
            <summary>
            Lists the configuration settings of a specified virtual directory in a
            web site hosted on Internet Information Server.
            </summary>
            <example>
              <para>
              List the settings of a virtual directory named <c>Temp</c>.
              </para>
              <code>
                <![CDATA[
            <iisdirinfo vdirname="Temp" />
                ]]>
              </code>
            </example>
        </member>
        <member name="T:NAnt.Contrib.Tasks.WsdlTask">
            <summary>Generates code for web service clients and xml web services
            using ASP.NET from WSDL contract files, XSD Schemas and .discomap
            discovery documents. Can be used in conjunction with .disco files.</summary>
            <example>
              <para>Generate a proxy class for a web service.</para>
              <code><![CDATA[<wsdl path="http://www.somewhere.com/myservice.wsdl"
                language="CS" namespace="MyCompany.MyService" outfile="MyService.cs" />]]></code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.Path">
            <summary>URL or Path to a WSDL, XSD, or .discomap document.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.NoLogo">
            <summary>Suppresses the banner.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.Language">
            <summary>Language of generated code. 'CS', 'VB', 'JS',
            or the fully-qualified name of a class implementing
            System.CodeDom.Compiler.CodeDomCompiler. </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.ForServer">
            <summary>Compiles server-side ASP.NET abstract classes
            based on the web service contract. The default is to
            create client side proxy classes. </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.Namespace">
            <summary>Microsoft.NET namespace of generated classes.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.OutFile">
            <summary>Output filename of the created proxy. Default name is derived from the service name.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.Protocol">
            <summary>Override default protocol to implement. Choose from 'SOAP',
            'HttpGet', 'HttpPost', or a custom protocol as specified in the
            configuration file.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.Username">
            <summary>Username of an account with credentials to access a
            server that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.Password">
            <summary>Password of an account with credentials to access a
            server that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.Domain">
            <summary>Domain of an account with credentials to access a
            server that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.Proxy">
            <summary>URL of a proxy server to use for HTTP requests.
            The default is to use the system proxy setting.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.ProxyUsername">
            <summary>Username of an account with credentials to access a
            proxy that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.ProxyPassword">
            <summary>Password of an account with credentials to access a
            proxy that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.ProxyDomain">
            <summary>Domain of an account with credentials to access a
            proxy that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.UrlKey">
            <summary>Configuration key to use in the code generation to
            read the default value for the Url property. The default is
            not to read from the config file.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.BaseUrl">
            <summary>Base Url to use when calculating the Url fragment.
            The UrlKey attribute must also be specified. </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.ProgramArguments">
            <summary>
            Gets the command-line arguments for the external program.
            </summary>
            <value>
            The command-line arguments for the external program.
            </value>
        </member>
        <member name="T:NAnt.Contrib.Tasks.XsdTask">
            <summary>
            The <see cref="T:NAnt.Contrib.Tasks.XsdTask"/> generates XML schema or common language runtime 
            classes from XDR, XML, and XSD files, or from classes in a runtime assembly.
            </summary>
            <remarks>
            <para>
            The following operations can be performed :
            </para>
            <list type="table">
                <listheader>
                    <term>Operation</term>
                    <description>Description</description>
                </listheader>
                <item>
                    <term>XDR to XSD</term>
                    <description>
                        Generates an XML schema from an XML-Data-Reduced schema file. 
                        XDR is an early XML-based schema format. 
                    </description>
                </item>
                <item>
                    <term>XML to XSD</term>
                    <description>
                        Generates an XML schema from an XML file.
                    </description>
                </item>
                <item>
                    <term>XSD to DataSet</term>
                    <description>
                        Generates common language runtime <see cref="T:System.Data.DataSet"/> 
                        classes from an XSD schema file. The generated classes 
                        provide a rich object model for regular XML data. 
                    </description>
                </item>
                <item>
                    <term>XSD to Classes</term>
                    <description>
                        Generates runtime classes from an XSD schema file. The 
                        generated classes can be used in conjunction with 
                        <see cref="T:System.Xml.Serialization.XmlSerializer"/> to 
                        read and write XML code that follows the schema. 
                    </description>
                </item>
                <item>
                    <term>Classes to XSD</term>
                    <description>
                        Generates an XML schema from a type or types in a runtime 
                        assembly file. The generated schema defines the XML format 
                        used by <see cref="T:System.Xml.Serialization.XmlSerializer"/>. 
                    </description>
                </item>
            </list>
            </remarks>
            <example>
              <para>Compile a XML Schema.</para>
              <code>
                <![CDATA[
            <xsd 
                schema="MySchema.xsd" 
                element="MyRootElement" 
                language="CS" 
                namespace="MyCompany.MySchema" 
                outputdir="build\bin"
                uri="http://MySchema'sTargetNamespace" />
                ]]>
              </code>
            </example>
            <example>
              <para>Generate an XML Schema from an assembly.</para>
              <code>
                <![CDATA[
            <xsd assembly="MyAssembly.dll" outputdir="build\Schemas" />
                ]]>
              </code>
            </example>
            <example>
              <para>Generate an XML Schema from an XML document.</para>
              <code>
                <![CDATA[
            <xsd xmldoc="MyDoc.xml" outputdir="build\Schemas" />
                ]]>
              </code>
            </example>
            <example>
              <para>Generate an XML Schema from an XDR Schema.</para>
              <code>
                <![CDATA[
            <xsd xdr="MyOldSchema.xdr" outputdir="build\Schemas" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.XsdTask.InitializeTask(System.Xml.XmlNode)">
            <summary>
            Validates the <see cref="T:NAnt.Core.Task"/>.
            </summary>
            <param name="taskNode">The <see cref="T:System.Xml.XmlNode"/> used to initialize the <see cref="T:NAnt.Core.Task"/>.</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.Schema">
            <summary>
            XML Schema (.xsd) filename.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.Target">
            <summary>
            Target of XML Schema compilation - either <c>classes</c> or 
            <c>dataset</c>. The default is <c>classes</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.Element">
            <summary>
            XML element in the Schema to process.
            </summary>
            <remarks>
            TO-DO : turn this into collection of elements !
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.Language">
            <summary>
            The language to use for the generated code - either <c>CS</c>, 
            <c>VB</c>, <c>JS</c>, <c>VJC</c> or the fully-qualified name of a 
            class implementing <see cref="T:System.CodeDom.Compiler.CodeDomProvider"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.Namespace">
            <summary>
            Specifies the runtime namespace for the generated types. The default 
            namespace is <c>Schemas</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.OutputDir">
            <summary>
            The output directory in which to place generated files.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.Assembly">
            <summary>
            Assembly (.dll or .exe) to generate an XML Schema for.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.Types">
            <summary>
            Types in the assembly for which an XML schema is being created.
            By default all types in the assembly will be included.
            </summary>
            <remarks>
            TO-DO : turn this into collection of types !
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.Uri">
            <summary>
            Specifies the URI for the elements in the <see cref="P:NAnt.Contrib.Tasks.XsdTask.Schema"/> to 
            generate code for. 
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.XmlDoc">
            <summary>
            XML document to generate an XML Schema for.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.Xdr">
            <summary>
            XDR Schema to generate an XML Schema for.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.ProgramArguments">
            <summary>
            Gets the command-line arguments for the external program.
            </summary>
            <value>
            The command-line arguments for the external program.
            </value>
        </member>
        <member name="T:NAnt.Contrib.Types.Assembly">
            <summary>
            Represents a single assembly in an <see cref="T:NAnt.Contrib.Types.AssemblySet"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.Assembly._culture">
            <summary>
            See <see cref="P:NAnt.Contrib.Types.Assembly.Culture"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.Assembly._if">
            <summary>
            See <see cref="P:NAnt.Contrib.Types.Assembly.If"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.Assembly._name">
            <summary>
            See <see cref="P:NAnt.Contrib.Types.Assembly.Name"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.Assembly._publicKeyToken">
            <summary>
            See <see cref="P:NAnt.Contrib.Types.Assembly.PublicKeyToken"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.Assembly._unless">
            <summary>
            See <see cref="P:NAnt.Contrib.Types.Assembly.Unless"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.Assembly._version">
            <summary>
            See <see cref="P:NAnt.Contrib.Types.Assembly.Version"/>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.Assembly.#ctor">
            <summary>
            Constructs and initializes an instance of <c>Assembly</c>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.Assembly.ToString">
            <summary>
            Converts this <c>Assembly</c> object into it's <c>string</c> representation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NAnt.Contrib.Types.Assembly.Culture">
            <summary>
            The culture for the assembly.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.Assembly.If">
            <summary>
            If <c>true</c> then the assembly will be included. The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.Assembly.Name">
            <summary>
            The name of the assembly.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.Assembly.PublicKeyToken">
            <summary>
            The public key token of the assembly.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.Assembly.Unless">
            <summary>
            Opposite of <see cref="P:NAnt.Contrib.Types.Assembly.If"/>. If <c>false</c> then the assembly will be included. The default is
            <c>false</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.Assembly.Version">
            <summary>
            The version of the assembly.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Types.AssemblySet">
            <summary>
            Represents a set of assemblies via their identity information.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.AssemblySet._assemblyCollection">
            <see cref="P:NAnt.Contrib.Types.AssemblySet.AssemblyCollection"/>
        </member>
        <member name="M:NAnt.Contrib.Types.AssemblySet.#ctor">
            <summary>
            Constructs and initializes an instance of <c>AssemblySet</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.AssemblySet.AssemblyCollection">
            <summary>
            Gets the collection of assemblies added to this assembly set.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.AssemblySet.Assemblies">
            <summary>
            The assemblies to include.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.CodeStatsCount.FileSet">
            <summary>
            The set of files to work on.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.CodeStatsCount.Label">
            <summary>
            The label to apply to the results.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Types.CodeStatsCountCollection">
            <summary>
            Contains a collection of <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> elements.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.CodeStatsCountCollection"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountCollection.#ctor(NAnt.Contrib.Types.CodeStatsCountCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.CodeStatsCountCollection"/> class
            with the specified <see cref="T:NAnt.Contrib.Types.CodeStatsCountCollection"/> instance.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountCollection.#ctor(NAnt.Contrib.Types.CodeStatsCount[])">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.CodeStatsCountCollection"/> class
            with the specified array of <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> instances.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountCollection.Add(NAnt.Contrib.Types.CodeStatsCount)">
            <summary>
            Adds a <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> to be added to the end of the collection.</param> 
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountCollection.AddRange(NAnt.Contrib.Types.CodeStatsCount[])">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> array to the end of the collection.
            </summary>
            <param name="items">The array of <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> elements to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountCollection.AddRange(NAnt.Contrib.Types.CodeStatsCountCollection)">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Contrib.Types.CodeStatsCountCollection"/> to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:NAnt.Contrib.Types.CodeStatsCountCollection"/> to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountCollection.Contains(NAnt.Contrib.Types.CodeStatsCount)">
            <summary>
            Determines whether a <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> is in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the 
            collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountCollection.Contains(System.String)">
            <summary>
            Determines whether a <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> with the specified
            value is in the collection.
            </summary>
            <param name="value">The argument value to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if a <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> with 
            value <paramref name="value"/> is found in the collection; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountCollection.CopyTo(NAnt.Contrib.Types.CodeStatsCount[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.        
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param> 
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountCollection.IndexOf(NAnt.Contrib.Types.CodeStatsCount)">
            <summary>
            Retrieves the index of a specified <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> object in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> object for which the index is returned.</param> 
            <returns>
            The index of the specified <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/>. If the <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> is not currently a member of the collection, it returns -1.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountCollection.Insert(System.Int32,NAnt.Contrib.Types.CodeStatsCount)">
            <summary>
            Inserts a <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> to insert.</param>
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:NAnt.Contrib.Types.CodeStatsCountEnumerator"/> for the entire collection.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountCollection.Remove(NAnt.Contrib.Types.CodeStatsCount)">
            <summary>
            Removes a member from the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> to remove from the collection.</param>
        </member>
        <member name="P:NAnt.Contrib.Types.CodeStatsCountCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:NAnt.Contrib.Types.CodeStatsCountCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> with the specified name.
            </summary>
            <param name="value">The name of the <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> to get.</param>
        </member>
        <member name="T:NAnt.Contrib.Types.CodeStatsCountEnumerator">
            <summary>
            Enumerates the <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> elements of a <see cref="T:NAnt.Contrib.Types.CodeStatsCountCollection"/>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountEnumerator.#ctor(NAnt.Contrib.Types.CodeStatsCountCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.CodeStatsCountEnumerator"/> class
            with the specified <see cref="T:NAnt.Contrib.Types.CodeStatsCountCollection"/>.
            </summary>
            <param name="arguments">The collection that should be enumerated.</param>
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true" /> if the enumerator was successfully advanced 
            to the next element; <see langword="false" /> if the enumerator has 
            passed the end of the collection.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the 
            first element in the collection.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.CodeStatsCountEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="T:NAnt.Contrib.Types.Filter">
            <summary>
            Individual filter component of <see cref="T:NAnt.Contrib.Types.FilterSet"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.Filter._token">
            <summary>
            Holds the token which will be replaced in the filter operation.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.Filter._value">
            <summary>
            Holsd the value which will replace the token in the filtering operation.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.Filter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.Filter"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.Filter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.Filter"/> class with
            the given token and value.
            </summary>
            <param name="token">The token which will be replaced when filtering.</param>
            <param name="value">The value which will replace the token when filtering.</param>
        </member>
        <member name="P:NAnt.Contrib.Types.Filter.Token">
            <summary>
            The token which will be replaced when filtering.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.Filter.Value">
            <summary>
            The value which will replace the token when filtering.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Types.FilterCollection">
            <summary>
            Contains a collection of <see cref="T:NAnt.Contrib.Types.Filter"/> elements.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.FilterCollection"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterCollection.#ctor(NAnt.Contrib.Types.FilterCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.FilterCollection"/> class
            with the specified <see cref="T:NAnt.Contrib.Types.FilterCollection"/> instance.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterCollection.#ctor(NAnt.Contrib.Types.Filter[])">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.FilterCollection"/> class
            with the specified array of <see cref="T:NAnt.Contrib.Types.Filter"/> instances.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterCollection.Add(NAnt.Contrib.Types.Filter)">
            <summary>
            Adds a <see cref="T:NAnt.Contrib.Types.Filter"/> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.Filter"/> to be added to the end of the collection.</param> 
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterCollection.AddRange(NAnt.Contrib.Types.Filter[])">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Contrib.Types.Filter"/> array to the end of the collection.
            </summary>
            <param name="items">The array of <see cref="T:NAnt.Contrib.Types.Filter"/> elements to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Contrib.Types.FilterCollection.AddRange(NAnt.Contrib.Types.FilterCollection)">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Contrib.Types.FilterCollection"/> to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:NAnt.Contrib.Types.FilterCollection"/> to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Contrib.Types.FilterCollection.Contains(NAnt.Contrib.Types.Filter)">
            <summary>
            Determines whether a <see cref="T:NAnt.Contrib.Types.Filter"/> is in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.Filter"/> to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the 
            collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterCollection.Contains(System.String)">
            <summary>
            Determines whether a <see cref="T:NAnt.Contrib.Types.Filter"/> with the specified
            token is in the collection.
            </summary>
            <param name="token">The token to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if a <see cref="T:NAnt.Contrib.Types.Filter"/> with the given 
            token is found in the collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterCollection.CopyTo(NAnt.Contrib.Types.Filter[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.        
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param> 
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterCollection.IndexOf(NAnt.Contrib.Types.Filter)">
            <summary>
            Retrieves the index of a specified <see cref="T:NAnt.Contrib.Types.Filter"/> object in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.Filter"/> object for which the index is returned.</param> 
            <returns>
            The index of the specified <see cref="T:NAnt.Contrib.Types.Filter"/>. If the <see cref="T:NAnt.Contrib.Types.Filter"/> is not currently a member of the collection, it returns -1.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterCollection.Insert(System.Int32,NAnt.Contrib.Types.Filter)">
            <summary>
            Inserts a <see cref="T:NAnt.Contrib.Types.Filter"/> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.Filter"/> to insert.</param>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:NAnt.Contrib.Types.FilterEnumerator"/> for the entire collection.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterCollection.Remove(NAnt.Contrib.Types.Filter)">
            <summary>
            Removes a member from the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.Filter"/> to remove from the collection.</param>
        </member>
        <member name="P:NAnt.Contrib.Types.FilterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:NAnt.Contrib.Types.FilterCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NAnt.Contrib.Types.Filter"/> with the specified token.
            </summary>
            <param name="token">The token to get.</param>
        </member>
        <member name="T:NAnt.Contrib.Types.FilterEnumerator">
            <summary>
            Enumerates the <see cref="T:NAnt.Contrib.Types.Filter"/> elements of a <see cref="T:NAnt.Contrib.Types.FilterCollection"/>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterEnumerator.#ctor(NAnt.Contrib.Types.FilterCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.FilterEnumerator"/> class
            with the specified <see cref="T:NAnt.Contrib.Types.FilterCollection"/>.
            </summary>
            <param name="arguments">The collection that should be enumerated.</param>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true" /> if the enumerator was successfully advanced 
            to the next element; <see langword="false" /> if the enumerator has 
            passed the end of the collection.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the 
            first element in the collection.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.FilterEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="T:NAnt.Contrib.Types.FilterSet">
            <summary>
            A set of filters to be applied to something.
            </summary>
            <remarks>
            <para>
            A filter set may have begintoken and endtokens defined.
            </para>
            </remarks>
        </member>
        <member name="F:NAnt.Contrib.Types.FilterSet.DefaultTokenStart">
            <summary>
            The default token start string.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.FilterSet.DefaultTokenEnd">
            <summary>
            The default token end string.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.FilterSet"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSet.ReplaceTokens(System.String)">
            <summary>
            Does replacement on the given string with token matching.
            </summary>
            <param name="line">The line to process the tokens in.</param>
            <returns>
            The line with the tokens replaced.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Types.FilterSet.BeginToken">
            <summary>
            The string used to identity the beginning of a token. The default is
            <c>@</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.FilterSet.EndToken">
            <summary>
            The string used to identify the end of a token. The default is
            <c>@</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.FilterSet.Filters">
            <summary>
            The filters to apply.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Types.FilterSetCollection">
            <summary>
            Contains a collection of <see cref="T:NAnt.Contrib.Types.FilterSet"/> elements.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.FilterSetCollection"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetCollection.#ctor(NAnt.Contrib.Types.FilterSetCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.FilterSetCollection"/> class
            with the specified <see cref="T:NAnt.Contrib.Types.FilterSetCollection"/> instance.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetCollection.#ctor(NAnt.Contrib.Types.FilterSet[])">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.FilterSetCollection"/> class
            with the specified array of <see cref="T:NAnt.Contrib.Types.FilterSet"/> instances.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetCollection.Add(NAnt.Contrib.Types.FilterSet)">
            <summary>
            Adds a <see cref="T:NAnt.Contrib.Types.FilterSet"/> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.FilterSet"/> to be added to the end of the collection.</param> 
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetCollection.AddRange(NAnt.Contrib.Types.FilterSet[])">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Contrib.Types.FilterSet"/> array to the end of the collection.
            </summary>
            <param name="items">The array of <see cref="T:NAnt.Contrib.Types.FilterSet"/> elements to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetCollection.AddRange(NAnt.Contrib.Types.FilterSetCollection)">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Contrib.Types.FilterSetCollection"/> to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:NAnt.Contrib.Types.FilterSetCollection"/> to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetCollection.Contains(NAnt.Contrib.Types.FilterSet)">
            <summary>
            Determines whether a <see cref="T:NAnt.Contrib.Types.FilterSet"/> is in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.FilterSet"/> to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the 
            collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetCollection.CopyTo(NAnt.Contrib.Types.FilterSet[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.        
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param> 
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetCollection.IndexOf(NAnt.Contrib.Types.FilterSet)">
            <summary>
            Retrieves the index of a specified <see cref="T:NAnt.Contrib.Types.FilterSet"/> object in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.FilterSet"/> object for which the index is returned.</param> 
            <returns>
            The index of the specified <see cref="T:NAnt.Contrib.Types.FilterSet"/>. If the <see cref="T:NAnt.Contrib.Types.FilterSet"/> is not currently a member of the collection, it returns -1.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetCollection.Insert(System.Int32,NAnt.Contrib.Types.FilterSet)">
            <summary>
            Inserts a <see cref="T:NAnt.Contrib.Types.FilterSet"/> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.FilterSet"/> to insert.</param>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:NAnt.Contrib.Types.FilterSetEnumerator"/> for the entire collection.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetCollection.Remove(NAnt.Contrib.Types.FilterSet)">
            <summary>
            Removes a member from the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.FilterSet"/> to remove from the collection.</param>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetCollection.ReplaceTokens(System.String)">
            <summary>
            Does replacement on the given string with token matching.
            </summary>
            <param name="line">The line to process the tokens in.</param>
            <returns>
            The line with the tokens replaced.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetCollection.HasFilters">
            <summary>
            Checks to see if there are filters in the collection of filtersets.
            </summary>
            <returns>
            <see langword="true" /> if there are filters in this collection of
            filtersets; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Types.FilterSetCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="T:NAnt.Contrib.Types.FilterSetEnumerator">
            <summary>
            Enumerates the <see cref="T:NAnt.Contrib.Types.FilterSet"/> elements of a <see cref="T:NAnt.Contrib.Types.FilterSetCollection"/>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetEnumerator.#ctor(NAnt.Contrib.Types.FilterSetCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.FilterSetEnumerator"/> class
            with the specified <see cref="T:NAnt.Contrib.Types.FilterSetCollection"/>.
            </summary>
            <param name="arguments">The collection that should be enumerated.</param>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true" /> if the enumerator was successfully advanced 
            to the next element; <see langword="false" /> if the enumerator has 
            passed the end of the collection.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the 
            first element in the collection.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.FilterSetEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="T:NAnt.Contrib.Types.GacReference">
            <summary>
            Used to specify reference information when working with the GAC.
            </summary>
            <remarks>
            <para>
            The full details of GAC references can be found in the SDK documentation.
            </para>
            </remarks>
        </member>
        <member name="F:NAnt.Contrib.Types.GacReference._if">
            <summary>
            See <see cref="P:NAnt.Contrib.Types.GacReference.If"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.GacReference._unless">
            <summary>
            See <see cref="P:NAnt.Contrib.Types.GacReference.Unless"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.GacReference._schemeType">
            <summary>
            See <see cref="P:NAnt.Contrib.Types.GacReference.SchemeType"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.GacReference._schemeId">
            <summary>
            See <see cref="P:NAnt.Contrib.Types.GacReference.SchemeId"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.GacReference._schemeDescription">
            <summary>
            See <see cref="P:NAnt.Contrib.Types.GacReference.SchemeDescription"/>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.GacReference.#ctor">
            <summary>
            Constructs and initializes an instance of <c>GacReference</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.GacReference.If">
            <summary>
            If <c>true</c> then the entity will be included. The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.GacReference.SchemeType">
            <summary>
            The scheme type to use when working with GAC references. The default 
            is <see cref="F:SchemeType.None" />, which means that references will 
            not be used by the GAC task.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.GacReference.SchemeId">
            <summary>
            The scheme ID to use when working with GAC references. This is only 
            relevant if a scheme type other than <see cref="F:SchemeType.None" />
            is specified.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.GacReference.SchemeDescription">
            <summary>
            The scheme description to use when working with GAC references. This 
            is only relevant if a scheme type other than <see cref="F:SchemeType.None" />
            is specified.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.GacReference.Unless">
            <summary>
            Opposite of <see cref="P:NAnt.Contrib.Types.GacReference.If"/>. If <c>false</c> then the entity will be included. The default is
            <c>false</c>.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Types.SchemaElement">
            <summary>
            Represents the an element based on a schema definition.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Types.XmlSchemaReference">
            <summary>
            Represents the schema collection element.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.XmlSchemaReference.Namespace">
            <summary>
            Namespace URI associated with this schema. 
            If not present, it is assumed that the 
            schema's targetNamespace value is to be used.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.XmlSchemaReference.Source">
            <summary>
            Location of this schema. Could be a 
            local file path or an HTTP URL.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Types.XmlSchemaReferenceCollection">
            <summary>
            Contains a collection of <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> elements.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.XmlSchemaReferenceCollection"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.#ctor(NAnt.Contrib.Types.XmlSchemaReferenceCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.XmlSchemaReferenceCollection"/> class
            with the specified <see cref="T:NAnt.Contrib.Types.XmlSchemaReferenceCollection"/> instance.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.#ctor(NAnt.Contrib.Types.XmlSchemaReference[])">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.XmlSchemaReferenceCollection"/> class
            with the specified array of <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> instances.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.Add(NAnt.Contrib.Types.XmlSchemaReference)">
            <summary>
            Adds a <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> to be added to the end of the collection.</param> 
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.AddRange(NAnt.Contrib.Types.XmlSchemaReference[])">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> array to the end of the collection.
            </summary>
            <param name="items">The array of <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> elements to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.AddRange(NAnt.Contrib.Types.XmlSchemaReferenceCollection)">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Contrib.Types.XmlSchemaReferenceCollection"/> to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:NAnt.Contrib.Types.XmlSchemaReferenceCollection"/> to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.Contains(NAnt.Contrib.Types.XmlSchemaReference)">
            <summary>
            Determines whether a <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> is in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the 
            collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.Contains(System.String)">
            <summary>
            Determines whether a <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> with the specified
            value is in the collection.
            </summary>
            <param name="value">The argument value to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if a <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> with 
            value <paramref name="value"/> is found in the collection; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.CopyTo(NAnt.Contrib.Types.XmlSchemaReference[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.        
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param> 
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.IndexOf(NAnt.Contrib.Types.XmlSchemaReference)">
            <summary>
            Retrieves the index of a specified <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> object in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> object for which the index is returned.</param> 
            <returns>
            The index of the specified <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/>. If the <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> is not currently a member of the collection, it returns -1.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.Insert(System.Int32,NAnt.Contrib.Types.XmlSchemaReference)">
            <summary>
            Inserts a <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> to insert.</param>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:NAnt.Contrib.Types.XmlSchemaReferenceEnumerator"/> for the entire collection.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.Remove(NAnt.Contrib.Types.XmlSchemaReference)">
            <summary>
            Removes a member from the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> to remove from the collection.</param>
        </member>
        <member name="P:NAnt.Contrib.Types.XmlSchemaReferenceCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:NAnt.Contrib.Types.XmlSchemaReferenceCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> with the specified name.
            </summary>
            <param name="value">The name of the <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> to get.</param>
        </member>
        <member name="T:NAnt.Contrib.Types.XmlSchemaReferenceEnumerator">
            <summary>
            Enumerates the <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> elements of a <see cref="T:NAnt.Contrib.Types.XmlSchemaReferenceCollection"/>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceEnumerator.#ctor(NAnt.Contrib.Types.XmlSchemaReferenceCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.XmlSchemaReferenceEnumerator"/> class
            with the specified <see cref="T:NAnt.Contrib.Types.XmlSchemaReferenceCollection"/>.
            </summary>
            <param name="arguments">The collection that should be enumerated.</param>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true" /> if the enumerator was successfully advanced 
            to the next element; <see langword="false" /> if the enumerator has 
            passed the end of the collection.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the 
            first element in the collection.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.XmlSchemaReferenceEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="T:NAnt.Contrib.Util.ChecksumHelper">
            <summary>
            Helper class to calculate checksums
            of files.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.ChecksumHelper.#ctor(System.String)">
            <summary>
            Create a new instance
            </summary>
            <param name="providerName">Name of hash algorithm to use</param>
        </member>
        <member name="M:NAnt.Contrib.Util.ChecksumHelper.CalculateChecksum(System.String)">
            <summary>
            Calculates a checksum for a given file
            and returns it in a hex string
            </summary>
            <param name="filename">name of the input file</param>
            <returns>hex checksum string</returns>
        </member>
        <member name="M:NAnt.Contrib.Util.ChecksumHelper.ChecksumToString(System.Byte[])">
            <summary>
            Converts a checksum value (a byte array)
            into a Hex-formatted string.
            </summary>
            <param name="checksum">Checksum value to convert</param>
            <returns>Hexified string value</returns>
        </member>
        <member name="T:NAnt.Contrib.Util.IRecorder">
            <summary>
            Recorder interface user with the Record task
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.IRecorder.Start">
            <summary>
            Starts recording.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.IRecorder.Stop">
            <summary>
            Stops recording.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.IRecorder.Close">
            <summary>
            Closes the recorder.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.IRecorder.Flush">
            <summary>
            Flushes the recorder.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Util.IRecorder.Name">
            <summary>
            Gets the name of this recorder (possibly a file name).
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Util.IRecorder.Logger">
            <summary>
            Gets The underlying <see cref="T:NAnt.Core.IBuildLogger"/> instance.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Util.IRecorder.AutoFlush">
            <summary>
            Defines whether the underlying writer is automatically flushes or 
            not.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Util.RecorderCollection">
            <summary>
            Keeps track of used recorders
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Util.FileLogListener"/>
            class.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.Flush">
            <summary>
            Flushes buffered build events or messages to the underlying storage.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.BuildStarted(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a build has started.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
            <remarks>
            This event is fired before any targets have started.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.BuildFinished(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that the last target has finished.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
            <remarks>
            This event will still be fired if an error occurred during the build.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.TargetStarted(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a target has started.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.TargetFinished(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a task has finished.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
            <remarks>
            This event will still be fired if an error occurred during the build.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.TaskStarted(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a task has started.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.TaskFinished(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a task has finished.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
            <remarks>
            This event will still be fired if an error occurred during the build.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.MessageLogged(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a message has been logged.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
            <remarks>
            Only messages with a priority higher or equal to the threshold of
            the logger will actually be output in the build log.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.Log(System.String)">
            <summary>
            Empty implementation which allows derived classes to receive the
            output that is generated in this logger.
            </summary>
            <param name="message">The message being logged.</param>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.OutputMessage(NAnt.Core.Level,System.String,System.Int32)">
            <summary>
            Outputs an indented message to the build log if its priority is 
            greather than or equal to the <see cref="P:NAnt.Contrib.Util.FileLogListener.Threshold"/> of the 
            logger.
            </summary>
            <param name="messageLevel">The priority of the message to output.</param>
            <param name="message">The message to output.</param>
            <param name="indentationLength">The number of characters that the message should be indented.</param>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.OutputMessage(NAnt.Core.BuildEventArgs)">
            <summary>
            Outputs an indented message to the build log if its priority is 
            greather than or equal to the <see cref="P:NAnt.Contrib.Util.FileLogListener.Threshold"/> of the 
            logger.
            </summary>
            <param name="e">The event to output.</param>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.OutputMessage(NAnt.Core.BuildEventArgs,System.Int32)">
            <summary>
            Outputs an indented message to the build log if its priority is 
            greather than or equal to the <see cref="P:NAnt.Contrib.Util.FileLogListener.Threshold"/> of the 
            logger.
            </summary>
            <param name="e">The event to output.</param>
            <param name="indentationLength">TODO</param>
        </member>
        <member name="P:NAnt.Contrib.Util.FileLogListener.Threshold">
            <summary>
            Gets or sets the highest level of message this logger should respond
            to.
            </summary>
            <value>
            The highest level of message this logger should respond to.
            </value>
            <remarks>
            Only messages with a message level higher than or equal to the given
            level should be written to the log.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Util.FileLogListener.EmacsMode">
            <summary>
            Gets or sets a value indicating whether to produce emacs (and other
            editor) friendly output.
            </summary>
            <value>
            <see langword="true" /> if output is to be unadorned so that emacs 
            and other editors can parse files names, etc. The default is
            <see langword="false" />.
            </value>
        </member>
        <member name="P:NAnt.Contrib.Util.FileLogListener.OutputWriter">
            <summary>
            Gets or sets the <see cref="T:System.IO.TextWriter"/> to which the logger is
            to send its output.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Util.FileUtils">
            <summary>
            Groups a set of useful file manipulation methods.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.FileUtils.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Util.FileUtils"/> class.
            </summary>
            <remarks>
            Prevents instantiation of the <see cref="T:NAnt.Contrib.Util.FileUtils"/> class.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Util.FileUtils.CopyFile(System.String,System.String,System.Text.Encoding,NAnt.Contrib.Types.FilterSetCollection)">
            <summary>
            Copies a file while replacing the tokens identified by the given
            <see cref="T:NAnt.Contrib.Types.FilterSetCollection"/>.
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destinationFileName">The name of the destination file.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> used when filter-copying the file.</param>
            <param name="filtersets">The collection of filtersets that should be applied to the file.</param>
        </member>
        <member name="M:NAnt.Contrib.Util.FileUtils.MoveFile(System.String,System.String,System.Text.Encoding,NAnt.Contrib.Types.FilterSetCollection)">
            <summary>
            Moves a file while replacing the tokens identified by the given
            <see cref="T:NAnt.Contrib.Types.FilterSetCollection"/>.
            </summary>
            <param name="sourceFileName">The file to move.</param>
            <param name="destinationFileName">The name of the destination file.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> used when filter-copying the file.</param>
            <param name="filtersets">The collection of filtersets that should be applied to the file.</param>
        </member>
        <member name="M:NAnt.Contrib.Util.FileUtils.GetRelativePath(System.String,System.String)">
            <summary>
            Given an absolute directory and an absolute file name, returns a 
            relative file name.
            </summary>
            <param name="basePath">An absolute directory.</param>
            <param name="absolutePath">An absolute file name.</param>
            <returns>
            A relative file name for the given absolute file name.
            </returns>
        </member>
        <member name="T:NAnt.Contrib.Util.SqlHelper">
            <summary>
            Helper class used to execute Sql Statements.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlHelper.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="connectionString">OleDB Connection string</param>
            <param name="useTransaction">True if you want to use a transaction</param>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlHelper.Close(System.Boolean)">
            <summary>
            Close the connection and terminate
            </summary>
            <param name="commit">true if the transaction should be commited</param>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlHelper.Execute(System.String,System.Int32)">
            <summary>
            Executes a SQL statement.
            </summary>
            <param name="sql">SQL statement to execute</param>
            <param name="cmdTimeout">Command timeout to use</param>
            <returns>Data reader used to check the result</returns>
        </member>
        <member name="P:NAnt.Contrib.Util.SqlHelper.Connection">
            <summary>
            OleDB Connection object
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Util.SqlStatementAdapter">
            <summary>
            Helper class to adapt SQL statements from some
            input into something OLEDB can consume directly
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlStatementAdapter.#ctor(NAnt.Contrib.Util.SqlStatementList)">
            <summary>
            Creates a new instance
            </summary>
            
        </member>
        <member name="M:NAnt.Contrib.Util.SqlStatementAdapter.AdaptSql(System.String)">
            <summary>
            Adapts a set of Sql statements from a string.
            </summary>
            <param name="sql">A string containing the original sql statements</param>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlStatementAdapter.AdaptSqlFile(System.String)">
            <summary>
            Adapts a set of Sql statements from a string.
            </summary>
            <param name="file">Path of file containing all sql statements</param>
            <returns>The new instance</returns>
        </member>
        <member name="T:NAnt.Contrib.Util.DelimiterStyle">
            <summary>
            Determines how the delimiter is interpreted in a SQL string.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Util.DelimiterStyle.Normal">
            <summary>
            Delimiter can appear anywhere on a line.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Util.DelimiterStyle.Line">
            <summary>
            Delimiter always appears by itself on a line.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Util.SqlStatementList">
            <summary>
            Helper class to maintain a list of SQL Statements.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlStatementList.#ctor(System.String,NAnt.Contrib.Util.DelimiterStyle)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="delimiter">String that separates statements from each other</param>
            <param name="style">Style of the delimiter</param>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlStatementList.ParseSql(System.String)">
            <summary>
            Parses the SQL into the internal list using the specified delimiter
            and delimiter style
            </summary>
            <param name="sql">The SQL string to parse.</param>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlStatementList.ParseSqlFromFile(System.String)">
            <summary>
            Parses the contents of the file into the 
            internal list using the specified delimiter
            and delimiter style
            </summary>
            <param name="file">File name</param>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlStatementList.GetEnumerator">
            <summary>
            Allows foreach().
            </summary>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlStatementList.StripComments(System.String)">
            <summary>
            Strips all single line comments 
            in the specified sql
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlStatementList.ExpandProps(System.String)">
            <summary>
            Expands project properties in the
            sql string
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="P:NAnt.Contrib.Util.SqlStatementList.Count">
            <summary>
            Gets the number of statements in the list.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Util.SqlStatementList.Item(System.Int32)">
            <summary>
            Gets the statement specified by the index.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Util.SqlStatementList.Properties">
            <summary>
            Project's properties for property expansion
            </summary>
        </member>
    </members>
</doc>
