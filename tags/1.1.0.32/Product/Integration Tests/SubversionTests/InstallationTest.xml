<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://nant.sf.net/schemas/nant.xsd" name="Subversion.InstallationTest" default="Subversion.InstallationTest.RunAllTests" basedir="..\">

  <ifnot test="${task::exists('testrunner')}">
    <loadtasks assembly="bin\CIFactory.NAnt.UnitTest.Tasks.dll" />
    <include buildfile="TestRunner.Properties.xml"/>
    <include buildfile="TestRunner.Common.xml"/>
  </ifnot>
  
  <target name="Subversion.InstallationTest.RunAllTests">
		<testrunner reportfilepath="${IntegrationTest.ReportFilePath}">
      <fixtures>
        <string value="Subversion.InstallationTest"/>
      </fixtures>
    </testrunner>
  </target>

  <target name="Subversion.InstallationTest.SetProperties">
    <property name="ProjectName" value="SVNTestProject"/>
    <property name="ProjectsDirectory" value="c:\Projects" />
    <property name="ProjectRootDirectory" value="${ProjectsDirectory}\${ProjectName}"/>
    <property name="ProjectCodeLineName" value="Current" />
    <property name="ProjectCodeLineDirectory" value="${ProjectRootDirectory}\${ProjectCodeLineName}" />
    <property name="ProductDirectory" value="${ProjectCodeLineDirectory}\Product" />
    <property name="ThirdPartyDirectory" value="${ProjectCodeLineDirectory}\Third Party" />
    <property name="ProductionDirectory"  value="${ProductDirectory}\Production" />
    <property name="BuildDirectory" value="${ProjectCodeLineDirectory}\Build" />
    <property name="ArtifactRootDirectory" value="${BuildDirectory}\Artifacts"/>
    <property name="NantBinPath" value="${BuildDirectory}\nAnt\bin"/>
    <property name="NantExePath" value="${NantBinPath}\nant.exe"/>
    <property name="PackagesDirectory" value="${BuildDirectory}\Packages"/>

    <property name="SVN.URI.Root" value="http://localhost:81/svn"  />
    <property name="SVN.URI.ProjectName" value="${SVN.URI.Root}/${ProjectName}" />
    <property name="SVN.Username" value="build" />
    <property name="SVN.Password" value="password"  />

    <property name="CCNET.ServerUrl" value="tcp://localhost:21246/CruiseManager.rem"/>
    <property name="CCNET.ProjectName" value="${ProjectName}-${ProjectCodeLineName}"/>
    <property name="CCNET.BatchFile" value="${BuildDirectory}\CCNETServer.Bat"/>

    <property name="BranchName" value="1.0"/>
  </target>
  
  <target name="Subversion.InstallationTest.FixtureSetUp">

    <property name="SvnBinPath" value="${environment::get-variable('ProgramFiles')}\Subversion\bin" overwrite="false"/>
    <setenv name="PATH" value="${environment::get-variable('PATH')};${SvnBinPath}" unless="${string::contains(environment::get-variable('PATH'), SvnBinPath)}" />
    
    <call target="Subversion.InstallationTest.SetProperties"/>

    <property name="TestRunner.DeleteIISVirDirs.ProjectName" value="${ProjectName}"/>
    <property name="TestRunner.DeleteIISVirDirs.ProjectCodeLineName" value="${ProjectCodeLineName}" />
    <call target="TestRunner.DeleteIISVirDirs" if="${directory::exists(ProjectRootDirectory)}" failonerror="false"/>

    <property name="TestRunner.DeleteIISVirDirs.ProjectCodeLineName" value="${BranchName}" />
    <call target="TestRunner.DeleteIISVirDirs" if="${directory::exists(ProjectRootDirectory)}" failonerror="false"/>
    <delete dir="${ProjectRootDirectory}" if="${directory::exists(ProjectRootDirectory)}"/>
    <assertequal actual="${directory::exists(ProjectRootDirectory)}" expected="False" message="Was not able to delete ${ProjectRootDirectory}."/>

    <loglevel level="None">
      <do>
        <exec program="svn" commandline='delete -m "Subversion.InstallationTest.FixtureSetUp" ${SVN.URI.ProjectName}' failonerror='false' />
        <exec program="svn" commandline='list ${SVN.URI.ProjectName}' resultproperty='SVN.Delete.Result' failonerror='false' />
      </do>
    </loglevel>
    <!--<assertequal actual="${SVN.Delete.Result}" expected="1" message="Was not able to delete ${SVN.URI.ProjectName}."/>-->

    <copy file="SubversionTests\Install Resources\DefaultArguments.xml" tofile="${Deployment.Directory.Path}\Install Scripts\Arguments.xml" overwrite="true" />
    <exec program="${Deployment.Directory.Path}\nAnt\bin\nant.exe" commandline='-buildfile:"Install Scripts\Install.xml"' workingdir="${Deployment.Directory.Path}"  />

    <copy todir="${ProductDirectory}" overwrite="true">
      <fileset basedir="SubversionTests\Resources">
        <include name="**\*"/>
      </fileset>
    </copy>

    <exec program="${BuildDirectory}\nAnt\bin\nant.exe" workingdir="${BuildDirectory}" verbose="true">
      <arg line="/f:Main.build.xml"/>
      <arg line="SourceControl.Repository.Load" />
      <arg line='-D:CCNetBuildDate="2006-09-12"' />
      <arg line='-D:CCNetBuildTime="11:10:00"' />
      <arg line='-D:CCNetLabel="fake"' />
    </exec>

    <loglevel level="None">
      <do>
        <ccnetstop serverurl="${CCNET.ServerUrl}" failonerror="false"/>
      </do>
    </loglevel>
    <sleep seconds="2"/>
  </target>

  <target name="Subversion.InstallationTest.FixtureTearDown">
    <property name="CCNET.ServerUrl" value="tcp://localhost:21246/CruiseManager.rem"/>
    <ccnetstop serverurl="${CCNET.ServerUrl}" failonerror="false"/>

    <trycatch if="${property::exists('CCNet.Pid')}">
      <try>
        <waitfor condition="${process::isrunning(CCNet.Pid) == false}" timeout="10" pollinginterval="2"/>
      </try>
      <catch>
        <exec program="taskkill" commandline="/PID ${CCNet.Pid} /T /F" if="${process::isrunning(CCNet.Pid)}" />
      </catch>
    </trycatch>

    <property name="CCNET.ServerUrl" value="tcp://localhost:21247/CruiseManager.rem"/>
    <ccnetstop serverurl="${CCNET.ServerUrl}" failonerror="false"/>

    <trycatch if="${property::exists('BranchCCNet.Pid')}">
      <try>
        <waitfor condition="${process::isrunning(BranchCCNet.Pid) == false}" timeout="10" pollinginterval="2"/>
      </try>
      <catch>
        <exec program="taskkill" commandline="/PID ${BranchCCNet.Pid} /T /F" if="${process::isrunning(BranchCCNet.Pid)}" />
      </catch>
    </trycatch>
  </target>

  <target name="Subversion.InstallationTest.SetUp">
    
  </target>

  <target name="Subversion.InstallationTest.TearDown">
    
  </target>

  <target name="Subversion.InstallationTest.DefaultInstallTest">
    <delete dir="${ProjectRootDirectory}" if="${directory::exists(ProjectRootDirectory)}"/>
    <property name="TempDirectory" value="C:\Temp"/>
    <mkdir dir="${TempDirectory}" unless="${directory::exists(TempDirectory)}"/>
    <exec program="svn" commandline="export --force --non-interactive ${SVN.URI.ProjectName}/${ProjectCodeLineName}/Build/dashboard/WorkspaceSetup/${ProjectName}-${ProjectCodeLineName}-WorkspaceSetup.exe" workingdir='${TempDirectory}' verbose="true" />
    <exec program="${environment::get-variable('ProgramFiles')}\winrar\winrar.exe" 
          commandline="x -O+ ${TempDirectory}\${ProjectName}-${ProjectCodeLineName}-WorkspaceSetup.exe" workingdir='${TempDirectory}' verbose="true" />
    <exec program="${TempDirectory}\nant\bin\nant.exe" commandline=''
          workingdir='${TempDirectory}' verbose="true">
      <arg line="/f:Packages\Workspace\Workspace.Setup.xml" />
      <arg line='-D:SourceControl.PackageName="Subversion"' />
      <arg line='-D:SourceControl.Update.Interactive="False"' />
      <arg line='-D:Silent="True"' />
      <arg line='-D:ToBuild="Yes"' />
      <arg line='-D:SVN.Username="Build"' />
      <arg line='-D:SVN.Password="password"' />
    </exec>
    
    <asyncexec workingdir="${BuildDirectory}" program="${CCNET.BatchFile}" createnowindow="false" redirectoutput="false" useshellexecute="true" waitforexit="false" pid="CCNet.Pid" />

    <waitfor condition="${ccnet::try-get-project-state(CCNET.ServerUrl, CCNET.ProjectName) == 'Running'}" timeout="20" pollinginterval="3"/>
    <waitfor condition="${ccnet::get-project-activity(CCNET.ServerUrl, CCNET.ProjectName) == 'Building'}" timeout="20" pollinginterval="3"/>
    <waitfor condition="${ccnet::get-project-activity(CCNET.ServerUrl, CCNET.ProjectName) == 'Sleeping'}" timeout="300" pollinginterval="10"/>
    <assertequal actual="${ccnet::get-project-build-status(CCNET.ServerUrl, CCNET.ProjectName)}" expected="Success" message="Expected build to be successful."/>

    <nant buildfile="${BuildDirectory}\CreateBranch.xml" inheritall="false" inheritrefs="false" >
      <properties>
        <property name="BranchLabelPrefix" value="1.0.1."/>
        <property name="BranchParentLabelPrefix" value="2.0.0."/>
        <property name="BranchBuildServerPort" value="21247"/>
        <property name="BranchBuildServerRestPort" value="21258"/>
        <property name="BranchBuildServerHostName" value="${environment::get-machine-name()}"/>
        <property name="BranchName" value="${BranchName}"/>
        <property name="Branch${ProjectName}-${BranchName}BuildScriptsInitialVersion" value="BuildScripts-1.0-1"/>
        <property name="Branch${ProjectName}-${BranchName}InitialVersion" value="1.0.1.1"/>
        <property name="ParentBranch${ProjectName}-${ProjectCodeLineName}BuildScriptsLabelPrefix" value="${BranchParentLabelPrefix}" dynamic="true"/>
        <property name="FixBadRefPath" value="Yes"/>
      </properties>
    </nant>

    <asyncexec workingdir="${BuildDirectory}" program="${CCNET.BatchFile}" createnowindow="false" redirectoutput="false" useshellexecute="true" waitforexit="false" pid="CCNet.Pid" />
    <waitfor condition="${ccnet::try-get-project-state(CCNET.ServerUrl, CCNET.ProjectName + ' Build Scripts') == 'Running'}" timeout="20" pollinginterval="3"/>
    <waitfor condition="${ccnet::get-project-last-build-label(CCNET.ServerUrl, CCNET.ProjectName + ' Build Scripts') == '2.0.0.1'}" timeout="30" pollinginterval="3"/>
    <waitfor condition="${ccnet::try-get-project-state(CCNET.ServerUrl, CCNET.ProjectName) == 'Running'}" timeout="20" pollinginterval="3"/>

    <ccnetforce projectname="${CCNET.ProjectName}" serverurl="${CCNET.ServerUrl}" >
      <ccnetplugins>
        <include name="${BuildDirectory}\server\CCNET.Extensions.Plugin.dll"/>
      </ccnetplugins>
    </ccnetforce>

    <sleep seconds="5"/>
    
    <waitfor condition="${ccnet::get-project-activity(CCNET.ServerUrl, CCNET.ProjectName) == 'Sleeping'}" timeout="300" pollinginterval="10"/>
    <assertequal actual="${ccnet::get-project-build-status(CCNET.ServerUrl, CCNET.ProjectName)}" expected="Success" message="Expected build to be successful."/>
    <assertequal actual="${ccnet::get-project-last-build-label(CCNET.ServerUrl, CCNET.ProjectName)}" expected="2.0.0.1" message="Expected the version to be '2.0.0.1'."/>

    <delete dir="${ThirdPartyDirectory}\MbUnit" />

    <asyncexec workingdir="${ProjectRootDirectory}\${BranchName}\Build" program="CCNETServer.Bat" createnowindow="false" redirectoutput="false" useshellexecute="true" waitforexit="false" pid="BranchCCNet.Pid" />
    <sleep seconds="5"/>

    <property name="CCNET.ServerUrl" value="tcp://localhost:21247/CruiseManager.rem"/>
    <property name="CCNET.ProjectName" value="${ProjectName}-${BranchName}"/>

    <waitfor condition="${ccnet::get-project-activity(CCNET.ServerUrl, CCNET.ProjectName) == 'Building'}" timeout="10" pollinginterval="10"/>
    <waitfor condition="${ccnet::get-project-activity(CCNET.ServerUrl, CCNET.ProjectName) == 'Sleeping'}" timeout="300" pollinginterval="10"/>
    <assertequal actual="${ccnet::get-project-build-status(CCNET.ServerUrl, CCNET.ProjectName)}" expected="Success" message="Expected build to be successful."/>
    <assertequal actual="${ccnet::get-project-last-build-label(CCNET.ServerUrl, CCNET.ProjectName)}" expected="1.0.1.1" message="Expected the version to be '1.0.1.1'."/>
  </target>

</project>