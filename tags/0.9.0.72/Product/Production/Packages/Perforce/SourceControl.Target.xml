<?xml version="1.0" encoding="utf-8" ?>
<project xmlns="http://nant.sf.net/schemas/nant.xsd" name="Perforce.Target" >

  <include buildfile="SourceControl.Properties.xml" />

  <property name="Private.Perforce.CacheFile" value="CacheFile.xml"/>
  <property name="Private.Perforce.ReportDirectory" value="${BuildDirectory}\Perforce" overwrite="false"/>

  <include buildfile="${Private.Perforce.ReportDirectory}\${Private.Perforce.CacheFile}" if="${file::exists(Private.Perforce.ReportDirectory + '\' + Private.Perforce.CacheFile)}" failonerror="false"/>
  <property name="Perforce.LastBuildTime" value="${CCNetBuildDate} ${CCNetBuildTime}" overwrite="false"/>

  <regex pattern="(?'StaticLabelPart'.*\.)(?'BuildNumber'\d+)$" input="${CCNetLabel}"/>
  <property name="Perforce.LastBuildLabel" value="${StaticLabelPart}${int::parse(BuildNumber) - 1}"/>

	<target name="SourceControl.CleanGetFromFileSpecThirdPartyDirectory" >
		<if test="${not property::exists('SourceControl.GetFromFileSpec') or SourceControl.GetFromFileSpec == ''}">
			<property name="SourceControl.GetFromFileSpec" value="${CCNetFileSpecId}"/>
		</if>

		<echo message="Getting ${ThirdPartyDirectory} from FileSpec ${SourceControl.GetFromFileSpec}" />

		<property name="Private.SourceControl.Update.LocalPath" value="${ThirdPartyDirectory}"/>
		<property name="SourceControl.Update.All" value="true"/>

		<property name="SourceControl.Update.FileSpec" value="SourceControl.GetFromFileSpec"/>

		<call target="Private.SourceControl.CleanUpdate"/>
	</target>

	<target name="SourceControl.GetFromFileSpecThirdPartyDirectory" >
		<if test="${not property::exists('SourceControl.GetFromFileSpec') or SourceControl.GetFromFileSpec == ''}">
			<property name="SourceControl.GetFromFileSpec" value="${CCNetFileSpecId}"/>
		</if>

		<echo message="Getting ${ThirdPartyDirectory} from FileSpec ${SourceControl.GetFromFileSpec}" />

		<property name="Private.SourceControl.Update.LocalPath" value="${ThirdPartyDirectory}"/>
		<property name="SourceControl.Update.All" value="false"/>

		<property name="SourceControl.Update.FileSpec" value="SourceControl.GetFromFileSpec"/>

		<call target="Private.SourceControl.Update"/>
	</target>

	<target name="SourceControl.CleanGetFromLabelOfThirdPartyDirectory" >
		<property name="Private.SourceControl.Update.LocalPath" value="${ThirdPartyDirectory}"/>
		<property name="SourceControl.Update.All" value="true"/>

		<property name="SourceControl.Update.FileSpec" value="SourceControl.CleanGetFromLabel"/>

		<call target="Private.SourceControl.CleanUpdate"/>
	</target>

	<target name="SourceControl.CleanGetOfThirdPartyDirectory" >
		<property name="Private.SourceControl.Update.LocalPath" value="${ThirdPartyDirectory}"/>
		<property name="SourceControl.Update.FileSpec" value=""/>
		<property name="SourceControl.Update.All" value="true"/>
		<call target="Private.SourceControl.CleanUpdate"/>
	</target>

	<target name="SourceControl.GetOfThirdPartyDirectory" >
		<property name="Private.SourceControl.Update.LocalPath" value="${ThirdPartyDirectory}"/>
		<property name="SourceControl.Update.FileSpec" value=""/>
		<property name="SourceControl.Update.All" value="false"/>
		<call target="Private.SourceControl.Update"/>
	</target>

  <target name="SourceControl.CleanGetOfProductDirectory" >
		<property name="Private.SourceControl.Update.LocalPath" value="${ProductDirectory}"/>
		<property name="SourceControl.Update.FileSpec" value=""/>
		<property name="SourceControl.Update.All" value="true"/>
		<call target="Private.SourceControl.CleanUpdate"/>
	</target>

	<target name="SourceControl.GetOfProductDirectory" >
		<property name="Private.SourceControl.Update.LocalPath" value="${ProductDirectory}"/>
		<property name="SourceControl.Update.FileSpec" value=""/>
		<property name="SourceControl.Update.All" value="false"/>
		<call target="Private.SourceControl.Update"/>
	</target>

	<target name="SourceControl.CleanGetFromFileSpecProductDirectory" >
		<if test="${not property::exists('SourceControl.GetFromFileSpec') or SourceControl.GetFromFileSpec == ''}">
			<property name="SourceControl.GetFromFileSpec" value="${CCNetFileSpecId}"/>
		</if>

		<echo message="Getting ${ProductDirectory} from FileSpec ${SourceControl.GetFromFileSpec}" />

		<property name="Private.SourceControl.Update.LocalPath" value="${ProductDirectory}"/>
		<property name="SourceControl.Update.All" value="true"/>

		<property name="SourceControl.Update.FileSpec" value="SourceControl.GetFromFileSpec"/>

		<call target="Private.SourceControl.CleanUpdate"/>
	</target>

	<target name="SourceControl.GetFromFileSpecProductDirectory" >
		<if test="${not property::exists('SourceControl.GetFromFileSpec') or SourceControl.GetFromFileSpec == ''}">
			<property name="SourceControl.GetFromFileSpec" value="${CCNetFileSpecId}"/>
		</if>

		<echo message="Getting ${ProductDirectory} from FileSpec ${SourceControl.GetFromFileSpec}" />

		<property name="Private.SourceControl.Update.LocalPath" value="${ProductDirectory}"/>
		<property name="SourceControl.Update.All" value="false"/>

		<property name="SourceControl.Update.FileSpec" value="SourceControl.GetFromFileSpec"/>
		
		<call target="Private.SourceControl.Update"/>
	</target>

	<!-- Needed for SourceControl.CleanGetFromLabelofProductDirectory
  <property name="SourceControl.GetFromLabel" value=""/>
  -->

  <target name="SourceControl.CleanGetFromLabelOfProductDirectory">
		<property name="Private.SourceControl.Update.LocalPath" value="${ProductDirectory}"/>
		<property name="SourceControl.Update.All" value="true"/>
		
		<property name="SourceControl.Update.FileSpec" value="SourceControl.CleanGetFromLabel"/>
		
		<call target="Private.SourceControl.CleanUpdate"/>
  </target>

  <target name="SourceControl.GetOfBuildDirectory" >
		<property name="Private.SourceControl.Update.LocalPath" value="${BuildDirectory}"/>
		<property name="SourceControl.Update.FileSpec" value=""/>
		<property name="SourceControl.Update.All" value="false"/>
		<call target="Private.SourceControl.Update"/>
  </target>


	<target name="Private.SourceControl.CleanUpdate">
		<property name="Private.SourceControl.DeleteDirectory.Directory" value="${Private.SourceControl.Update.LocalPath}"/>
		<call target="Private.SourceControl.DeleteDirectory"/>

		<call target="Private.SourceControl.Update"/>
	 </target>

	<!--
  <property name="Private.SourceControl.Update.LocalPath" value=""/>
  <property name="SourceControl.Update.ReplaceWritableFiles" value="False"/>
	<property name="SourceControl.Update.FileSpec" value=""/>
	 <property name="SourceControl.Update.All" value="true"/>
	 -->

	<target name="Private.SourceControl.Update">
		<call target="Private.SourceControl.EnsureWorkspace"/>

		<if test="${property::exists('SourceControl.Update.FileSpec') == false or SourceControl.Update.FileSpec == ''}">
			<property name="SourceControl.Update.FileSpec" value="SourceControl.Update.FileSpec"/>
		</if>
		
		<!--Add Perforce Sync here-->
	 </target>

  <!--
  The following properties should be specified in the calling script.
  
  <property name="SourceControl.CheckOut.File" value="${Private.Versioning.AssemblyInfoFile}"/>
  -->
  <target name="SourceControl.CheckOut">
    <call target="Private.SourceControl.EnsureWorkspace"/>
    <!--Add Perforce Edit here-->
  </target>

  <!--
  The following properties should be specified in the calling script.
  
  <property name="SourceControl.CheckIn.File" value="${Private.Versioning.AssemblyInfoFile}"/>
  -->
  <target name="SourceControl.CheckIn">
    <call target="Private.SourceControl.EnsureWorkspace"/>
		<!--Add Perforce Submit here-->
	</target>

	<!-- Needed for Private.SourceControl.ConvertLocalPathToPath
  <property name="Private.SourceControl.ConvertLocalPathToPath.LocalPath" value=""/>
  -->
  <!-- Returned by Private.SourceControl.ConvertLocalPathToPath
  <property name="Private.SourceControl.ConvertLocalPathToPath.Path" value=""/>
  -->
  <target name="Private.SourceControl.ConvertLocalPathToPath">
    <property name="Private.SourceControl.ConvertLocalPathToPath.Path" value="${sourcecontrol::convertlocaltoserver(Private.SourceControl.ConvertLocalPathToPath.LocalPath)}"/>
  </target>
  
  <!-- Needed for Private.SourceControl.DeleteDirectory
  <property name="Private.SourceControl.DeleteDirectory.Directory" value=""/>
  -->

  <target name="Private.SourceControl.DeleteDirectory">
    <if test="${directory::exists(Private.SourceControl.DeleteDirectory.Directory)}" >
      <attrib readonly="false">
        <fileset>
          <include name="${Private.SourceControl.DeleteDirectory.Directory}\*" />
        </fileset>
      </attrib>

      <trycatch>
        <try>
          <delete dir="${Private.SourceControl.DeleteDirectory.Directory}"/>
        </try>
        <catch>
          <exec program="cmd" commandline='/C "rmdir /S /Q "${Private.SourceControl.DeleteDirectory.Directory}""' />
        </catch>
      </trycatch>
    </if>
  </target>
  
  <script language="C#" prefix="sourcecontrol">
    <code>
      <![CDATA[                 
					
          [Function("convertlocaltoserver")]
					public string ConvertLocalToServer(string local)
          {
            String server = local.Replace(this.Project.Properties["ProjectsDirectory"], "");
            server = server.Replace(@"\", @"/");
            server = String.Format(@"{0}{1}", this.Project.Properties["Perforce.ServerPathPrefix"], server);
          }
          
			]]>
    </code>
  </script>

  <target name="Private.SourceControl.EnsureWorkspace">
    <!--Ensure the workspace is-->
		<p4client clientname="${Perforce.WorkspaceName}" 
							root="${ProjectCodeLineDirectory}"
							port="${Perforce.ServerName}:${Perforce.ServerPort}" 
							view="${sourcecontrol::convertlocaltoserver(ProjectCodeLineDirectory)}" />
  </target>

  <target name="SourceControl.SetUp">
    <mkdir dir="${Private.Perforce.ReportDirectory}" unless="${directory::exists(Private.Perforce.ReportDirectory)}" />
    <delete>
      <fileset>
        <include name="${Private.Perforce.ReportDirectory}\*.*"/>
        <exclude name="${Private.Perforce.ReportDirectory}\${Private.Perforce.CacheFile}"/>
      </fileset>
    </delete>

    <saveproperties format="Include" file="${Private.Perforce.ReportDirectory}\${Private.Perforce.CacheFile}">
      <property name="Perforce.LastBuildTime" value="${CCNetBuildDate} ${CCNetBuildTime}"/>
    </saveproperties>
  </target>

  <target name="SourceControl.TearDown">

  </target>
  
</project>